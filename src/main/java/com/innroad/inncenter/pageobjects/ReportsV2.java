package com.innroad.inncenter.pageobjects;

import static org.junit.Assert.assertFalse;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.TimeZone;

import org.apache.bcel.generic.IFLE;
import org.apache.log4j.Logger;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.testng.Assert;
import org.testng.asserts.SoftAssert;

import com.innroad.inncenter.properties.OR;
import com.innroad.inncenter.properties.OR_Reports;
import com.innroad.inncenter.properties.OR_Reservation;
import com.innroad.inncenter.testcore.TestCore;
import com.innroad.inncenter.utils.ESTTimeZone;
import com.innroad.inncenter.utils.RetryFailedTestCases;
import com.innroad.inncenter.utils.Utility;
import com.innroad.inncenter.waits.Wait;
import com.innroad.inncenter.webelements.Elements_Accounts;
import com.innroad.inncenter.webelements.Elements_CPReservation;
import com.innroad.inncenter.webelements.Elements_On_All_Navigation;
import com.innroad.inncenter.webelements.Elements_Reports;
import com.innroad.inncenter.webelements.Elements_Reports;
import com.innroad.inncenter.webelements.Elements_Reservation;
import com.innroad.inncenter.webelements.Elements_Reservation_SearchPage;
import com.innroad.inncenter.webelements.Elements_SetUp_Properties;
import com.innroad.inncenter.webelements.Elements_Users;
import com.relevantcodes.extentreports.ExtentTest;

import freemarker.template.utility.DateUtil.CalendarFieldsToDateConverter;
import net.sourceforge.htmlunit.corejs.javascript.ConsString;

public class ReportsV2 {

	public static Logger reportLogger = Logger.getLogger("ReportsV2");

	// public static Logger reportLogger = Logger.getLogger("ReportsV2");

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <navigateToReports> Description: <This method
	 * navigates to ReportsV2 page> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <07/24/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void navigateToReports(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		JavascriptExecutor jse = (JavascriptExecutor) driver;
		try {
			jse.executeScript("arguments[0].click();", res.ReportsIcon);
		} catch (Exception e) {
			jse.executeScript("arguments[0].click();", res.Reports);
		}
		Wait.explicit_wait_xpath(OR_Reports.BrowseAllReports, driver);
		reportLogger.info("Navigated to Reports");
		test_steps.add("Navigated to Reports");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <clickHelpButton> Description: <This method
	 * clicks on Help button in ReportsV2 page> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <07/24/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void clickHelpButton(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.Help);
		Utility.clickThroughJavaScript(driver, res.Help);
		Utility.switchTab(driver, 1);
		Wait.WaitForElement(driver, OR_Reports.ReportsHelpPageHeader);
		reportLogger.info("validated Help button");
		test_steps.add("validated Help button");
		// driver.close();
		// Utility.switchTab(driver, 0);
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validatePerformanceFilter> Description: <This
	 * method validates Performance filter in Reports-V2 page as per options should
	 * be available> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <07/24/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validatePerformanceFilter(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.explicit_wait_elementToBeClickable(res.PerformanceFilter, driver);
		Utility.clickThroughAction(driver, res.PerformanceFilter);

		boolean condition1 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.PerformanceReportsHeading));
		boolean condition2 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.DailyFlashReport));
		boolean condition3 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.NetSalesReport));
		boolean condition4 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.RoomForecastReport));
		boolean condition5 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.AccountingReportsHeading));
		boolean condition6 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.AdvanceDepositReport));
		boolean condition7 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.AccountBalancesReport));
		boolean condition8 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.LedgerBalancesReport));
		boolean condition9 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Incidentals));
		boolean condition10 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.PaymentMethod));
		boolean condition11 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Taxes));
		boolean condition12 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.TransactionsReport));

		if (condition1 && condition2 && condition3 && condition4 && !condition5 && !condition6 && !condition7
				&& !condition8 && !condition9 && !condition10 && !condition11 && !condition12) {
			reportLogger.info("Sucess - Validaion of Performance filter");
			test_steps.add("Success - Validaion of Performance filter");
		} else {
			Assert.assertTrue(false, "Fail - Validaion of Performance filter");
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateAccountingFilter> Description: <This
	 * method validates Accounting filter in Reports-V2 page as per options should
	 * be available> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <07/24/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateAccountingFilter(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.explicit_wait_elementToBeClickable(res.AccountingFilter, driver);
		Utility.clickThroughAction(driver, res.AccountingFilter);

		boolean condition1 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.PerformanceReportsHeading));
		boolean condition2 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.DailyFlashReport));
		boolean condition3 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.NetSalesReport));
		boolean condition4 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.RoomForecastReport));
		boolean condition5 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.AccountingReportsHeading));
		boolean condition6 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.AdvanceDepositReport));
		boolean condition7 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.AccountBalancesReport));
		boolean condition8 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.LedgerBalancesReport));
		//boolean condition9 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Incidentals));
		//boolean condition10 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.PaymentMethod));
		//boolean condition11 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Taxes));
		boolean condition12 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.TransactionsReport));

		if (!condition1 && !condition2 && !condition3 && !condition4 && condition5 && condition6 && condition7
				&& condition8 && condition12) {

			reportLogger.info("Success - Validaion of Accounting filter");
			test_steps.add("Sucess - Validaion of Accounting filter");
		} else {
			Assert.assertTrue(false, "Fail - Validaion of Accounting filter");
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <navigateToLedgerBalancesReport> Description:
	 * <This method navigates to Ledger Balances Report> Input parameters:
	 * <WebDriver driver> Return value: <void> Created By: <Naveen Kadthala> Created
	 * On: <07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void navigateToLedgerBalancesReport(WebDriver driver) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		// Wait.explicit_wait_visibilityof_webelement(res.LedgerBalancesReport, driver);
		// Utility.clickThroughAction(driver, res.BrowseAllReports);
		Wait.wait3Second();
		for (int i = 0; i < 15; i++) {
			try {
				Wait.explicit_wait_visibilityof_webelement_3(res.LedgerBalancesReport, driver);
				break;
			} catch (Exception e) {
				//Utility.clickThroughAction(driver, res.BrowseAllReports);
				res.BrowseAllReports.click();
			}
		}

		try {
			Wait.wait1Second();
			Utility.clickThroughAction(driver, res.LedgerBalancesReport);
			Wait.wait1Second();
			Utility.switchTab(driver, 1);
		} catch (Exception e) {
			try {
				Wait.wait1Second();
				res.LedgerBalancesReport.click();
				Wait.wait1Second();
				Utility.switchTab(driver, 1);
			}catch(Exception e1) {
				Wait.wait1Second();
				Utility.clickThroughAction(driver, res.LedgerBalancesReport);
				Wait.wait1Second();
				Utility.switchTab(driver, 1);
			}
		}
		Wait.WaitForElement(driver, OR_Reports.LedgerBalancesReportHeader);
		String inc = "//*[contains(text(),'Incidental')]";
		for (int i = 0; i < 10; i++) {
			try {
				Wait.explicit_wait_visibilityof_webelement_3(driver.findElement(By.xpath(inc)), driver);
				break;
			}catch(Exception e) {
				driver.navigate().refresh();
			}
			
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <navigateToDailyFlashReport> Description: <This
	 * method navigates to Daily Flash Report> Input parameters: <WebDriver driver>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void navigateToDailyFlashReport(WebDriver driver) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		
		Wait.wait3Second();
		for (int i = 0; i < 15; i++) {
			try {
				Wait.explicit_wait_visibilityof_webelement_3(res.DailyFlashReport, driver);
				break;
			} catch (Exception e) {
				//Utility.clickThroughAction(driver, res.BrowseAllReports);
				res.BrowseAllReports.click();
			}

		}
		
		try {
			res.DailyFlashReport.click();
			Utility.switchTab(driver, 1);
		}catch(Exception e) {
			try {
				Utility.clickThroughAction(driver, res.DailyFlashReport);
				Utility.switchTab(driver, 1);
			}catch (Exception e1) {
				res.DailyFlashReport.click();
				Utility.switchTab(driver, 1);
			}
		}
		Wait.WaitForElement(driver, OR_Reports.DailyFlashReportHeader);
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <navigateToNetSalesReport> Description: <This
	 * method navigates to Daily Net Sales Report> Input parameters: <WebDriver
	 * driver> Return value: <void> Created By: <Naveen Kadthala> Created
	 * On:<07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void navigateToNetSalesReport(WebDriver driver) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		res.NetSalesReport.click();
		Utility.switchTab(driver, 1);
		Wait.WaitForElement(driver, OR_Reports.NetSalesReportHeader);
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <navigateToRoomForecast> Description: <This
	 * method navigates to Room Forecast Report> Input parameters: <WebDriver
	 * driver> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void navigateToRoomForecastReport(WebDriver driver) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.waitForElementToBeClickable(By.xpath(OR_Reports.RoomForecastReport), driver);
		res.RoomForecastReport.click();
		Utility.switchTab(driver, 1);
		try {
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.RoomForecastReportHeader), driver);
			reportLogger.info("Navigated to Room Forecast Report");
		}catch(Exception e) {
			reportLogger.info("Failed, unable to navigate to Room Forecast Report page");
		}
		
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <navigateToAdvanceDepositReport> Description:
	 * <This method navigates to Advance Deposit Report> Input parameters:
	 * <WebDriver driver> Return value: <void> Created By: <Naveen Kadthala> Created
	 * On: <07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void navigateToAdvanceDepositReport(WebDriver driver) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		res.AdvanceDepositReport.click();
		Utility.switchTab(driver, 1);
		Wait.WaitForElement(driver, OR_Reports.AdvanceDepositReportHeader);
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <navigateToAccountBalancesReport> Description:
	 * <This method navigates to Account Balances Report> Input parameters:
	 * <WebDriver driver> Return value: <void> Created By: <Naveen Kadthala> Created
	 * On: <07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void navigateToAccountBalancesReport(WebDriver driver) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		res.AccountBalancesReport.click();
		Utility.switchTab(driver, 1);
		Wait.WaitForElement(driver, OR_Reports.AccountBalancesReportHeader);
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <navigateToTransactionsReport> Description:
	 * <This method navigates to Transactions Report> Input parameters: <WebDriver
	 * driver> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void navigateToTransactionsReport(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		res.TransactionsReport.click();
		Utility.switchTab(driver, 1);
		try {
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.TransactionsReportHeader), driver);
			reportLogger.info("Navigated to Transactions Report");
			test_steps.add("Navigated to Transactions Report");
		}catch(Exception e) {
			reportLogger.info("Failed, unable to navigate to Transactions Report page");
			test_steps.add("Failed, unable to navigate to Transactions Report page");
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateInRoadImageinLedgerBalanceReport>
	 * Description: <This method validates InnRoad image in Ledger Balance Report>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateInRoadImageinLedgerBalanceReport(WebDriver driver, ArrayList<String> test_steps) {
		//Wait.WaitForElement(driver, OR_Reports.InnRoadImage);
		boolean condition = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.InnRoadImage));
		if (condition) {
			reportLogger.info("Success - Validation of InnRoad Image");
			test_steps.add("Success - Validation of InnRoad Image");
		} else {
			reportLogger.info("Failed - Validation of InnRoad Image");
			test_steps.add("AssertionError - Failed - Validation of InnRoad Image");
		}
			
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateTooltipOfInnRoadImage> Description:
	 * <This method validates tool tip of InnRoad's image in Ledger Balance Report>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateTooltipOfInnRoadImage(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.InnRoadImage);
		if ((res.InnRoadImage.getAttribute("title")).equals("innRoad Reports")) {
			reportLogger.info("Success - validation of InnRoad image tooltip");
			test_steps.add("Success - validation of InnRoad image tooltip");
		} else {
			reportLogger.info("Failed - validation of InnRoad image tooltip");
			test_steps.add("AssertionError - Failed - validation of InnRoad image tooltip");
		}
			
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateMainHeaderinLedgerBalanceReport>
	 * Description: <This method validates Main Header in Ledger Balance Report>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateMainHeaderinLedgerBalanceReport(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.LedgerBalancesReportMainHeader);
		boolean condition = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.LedgerBalancesReportMainHeader));
		if (condition) {
			reportLogger.info("Success - Validation of Ledger Balances Report's Main Header");
			test_steps.add("Success - Validation of Ledger Balances Report's Main Header");
		} else {
			reportLogger.info("Failed - Validation of Ledger Balances Report's Main Header");
			test_steps.add("AssertionError - Failed - Validation of Ledger Balances Report's Main Header");
		}
			
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateMainHeaderToolTipinLedgerBalanceReport> Description: <This method
	 * validates Main Header's tool tip in Ledger Balance Report> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateMainHeaderToolTipinLedgerBalanceReport(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.LedgerBalancesReportMainHeader);
		if ((res.LedgerBalancesReportMainHeader.getAttribute("title")).equals("Report name")) {
			reportLogger.info("Success - validation of Tool tip of Main Header in Ledger Balances Report");
			test_steps.add("Success - validation of Tool tip of Main Header in Ledger Balances Report");
		} else {
			reportLogger.info("Failed - validation of Tool tip of Main Header in Ledger Balances Report");
			test_steps.add("AssertionError - Failed - validation of Tool tip of Main Header in Ledger Balances Report");
		}
			
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateCollapseFunctionalityinLedgerBalancesReport> Description: <This
	 * method validates collapse functionality in Ledger Balance Report> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateCollapseFunctionalityinLedgerBalancesReport(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		while (!Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Collapse)))
			res.Edit.click();
		Wait.explicit_wait_elementToBeClickable(res.Collapse, driver);
		Utility.clickThroughAction(driver, res.Collapse);
		boolean condition1 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.ChoseDateRange));
		boolean condition2 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.SelectInputs));
		boolean condition3 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.CustomizeDetailedView));

		if (!condition1 && !condition2 && !condition3) {
			reportLogger.info("Success - Validaion of Collapse functionlity");
			test_steps.add("Sucess - Validaion of Collapse functionlity");
		} else {
			reportLogger.info("Failed - Validaion of Collapse functionlity");
			test_steps.add("AssertionError Failed - Validaion of Collapse functionlity");
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateEditFunctionalityinLedgerBalancesReport> Description: <This method
	 * validates Edit functionality in Ledger Balance Report> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <07/27/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateEditFunctionalityinLedgerBalancesReport(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.explicit_wait_elementToBeClickable(res.Edit, driver);
		Utility.clickThroughAction(driver, res.Edit);
		Wait.WaitForElement(driver, OR_Reports.AdvancedInputs);
		boolean condition1 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.ChoseDateRange));
		boolean condition2 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.SelectInputs));
		boolean condition3 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.CustomizeDetailedView));
		if (condition1 && condition2 && condition3) {
			reportLogger.info("Success - Validaion of Edit functionlity");
			test_steps.add("Sucess - Validaion of Edit functionlity");
		} else {
			reportLogger.info("Failed - Validaion of Edit functionlity");
			test_steps.add("AssertionError Failed - Validaion of Edit functionlity");
			//Assert.assertTrue(false, "Fail - Validaion of Edit functionlity");
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateExcelExportIsDisabledBeforeRunReport>
	 * Description: <This method validates if Excel export is disabled before run
	 * report> Input parameters: <WebDriver driver, ArrayList<String> test_steps>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <07/28/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateExcelExportIsDisabledBeforeRunReport(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.ExcelExport);
		String s = driver.findElement(By.xpath("//span[text()='Excel']/..")).getAttribute("disabled");
		if (s.equals("true")) {
			reportLogger.info("Success - Excel Export disable validation before Run Report");
			test_steps.add("Sucess - Excel Export disable validation before Run Report");
		} else {
			reportLogger.info("Failed - Excel Export disable validation before Run Report");
			test_steps.add("AssertionError - Failed - Excel Export disable validation before Run Report");
		}
			
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validatePDFExportIsDisabledBeforeRunReport>
	 * Description: <This method validates if PDF export is disabled before run
	 * report> Input parameters: <WebDriver driver, ArrayList<String> test_steps>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <07/28/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validatePDFExportIsDisabledBeforeRunReport(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.PDFExport);
		String s = driver.findElement(By.xpath("//span[text()='PDF']/..")).getAttribute("disabled");
		if (s.equals("true")) {
			reportLogger.info("Success - PDF Export disable validation before Run Report");
			test_steps.add("Sucess - PDF Export disable validation before Run Report");
		} else {
			reportLogger.info("Failed - PDF Export disable validation before Run Report");
			test_steps.add("AssertionError - Failed - PDF Export disable validation before Run Report");
			//Assert.assertTrue(false, "Fail - PDF Export is disable validation before Run Report");
		}
			
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validatePrinttIsDisabledBeforeRunReport>
	 * Description: <This method validates if Print is disabled before run report>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <07/28/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validatePrinttIsDisabledBeforeRunReport(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.Print);
		String s = driver.findElement(By.xpath("//span[text()='Print']/..")).getAttribute("disabled");
		if (s.equals("true")) {
			reportLogger.info("Success - Print disable validation before Run Report");
			test_steps.add("Sucess - Print disable validation before Run Report");
		} else {
			reportLogger.info("Failed - Print disable validation before Run Report");
			test_steps.add("AssertionError - Failed - Print disable validation before Run Report");
			//Assert.assertTrue(false, "Fail - Print is disable validation before Run Report");
		}
			
	}
	
	public void validateHelpButonInAllReportPages(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.Print);
		
		String strHelp = "//span[contains(text(),'Help')]";
		try {
			Wait.waitForElementToBeVisibile(By.xpath(strHelp), driver);
			reportLogger.info("Success - Help button is available in Room Forecast Report Main header");
			test_steps.add("Success - Help button is available in Room Forecast Report Main header");
		} catch (Exception e) {
			reportLogger.info("Failed - Help button is not available in Room Forecast Report Main header");
			test_steps.add("AssertionError Failed - Help button is not available in Room Forecast Report Main header");
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateExcelExportToolTipBeforeRunReport>
	 * Description: <This method validates Excel tool tip before run report> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <07/28/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateExcelExportToolTipBeforeRunReport(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.ExcelExport);
		Utility.hoverOnElement(driver, res.ExcelExport);
		Wait.WaitForElement(driver, OR_Reports.ExcelExportToolTipBeforeRunReport);
		if ((res.ExcelExportToolTipBeforeRunReport.getText()).equals("Please click \"Run Report\" before exporting.")) {
			reportLogger.info("Success - Excel Export tooltip validation before run report");
			test_steps.add("Success - Excel Export tooltip validation before run report");
		} else
			Assert.assertTrue(false, "Fail - Excel Export tooltip validation before run report");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validatePDFExportToolTipBeforeRunReport>
	 * Description: <This method validates PDF Export tool tip before run report>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <07/28/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validatePDFExportToolTipBeforeRunReport(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.PDFExport);
		Utility.hoverOnElement(driver, res.PDFExport);
		Wait.WaitForElement(driver, OR_Reports.PDFExportToolTipBeforeRunReport);
		try {
			if ((res.PDFExportToolTipBeforeRunReport.getText()).equals("Please click \"Run Report\" before exporting.")) {
				reportLogger.info("Success - PDF Export tooltip validation before run report");
				test_steps.add("Sucess - PDF Export tooltip validation before run report");
			} else {
				Assert.assertTrue(false, "Fail - PDF Export tooltip validation before run report");
			}			
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validatePrintToolTipBeforeRunReport>
	 * Description: <This method validates Print tool tip before run report> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <07/28/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validatePrintToolTipBeforeRunReport(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.PDFExport);
		Utility.hoverOnElement(driver, res.PDFExport);
		Wait.WaitForElement(driver, OR_Reports.PDFExportToolTipBeforeRunReport);
		try {
			if ((res.PDFExportToolTipBeforeRunReport.getText()).equals("Please click \"Run Report\" before exporting.")) {
				reportLogger.info("Success - Print tooltip validation before Run Report");
				test_steps.add("Sucess - Print tooltip  validation before Run Report");
			} else {
				Assert.assertTrue(false, "Fail - PDF Export tooltip validation before run report");
			}			
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <clickOnRunReport> Description: <This method
	 * validates clicks on run report> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <07/28/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void clickOnRunReport(WebDriver driver) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.waitForElementToBeClickable(By.xpath(OR_Reports.RunReport), driver);
		Utility.clickThroughAction(driver, res.RunReport);
		reportLogger.info("Clicked on Run Report");
		//Wait.waitForElementToBeInvisibile(By.xpath(OR_Reports.loadingReportIcon), driver);
	}

	public void clickOnRunReport(WebDriver driver, ArrayList<String> test_steps) {
		clickOnRunReport(driver);
		test_steps.add("Clicked on Run Report");
	}

	public void clickOnRunReportBottom(WebDriver driver) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.explicit_wait_elementToBeClickable(res.RunReportAtBottom, driver);
		Utility.clickThroughAction(driver, res.RunReportAtBottom);
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateExcelExportIsEnabledBAfterRunReport>
	 * Description: <This method validates if Excel Export is enabled after Run
	 * Report> Input parameters: <WebDriver driver, ArrayList<String> test_steps>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <07/28/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateExcelExportIsEnabledAfterRunReport(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.ExcelExport);
		String s = driver.findElement(By.xpath("//span[text()='Excel']/..")).getAttribute("disabled");
		if (s == null) {
			reportLogger.info("Success - Excel Export validation after Run Report");
			test_steps.add("Success - Excel Export validation after Run Report");
		} else
			Assert.assertTrue(false, "Fail - Excel Export validation after Run Report");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validatePDFExportIsEnabledAfterRunReport>
	 * Description: <This method validates if PDF Export is enabled after Run
	 * Report> Input parameters: <WebDriver driver, ArrayList<String> test_steps>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <07/28/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validatePDFExportIsEnabledAfterRunReport(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.PDFExport);
		String s = driver.findElement(By.xpath("//span[text()='PDF']/..")).getAttribute("disabled");
		if (s == null) {
			reportLogger.info("Success - PDF Export validation after Run Report");
			test_steps.add("Success - PDF Export validation after Run Report");
		} else
			Assert.assertTrue(false, "Fail - PDF Export validation after Run Report");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validatePrinttIsEnabledAfterRunReport>
	 * Description: <This method validates if Print is enabled after Run Report>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <07/28/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validatePrinttIsEnabledAfterRunReport(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.Print);
		String s = driver.findElement(By.xpath("//span[text()='Print']/..")).getAttribute("disabled");
		if (s == null) {
			reportLogger.info("Success - Print validation after Run Report");
			test_steps.add("Success - Print validation after Run Report");
		} else
			Assert.assertTrue(false, "Fail - Print validation after Run Report");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateExcelExportToolTipAfterRunReport>
	 * Description: <This method validates Excel export tool tip after Run Report>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <07/29/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateExcelExportToolTipAfterRunReport(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.ExcelExport);
		String s = driver.findElement(By.xpath("//span[text()='Excel']/..")).getAttribute("title");
		if (s.equals("Export report to Excel")) {
			reportLogger.info("Success - Excel tool tip validation after Run Report");
			test_steps.add("Sucess - Excel tool tip validation after Run Report");
		} else
			Assert.assertTrue(false, "Fail - Excel tool tip validation after Run Report");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validatePDFExportToolTipAfterRunReport>
	 * Description: <This method validates PDF export tool tip after Run Report>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <07/29/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validatePDFExportToolTipAfterRunReport(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.PDFExport);
		String s = driver.findElement(By.xpath("//span[text()='PDF']/..")).getAttribute("title");
		if (s.equals("Export report to PDF")) {
			reportLogger.info("Success - PDF tool tip validation after Run Report");
			test_steps.add("Sucess - PDF tool tip validation after Run Report");
		} else
			Assert.assertTrue(false, "Fail - PDF tool tip validation after Run Report");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validatePrintToolTipAfterRunReport>
	 * Description: <This method validates Print export tool tip after Run Report>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <07/29/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validatePrintToolTipAfterRunReport(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.Print);
		String s = driver.findElement(By.xpath("//span[text()='Print']/..")).getAttribute("title");
		if (s.equals("Print report")) {
			reportLogger.info("Success - Print tool tip validation after Run Report");
			test_steps.add("Sucess - Print tool tip validation after Run Report");
		} else
			Assert.assertTrue(false, "Fail - Print tool tip validation after Run Report");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateSortReportbyToolTip> Description:
	 * <This method validates Sort Report By tool tip> Input parameters: <WebDriver
	 * driver, ArrayList<String> test_steps> Return value: <void> Created By:
	 * <Naveen Kadthala> Created On: <07/29/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateSortReportbyToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.SortReportBy);
		WebElement e = driver.findElement(By.xpath("//*[text()='Sort Report By']/../following-sibling::span"));
		Utility.hoverOnElement(driver, e);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Sort Report By')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Sort Report By')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'Sorts the report data in the detailed view')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String exp1 = "Sort Report By";
		String exp2 = "Sorts the report data in the detailed view based on the list of options in the dropdown.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Sort Report By tooltip validation");
			test_steps.add("Sucess - Sort Report By tooltip validation");
		} else
			Assert.assertTrue(false, "Fail - Sort Report By tooltip validation");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateSortReportbyOptions> Description:
	 * <This method validates Sort Report options> Input parameters: <WebDriver
	 * driver, ArrayList<String> test_steps> Return value: <void> Created By:
	 * <Naveen Kadthala> Created On: <07/29/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateSortReportbyOptions(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		String[] actOptions = { "Amount", "Arrival Date", "Transaction Date", "Guest/Account Name", "Item Description", "Processing Method",
				"Reservation Number", "Tax Exempt" };
		Utility.clickThroughAction(driver, res.SortReportByOptionsExpand);
		Wait.waitForElementToBeVisibile(By.xpath("//div[@id='sortBy_list']/following-sibling::div/div/div/div/div"),
				driver);
		List<WebElement> expoptions = driver
				.findElements(By.xpath("//div[@id='sortBy_list']/following-sibling::div/div/div/div/div/div"));
		for (int i = 0; i < actOptions.length; i++) {
			reportLogger.info(actOptions[i]);
			reportLogger.info(expoptions.get(i).getText());
			Assert.assertEquals(actOptions[i], expoptions.get(i).getText(),
					"FAIL - Sort Report By drop down options validation" + "<br>"
							+ "<a href='https://innroad.atlassian.net/browse/RPT-338'>"
							+ "Click here to open JIRA: RPT-338</a>");
		}
		Utility.clickThroughAction(driver, res.SortReportByOptionsExpand);
		reportLogger.info("Success - Sort Report By drop down options validation");
		test_steps.add("Sucess - Sort Report By drop down options validation" + "<br>"
				+ "<a href='https://innroad.atlassian.net/browse/RPT-338'>" + "Click here to open JIRA: RPT-338</a>");

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateGroupRowsbyToolTip> Description: <This
	 * method validates Group Rows by tool tip> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <07/29/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateGroupRowsbyToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.SortReportBy);
		WebElement e = driver.findElement(By.xpath("//*[text()='Group Rows By']/../following-sibling::span"));
		Utility.hoverOnElement(driver, e);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Group Rows By')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Group Rows By')]"))
				.getText();
		String act2 = driver.findElement(By
				.xpath("//div[@class='ant-popover-inner-content']/p[contains(text(),'Group rows by a specific time')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String exp1 = "Group Rows By";
		String exp2 = "Group rows by a specific time period in the �Detailed View� section of the report. For example, if �Day� is selected, then each row is a day. If �Month� is selected, each row is a Month.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Group Rows By tooltip validation");
			test_steps.add("Sucess - Group Rows By tooltip validation" + "<br>"
					+ "<a href='https://innroad.atlassian.net/browse/RPT-308'>" + "Click here to open JIRA: RPT-308</a>"
					+ "<br>" + "<a href='https://innroad.atlassian.net/browse/RPT-535'>"
					+ "Click here to open JIRA: RPT-535</a>");
		} else
			Assert.assertTrue(false, "Fail - Group Rows By tooltip validation" + "<br>"
					+ "<a href='https://innroad.atlassian.net/browse/RPT-308'>" + "Click here to open JIRA: RPT-308</a>"
					+ "<br>" + "<a href='https://innroad.atlassian.net/browse/RPT-535'>"
					+ "Click here to open JIRA: RPT-535</a>" + "<br>");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateGroupRowsbyOptions> Description: <This
	 * method validates Group Rows options> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <07/29/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateGroupRowsbyOptions(WebDriver driver, ArrayList<String> test_steps) {
		String[] actOptions = { "Transaction", "Day", "Month", "Year" };
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.GroupRowsByOptionsExpand);
		Wait.waitForElementToBeVisibile(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div/div"),
				driver);
		List<WebElement> expoptions = driver
				.findElements(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div"));
		for (int i = 0; i < actOptions.length; i++) {
			Assert.assertEquals(actOptions[i], expoptions.get(i).getText(),
					"FAIL - Group Rows By drop down options validation");
		}
		Utility.clickThroughAction(driver, res.GroupRowsByOptionsExpand);
		reportLogger.info("Success - Group Rows By drop down options validation");
		test_steps.add("Sucess - Group Rows By drop down options validation");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateAdvancedOptionsToolTip> Description:
	 * <This method validates Advanced Options tool tip> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/03/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public boolean validateAdvancedOptionsToolTip(WebDriver driver, ArrayList<String> test_steps) {
		boolean flag = false;
		Wait.WaitForElement(driver, OR_Reports.AdvancedInputs);
		//WebElement e = driver.findElement(By.xpath("//*[text()='Advanced Inputs']/../../following-sibling::span"));
		WebElement e = driver.findElement(By.xpath("//*[text()='Advanced Inputs']/../span/span"));
		Utility.hoverOnElement(driver, e);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Advanced Inputs')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Advanced Inputs')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'to view the list of advanced')]"))
				.getText();
		String exp1 = "Advanced Inputs";
		String exp2 = "Expand this section to view the list of advanced options you can choose from, to narrow down your search and filter the report data further.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			flag = true;
			reportLogger.info("Success - Advanced Inputs tooltip validation");
			test_steps.add("Sucess - Advanced Inputs tooltip validation");
		} else {
			flag = false;
			reportLogger.info("Failed - Advanced Inputs tooltip validation. Expected: "+exp2+" But found: "+act2);
			test_steps.add("AssertionError - Failed - Advanced Inputs tooltip validation. Expected: "+exp2+" But found: "+act2);
			//Assert.assertTrue(false, "Fail - Advanced Options tooltip validation");
		}
		return flag;	
	}
	
	public boolean validateAdvancedInputsAvailability(WebDriver driver, ArrayList<String> test_steps) {
		boolean flag = false;
		
		try {
			Wait.WaitForElement(driver, OR_Reports.AdvancedInputs);
			flag = true;
			reportLogger.info("Success - Advanced Inputs available in Laedger Balances Report");
			test_steps.add("Success - Advanced Inputs available in Laedger Balances Report");
		}catch(Exception e) {
			flag = false;
			reportLogger.info("Failed - Advanced Inputs available in Laedger Balances Report");
			test_steps.add("AssertionError - Failed - Advanced Inputs available in Laedger Balances Report");
		}
		
		return flag;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateExpandAllfunctionalityofAdvancedOptions> Description: <This method
	 * validates Expand All functionality of advanced options> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/03/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public boolean validateExpandAllfunctionalityofAdvancedOptions(WebDriver driver, ArrayList<String> test_steps) {
		boolean flag = false;
		Elements_Reports res = new Elements_Reports(driver);
		Wait.explicit_wait_elementToBeClickable(res.ExpandAll, driver);
		Utility.clickThroughAction(driver, res.ExpandAll);
		Wait.WaitForElement(driver, OR_Reports.AdvancedDeposits);
		boolean condition1 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Pending));
		boolean condition2 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Users));
		boolean condition3 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.ShiftTime));
		boolean condition4 = driver.findElement(By.xpath("//*[text()='Tax Exempt Ledger Items']/../../.."))
				.getAttribute("aria-expanded").equalsIgnoreCase("true");
		boolean condition5 = driver.findElement(By.xpath("//*[text()='Market Segment']/../../.."))
				.getAttribute("aria-expanded").equalsIgnoreCase("true");
		boolean condition6 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.OnHold));
		boolean condition7 = driver.findElement(By.xpath("//*[text()='Referrals']/../../.."))
				.getAttribute("aria-expanded").equalsIgnoreCase("true");
		if (condition1 && condition2 && condition3 && condition4 && condition5 && condition6 && condition7) {
			flag = true;
			reportLogger.info("Success - Validaion of ExpandAll functionlity");
			test_steps.add("Sucess - Validaion of ExpandAll functionlity");
		} else {
			flag = false;
			reportLogger.info("Failed - Validaion of ExpandAll functionlity");
			test_steps.add("AssertionError - Failed - Validaion of ExpandAll functionlity");
			//Assert.assertTrue(false, "Fail - Validaion of ExpandAll functionlity");
		}
		return flag;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateCollapseAllfunctionalityofAdvancedOptions> Description: <This method
	 * validates Expand All functionality of advanced options> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/03/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public boolean validateCollapseAllfunctionalityofAdvancedOptions(WebDriver driver, ArrayList<String> test_steps) {
		boolean flag = false;
		Elements_Reports res = new Elements_Reports(driver);
		Wait.explicit_wait_elementToBeClickable(res.CollapseAll, driver);
		Utility.clickThroughAction(driver, res.CollapseAll);
		Wait.WaitForElement(driver, OR_Reports.AdvancedDeposits);
		boolean condition1 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Pending));
		boolean condition2 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Users));
		boolean condition3 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Properties));
		boolean condition4 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.ShiftTime));
		boolean condition5 = driver.findElement(By.xpath("//*[text()='Tax Exempt Ledger Items']/../../.."))
				.getAttribute("aria-expanded").equalsIgnoreCase("true");
		boolean condition6 = driver.findElement(By.xpath("//*[text()='Market Segment']/../../.."))
				.getAttribute("aria-expanded").equalsIgnoreCase("true");
		boolean condition7 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.OnHold));
		boolean condition8 = driver.findElement(By.xpath("//*[text()='Referrals']/../../.."))
				.getAttribute("aria-expanded").equalsIgnoreCase("true");
		if (!condition1 && !condition2 && !condition3 && !condition4 && !condition5 && !condition6 && !condition7
				&& !condition8) {
			flag = true;
			reportLogger.info("Success - Validaion of Collapse All functionlity");
			test_steps.add("Sucess - Validaion of Collapse All functionlity");
		} else {
			reportLogger.info("Failed - Validaion of Collapse All functionlity");
			test_steps.add("AssertionError - Failed - Validaion of Collapse All functionlity");
			//Assert.assertTrue(false, "Fail - Validaion of Collapse All functionlity");
		}
		return flag;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateAccountTypeToolTip> Description: <This
	 * method validates Account Type tool tip> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateAccountTypeToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.AccountType);
		// WebElement e = driver.findElement(By.xpath("//*[text()='Advanced
		// Options']/../following-sibling::span"));
		Utility.hoverOnElement(driver, res.AccountTypeToolTipIcon);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Account Type')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Account Type')]"))
				.getText();
		String act2 = driver
				.findElement(By.xpath(
						"//div[@class='ant-popover-inner-content']/p[contains(text(),'one or more account types')]"))
				.getText();
		String exp1 = "Account Type";
		String exp2 = "Pull the ledger account data for one or more account types.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Account Type tooltip validation");
			test_steps.add("Sucess - Account Type tooltip validation");
		} else
			Assert.assertTrue(false, "Fail - Account Type tooltip validation");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateAccountTypeExpandAndCollapseFunctionality> Description: <This method
	 * validates Market Segment's Expand and Collapse functionality> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public boolean validateAccountTypeExpandAndCollapseFunctionality(WebDriver driver, ArrayList<String> test_steps) {
		boolean flag = false;
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.AccountType);
		boolean condition1 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Account Type']/../..//div[text()='All']"));
		Utility.clickThroughAction(driver, res.AccountType);
		boolean condition2 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Account Type']/../..//div[text()='All']"));
		if (condition1 && !condition2) {
			flag = true;
			reportLogger.info("Success - Account Type Expand and Collapse functionality");
			test_steps.add("Sucess - Account Type Expand and Collapse functionality");
		} else {
			flag = false;
			reportLogger.info("Failed - Account Type Expand and Collapse functionality");
			test_steps.add("AssertionError - Failed - Account Type Expand and Collapse functionality");
			//Assert.assertTrue(false, "Fail - Account Type Expand and Collapse functionality");
		}
		return flag;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateAccountTypeClearAllfuntionality>
	 * Description: <This method validates Account Type Clear All functionality>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public boolean validateAccountTypeClearAllfuntionality(WebDriver driver, ArrayList<String> test_steps) {
		boolean flag = true;
		Elements_Reports res = new Elements_Reports(driver);
		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.AdvancedDeposits), driver);
		Wait.waitForElementToBeClickable(By.xpath(OR_Reports.AccountTypeClearAll), driver, 10);
		Utility.clickThroughJavaScript(driver, res.AccountTypeClearAll);
		List<WebElement> options = driver.findElements(By.xpath(OR_Reports.AccountTypesOptions));
		for (int i = 0; i < options.size(); i++) {
			if (options.get(i).getAttribute("class").contains("checked")) {
				flag = false;
			}
		}
		if (flag) {
			reportLogger.info("Success - Account Type Clear All functionality validation");
			test_steps.add("Sucess - Account Type Clear All functionality validation");
		}else {
			reportLogger.info("Failed - Account Type Clear All functionality validation");
			test_steps.add("AssertionError - Failed - Account Type Clear All functionality validation");
		}
		return flag;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateAccountTypeSelectAllFunctionality>
	 * Description: <This method validates Account Type Select All functionality>
	 * Pre-requisites: Ledger Balances report should be opened,Account Type should
	 * be expanded and all options should be unchecked. Input parameters: <WebDriver
	 * driver, ArrayList<String> test_steps> Return value: <void> Created By:
	 * <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public boolean validateAccountTypeSelectAllFunctionality(WebDriver driver, ArrayList<String> test_steps) {
		boolean flag = true;
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.AccountTypeSelectAll);
		List<WebElement> options = driver.findElements(By.xpath(OR_Reports.AccountTypesOptions));
		for (int i = 0; i < options.size(); i++) {
			if (!options.get(i).getAttribute("class").contains("checked")) {
				flag = false;
			}
		}
		try {
			Wait.WaitForElement(driver, OR_Reports.AccountTypeClearAll);
			flag = true;
		}catch(Exception e) {
			flag = false;
		}
		
		if (flag) {
			reportLogger.info("Success - Account Type Select All functionality validation");
			test_steps.add("Sucess - Account Type Select All functionality validation");
		}else {
			reportLogger.info("Failed - Account Type Select All functionality validation");
			test_steps.add("AssertionError - Failed - Account Type Select All functionality validation");
		}
		return flag;
	}
	
	public boolean validateAccountTypeDefaultSelection(WebDriver driver, ArrayList<String> test_steps) {
		boolean flag = true;
		Elements_Reports res = new Elements_Reports(driver);
		String optionsAccount = "//span[text()='Account Type']/../../../following-sibling::div//div//div//div/div/div/div/div//span[@class='ant-tree-title']/../preceding-sibling::span[1]";
		List<WebElement> options = driver.findElements(By.xpath(optionsAccount));
		//List<WebElement> options = driver.findElements(By.xpath(OR_Reports.AccountTypesOptions));
		for (int i = 0; i < options.size(); i++) {
			if (!options.get(i).getAttribute("class").contains("checked")) {
				flag = false;
			}
		}
		if (flag) {
			reportLogger.info("Success - Account Type Default Selection validation");
			test_steps.add("Sucess - Account Type Default Selection validation");
		}else {
			reportLogger.info("Failed - Account Type Default Selection validation");
			test_steps.add("AssertionError - Failed - Account Type Default Selection validation");
		}
		return flag;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateAccountTypeOptions> Description: <This
	 * method validates Account Type options> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <08/03/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateAccountTypeOptions(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		String[] actOptions = { "Advanced Deposits", "House Account", "Group", "Corporate/Member Accounts",
				"Reservations", "Unit Owners", "Gift Certificate", "Travel Agent" };
		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.AdvancedDeposits), driver);
		List<WebElement> expoptions = driver.findElements(By.xpath(OR_Reports.AccountTypesOptions));
		for (int i = 0; i < actOptions.length; i++) {
			Assert.assertEquals(actOptions[i], expoptions.get(i).getText(),
					"FAIL - Account Types options validation" + "<br>"
							+ "<a href='https://innroad.atlassian.net/browse/RPT-532'>"
							+ "Click here to open JIRA: RPT-532</a>");
		}
		reportLogger.info("Success - Account Types options validation");
		test_steps.add("Sucess - Account Types options validation" + "<br>"
				+ "<a href='https://innroad.atlassian.net/browse/RPT-532'>" + "Click here to open JIRA: RPT-532</a>");

	}

	// Item
	// status===================================================================================================

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateItemStatusToolTip> Description: <This
	 * method validates Item Status tool tip> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateItemStatusToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.ItemStatus);
		Utility.hoverOnElement(driver, res.ItemStatusToolTipIcon);
		Wait.waitForElementToBeVisibile(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Item Status')]"),
				driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Item Status')]")).getText();
		String act2 = driver
				.findElement(By.xpath(
						"//div[@class='ant-popover-inner-content']/p[contains(text(),'one or more item statuses')]"))
				.getText();
		String exp1 = "Item Status";
		String exp2 = "Pull the ledger account data for one or more item statuses.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Item Status tooltip validation");
			test_steps.add("Sucess - Item Status tooltip validation");
		} else
			Assert.assertTrue(false, "Fail - Item Status tooltip validation");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateItemStatusExpandAndCollapseFunctionality> Description: <This method
	 * validates Item Status's Expand and Collapse functionality> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateItemStatusExpandAndCollapseFunctionality(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.ItemStatus);
		boolean condition1 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Item Status']/../..//div[text()='3/4']"));
		String text = driver.findElement(By.xpath("(//*[text()='Item Status']/../..//div/div)[4]")).getText();
		Utility.clickThroughAction(driver, res.ItemStatus);
		boolean condition2 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Item Status']/../..//div[text()='3/4']"));

		//if (condition1 && !condition2 && text.equalsIgnoreCase("3/4")) {
		if (text.trim().equalsIgnoreCase("3/4")) {
			reportLogger.info("Success - Item Status Expand and Collapse functionality");
			test_steps.add("Sucess - Item Status Expand and Collapse functionality");
		} else {
			reportLogger.info("Failed - Item Status Expand and Collapse functionality, Expected: 3/4 , But found: "+text);
			test_steps.add("AssertionError - Failed - Item Status Expand and Collapse functionality. Expected: 3/4 , But found: "+text);
			//Assert.assertTrue(false, "Fail - Item Status Expand and Collapse functionality");
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateItemStatusClearAllfuntionality>
	 * Description: <This method validates Item Status Clear All functionality>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateItemStatusClearAllfuntionality(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.Pending), driver);
		Utility.clickThroughAction(driver, res.ItemStatusClearAll);
		String optionsItemStatus = "//span[text()='Item Status']/../../../following-sibling::div//div//div//div/div/div/div/div//span[@class='ant-tree-title']/../preceding-sibling::span[1]";
		List<WebElement> options = driver.findElements(By.xpath(optionsItemStatus));
		//List<WebElement> options = driver.findElements(By.xpath(OR_Reports.ItemStatusOptions));
		for (int i = 0; i < options.size(); i++) {
			Assert.assertEquals(options.get(i).getAttribute("class").contains("checked"), false,
					"FAIL - Item Status Clear All functionality validation");
		}
		reportLogger.info("Success - Item Status Clear All functionality validation");
		test_steps.add("Sucess - Item Status clear All functionality validation");

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateItemStatusSelectAllFunctionality>
	 * Description: <This method validates Item Status Select All functionality>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateItemStatusSelectAllFunctionality(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.ItemStatusSelectAll);
		String optionsItemStatus = "//span[text()='Item Status']/../../../following-sibling::div//div//div//div/div/div/div/div//span[@class='ant-tree-title']/../preceding-sibling::span[1]";
		List<WebElement> options = driver.findElements(By.xpath(optionsItemStatus));
		//List<WebElement> options = driver.findElements(By.xpath(OR_Reports.ItemStatusOptions));
		for (int i = 0; i < options.size(); i++) {
			Assert.assertEquals(options.get(i).getAttribute("class").contains("checked"), true,
					"FAIL - Item Status select All functionality validation");
		}
		reportLogger.info("Success - Item Status select All functionality validation");
		test_steps.add("Sucess - Item Status select All functionality validation");

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateItemStatusOptions> Description: <This
	 * method validates Item Status options> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <08/03/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateItemStatusOptions(WebDriver driver, ArrayList<String> test_steps) {
		//String[] actOptions = { "Pending", "Locked", "Void", "Posted" };
		ArrayList<String> expectedOptions = new ArrayList<>();
		expectedOptions.add("Pending"); expectedOptions.add("Locked"); expectedOptions.add("Void"); expectedOptions.add("Posted");
		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.Pending), driver);
		List<WebElement> options = driver.findElements(By.xpath(OR_Reports.ItemStatusOptions));
		ArrayList<String> actOptions = new ArrayList<>();
		for (int i = 0; i < options.size(); i++) {
			actOptions.add(options.get(i).getText());
		}
		Collections.sort(actOptions);
		Collections.sort(expectedOptions);
		
		if (expectedOptions.equals(actOptions)) {
			reportLogger.info("Success - Item status options validated");
			test_steps.add("Success - Item status options validated");
		}else {
			reportLogger.info("Failed - Item status options validated. Expected: "+expectedOptions+" But found: "+actOptions);
			test_steps.add("AssertionError - Failed - Item status options validated: "+expectedOptions+" But found: "+actOptions);
		}
		
//		for (int i = 0; i < actOptions.size; i++) {
//			Assert.assertEquals(actOptions[i], expoptions.get(i).getText(), "FAIL - Item Status options validation");
//		}
//		reportLogger.info("Success - Item Status options validation");
//		test_steps.add("Sucess - Item Status options validation");

	}

	// Include Data Form
	// ===================================================================================================

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateIncludeDataFromToolTip> Description:
	 * <This method validates Include Data From tool tip> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateIncludeDataFromToolTip(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);

//		String strJavaScript = "var element = arguments[0]; var mouseEventObj = document.createEvent('MouseEvents'); mouseEventObj.initEvent( 'mouseover', true, true ); element.dispatchEvent(mouseEventObj);"; 
//		((JavascriptExecutor) driver).executeScript(strJavaScript, res.IncludeDataFromToolTipIcon); 

		//res.IncludeDataFromToolTipIcon.click();
		Utility.hoverOnElement(driver, res.IncludeDataFromToolTipIcon);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Include Data From')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Include Data From')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String act2 = driver
				.findElement(By.xpath("//div[@class='ant-popover-inner-content']/div/b[contains(text(),'Users')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String act3 = driver
				.findElement(
						By.xpath("//div[@class='ant-popover-inner-content']/div/p[contains(text(),'entitlement')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String act4 = driver
				.findElement(By.xpath("//div[@class='ant-popover-inner-content']//b[contains(text(),'Shift')]"))
				.getText();
		String act5 = driver
				.findElement(By.xpath("//div[@class='ant-popover-inner-content']//p[contains(text(),'slot')]"))
				.getText();

		String exp1 = "Include Data From";
		String exp2 = "Users";
		String exp3 = "Generate the report for other/ all users. In order to run this report as another user, you will need to have the entitlement called ‘Run Reports as other users’ enabled.";
		String exp4 = "Shift Time";
		String exp5 = "Choose this option to run this report for a specific time slot for the date range selected.";

		if ((exp1.equals(act1)) && (exp2.equals(act2)) && (exp3.equals(act3)) && act4.equals(exp4)
				&& act5.equals(exp5)) {
			reportLogger.info("Success - Include Data Form tooltip validation");
			test_steps.add("Sucess - - Include Data Form tooltip validation" + "<br>"
					+ "<a href='https://innroad.atlassian.net/browse/RPT-385'>"
					+ "Click here to open JIRA: RPT-385</a>");
		} else
			Assert.assertTrue(false,
					"Fail - - Include Data Form tooltip validation" + "<br>"
							+ "<a href='https://innroad.atlassian.net/browse/RPT-385'>"
							+ "Click here to open JIRA: RPT-385</a>");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateIncludeDataFromExpandAndCollapseFunctionality> Description: <This
	 * method validates Market Segment's Expand and Collapse functionality> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateIncludeDataFromExpandAndCollapseFunctionality(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.IncludeDataFrom);
		boolean condition1 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Include Data From']/../..//div[text()='All Users']"));

		Wait.wait3Second();
		Utility.clickThroughAction(driver, res.IncludeDataFrom);
		boolean condition2 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Include Data From']/../..//div[text()='All Users']"));
		System.out.println("condition1=" + condition1);
		System.out.println("condition2=" + condition2);
		if (!condition1 && condition2) {
			reportLogger.info("Success - Include Data From Expand and Collapse functionality");
			test_steps.add("Sucess - Include Data From Expand and Collapse functionality");
		} else
			Assert.assertTrue(false, "Fail - Include Data From Expand and Collapse functionality");

	}

	// Tax Exempt Ledger Items
	// ===================================================================================================
	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateTaxExemptLedgerItemsToolTip>
	 * Description: <This method validates Tax Exempt Ledger Items tool tip> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateTaxExemptLedgerItemsToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.TaxExemptLedgerItems);
		Utility.hoverOnElement(driver, res.TaxExemptLedgerItemsToolTipIcon);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Tax Exempt Ledger Items')]"), driver);
		String act1 = driver
				.findElement(
						By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Tax Exempt Ledger Items')]"))
				.getText();
		String act2 = driver
				.findElement(By.xpath("//div[@class='ant-popover-inner-content']/p[contains(text(),'tax exempt')]"))
				.getText();
		String exp1 = "Tax Exempt Ledger Items";
		String exp2 = "Pull the report specific to the tax exempt setting on a reservation/ account.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Tax Exempt Ledger Items tooltip validation");
			test_steps.add("Sucess - Tax Exempt Ledger Items tooltip validation");
		} else
			Assert.assertTrue(false, "Fail - Tax Exempt Ledger Items tooltip validation");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateTaxExemptLedgerItemsExpandAndCollapseFunctionality> Description:
	 * <This method validates Tax Exempt Ledger Items Expand and Collapse
	 * functionality> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateTaxExemptLedgerItemsExpandAndCollapseFunctionality(WebDriver driver,
			ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.TaxExemptLedgerItems);
		boolean condition1 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Tax Exempt Ledger Items']/../..//div[text()='Tax Exempt & Taxed']"));
		Utility.clickThroughAction(driver, res.TaxExemptLedgerItems);
		boolean condition2 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Tax Exempt Ledger Items']/../..//div[text()='Tax Exempt & Taxed']"));
		System.out.println("condition1=" + condition1);
		System.out.println("condition2=" + condition2);
		if (condition1 && !condition2) {
			reportLogger.info("Success - Tax Exempt Ledger Items Expand and Collapse functionality");
			test_steps.add("Sucess - Tax Exempt Ledger Items Expand and Collapse functionality");
		} else
			Assert.assertTrue(false, "Fail - Tax Exempt Ledger Items Expand and Collapse functionality");

	}

	// Market Segment
	// ===================================================================================================
	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateIncludeDataFromToolTip> Description:
	 * <This method validates Include Data From tool tip> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateMarketSegmentToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.MarketSegment);
		Utility.hoverOnElement(driver, res.MarketSegmentToolTipIcon);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Market Segment')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Market Segment')]"))
				.getText();
		String act2 = driver
				.findElement(By.xpath(
						"//div[@class='ant-popover-inner-content']/p[contains(text(),'specific to a market segment')]"))
				.getText();
		String exp1 = "Market Segment";
		String exp2 = "Pull the report specific to a market segment.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Market Segment tooltip validation");
			test_steps.add("Sucess - Market Segment tooltip validation");
		} else
			Assert.assertTrue(false, "Fail - Market Segment tooltip validation");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateMarketSegmentExpandAndCollapseFunctionality> Description: <This
	 * method validates Market Segment's Expand and Collapse functionality> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateMarketSegmentExpandAndCollapseFunctionality(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.MarketSegment);
		boolean condition1 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Market Segment']/../..//div[text()='All']"));
		Utility.clickThroughAction(driver, res.MarketSegment);
		boolean condition2 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Market Segment']/../..//div[text()='All']"));
		if (condition1 && !condition2) {
			reportLogger.info("Success - Market Segment Expand and Collapse functionality");
			test_steps.add("Sucess - Market Segment Expand and Collapse functionality");
		} else
			Assert.assertTrue(false, "Fail - Market Segment Expand and Collapse functionality");

	}

	// Reservation Status

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateReservationStatusToolTip> Description:
	 * <This method validates Reservation Status tool tip> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateReservationStatusToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.ReservationStatus);
		Utility.hoverOnElement(driver, res.ReservationStatusToolTipIcon);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Reservation Status')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Reservation Status')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'specific to a reservation status')]"))
				.getText();
		String exp1 = "Reservation Status";
		String exp2 = "Generate the report specific to a reservation status.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Reservation Status tooltip validation");
			test_steps.add("Sucess - Reservation Status tooltip validation");
		} else
			Assert.assertTrue(false, "Fail - Reservation Status tooltip validation");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateReservationStatusExpandAndCollapseFunctionality> Description: <This
	 * method validates Reservation Status Expand and Collapse functionality> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateReservationStatusExpandAndCollapseFunctionality(WebDriver driver,
			ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.ReservationStatus);
		boolean condition1 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Reservation Status']/../..//div[text()='All']"));
		Utility.clickThroughAction(driver, res.ReservationStatus);
		boolean condition2 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Reservation Status']/../..//div[text()='All']"));
		//if (condition1 && !condition2) {
		if (condition1) {
			reportLogger.info("Success - Reservation Status Expand and Collapse functionality");
			test_steps.add("Sucess - Reservation Status Expand and Collapse functionality");
		} else {
			reportLogger.info("Failed - Reservation Status Expand and Collapse functionality");
			test_steps.add("AssertionError - Failed - Reservation Status Expand and Collapse functionality");
			//Assert.assertTrue(false, "Fail - Reservation Status Expand and Collapse functionality");
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateReservationStatusClearAllfuntionality>
	 * Description: <This method validates Reservation Status Clear All
	 * functionality> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateReservationStatusClearAllfuntionality(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.ReservationStatus), driver);
		Utility.clickThroughAction(driver, res.ReservationStatusClearAll);
		String optionsStstus = "//span[text()='Reservation Status']/../../../following-sibling::div//div//div//div/div/div/div/div//span[@class='ant-tree-title']/../preceding-sibling::span[1]";
		List<WebElement> options = driver.findElements(By.xpath(optionsStstus));
		//List<WebElement> options = driver.findElements(By.xpath(OR_Reports.ReservationStatusOptions));
		for (int i = 0; i < options.size(); i++) {
			Assert.assertEquals(options.get(i).getAttribute("class").contains("checked"), false,
					"FAIL - Reservation Status Clear All functionality validation");
		}
		reportLogger.info("Success - Reservation Status Clear All functionality validation");
		test_steps.add("Sucess - Reservation Status Clear All functionality validation");

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateReservationStatusSelectAllFunctionality> Description: <This method
	 * validates Reservation Status Select All functionality> Pre-requisites: Ledger
	 * Balances report should be opened,Account Type should be expanded and all
	 * options should be unchecked. Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateReservationStatusSelectAllFunctionality(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.ReservationStatusSelectAll);
		String optionsStstus = "//span[text()='Reservation Status']/../../../following-sibling::div//div//div//div/div/div/div/div//span[@class='ant-tree-title']/../preceding-sibling::span[1]";
		List<WebElement> options = driver.findElements(By.xpath(optionsStstus));
		//List<WebElement> options = driver.findElements(By.xpath(OR_Reports.ReservationStatusOptions));
		for (int i = 0; i < options.size(); i++) {
			Assert.assertEquals(options.get(i).getAttribute("class").contains("checked"), true,
					"FAIL - Reservation Status Select All functionality validation");
		}
		reportLogger.info("Success - Reservation Status Select All functionality validation");
		test_steps.add("Sucess - Reservation Status Select All functionality validation");

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateReservationStatusOptions> Description:
	 * <This method validates Reservation Status options> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/03/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateReservationStatusOptions(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		//String[] expOptions = {"Reserved", "Confirmed", "Cancelled", "Guaranteed", "InHouse", "Departed", "OnHold", "Deleted", "Quote", "NoShow" };
		ArrayList<String> expOptions = new ArrayList<>();
		ArrayList<String> actOptions = new ArrayList<>();
		expOptions.add("Reserved"); expOptions.add("Confirmed"); expOptions.add("Cancelled"); expOptions.add("Guaranteed"); expOptions.add("In-House");
		expOptions.add("Departed"); expOptions.add("On Hold"); expOptions.add("Deleted"); expOptions.add("Quote"); expOptions.add("No Show");
		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.ReservationStatus), driver);
		List<WebElement> options = driver.findElements(By.xpath(OR_Reports.ReservationStatusOptions));
		
		for (int i = 0; i < options.size(); i++) {
			actOptions.add(options.get(i).getText());
		}
		
		if (expOptions.equals(actOptions)) {
			reportLogger.info("Success - Reservations status options");
			test_steps.add("Success - Reservations status options");
		}else {
			reportLogger.info("Failed - Reservations status options. Expected: "+expOptions+" But found: "+actOptions);
			test_steps.add("AssertionError - Failed - Reservations status options: "+expOptions+" But found: "+actOptions);
		}
		
//		for (int i = 0; i < actOptions.length; i++) {
//			Assert.assertEquals(actOptions[i], expoptions.get(i).getText(),
//					"FAIL - Reservation Status options validation");
//		}
//		reportLogger.info("Success - Reservation Status options validation");
//		test_steps.add("Sucess - Reservation Status options validation");

	}

	// Referrals
	// ===================================================================================================
	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateReferralsToolTip> Description: <This
	 * method validates Referrals From tool tip> Input parameters: <WebDriver
	 * driver, ArrayList<String> test_steps> Return value: <void> Created By:
	 * <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateReferralsToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.Referrals);
		Utility.hoverOnElement(driver, res.ReferralsToolTipIcon);
		Wait.waitForElementToBeVisibile(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Referrals')]"),
				driver);
		String act1 = driver.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Referrals')]"))
				.getText();
		String act2 = driver
				.findElement(By.xpath("//div[@class='ant-popover-inner-content']/p[contains(text(),'referral type')]"))
				.getText();
		String exp1 = "Referrals";
		String exp2 = "Generate the report specific to a referral type.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Referrals tooltip validation");
			test_steps.add("Sucess - Referrals tooltip validation");
		} else
			Assert.assertTrue(false, "Fail - Referrals tooltip validation");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateReferralsExpandAndCollapseFunctionality> Description: <This method
	 * validates Referrals Expand and Collapse functionality> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/04/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateReferralsExpandAndCollapseFunctionality(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.Referrals);
		boolean condition1 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Referrals']/../..//div[text()='All']"));
		Utility.clickThroughAction(driver, res.Referrals);
		boolean condition2 = Utility.isElementPresent(driver,
				By.xpath("//*[text()='Referrals']/../..//div[text()='All']"));
		if (condition1 && !condition2) {
			reportLogger.info("Success - Referrals Expand and Collapse functionality");
			test_steps.add("Sucess - Referrals Expand and Collapse functionality");
		} else
			Assert.assertTrue(false, "Fail - Referrals Expand and Collapse functionality");

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <ValidateSelectionOfGivenSortReportByOption>
	 * Description: <This method selects given sort report by option> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps, String
	 * sortreportbyoption> Return value: <void> Created By: <Naveen Kadthala>
	 * Created On: <08/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void ValidateSelectionOfGivenSortReportByOption(WebDriver driver, ArrayList<String> test_steps, String s)
			throws InterruptedException {
		int flag = 0;
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.SortReportByOptionsExpand);
		Wait.waitForElementToBeVisibile(By.xpath("//div[@id='sortBy_list']/following-sibling::div/div/div/div/div"),
				driver);
		List<WebElement> options = driver
				.findElements(By.xpath("//div[@id='sortBy_list']/following-sibling::div/div/div/div/div/div"));
		for (int i = 0; i < options.size(); i++) {
			if (s.equalsIgnoreCase(options.get(i).getText())) {
				Utility.clickThroughAction(driver, options.get(i));
				reportLogger.info("Success - Selection of given Sort By Option");
				test_steps.add("Sucess - Selection of given Sort By Option");
				flag = 1;
				break;

			}

		}
		if (flag == 0)
			Assert.assertTrue(false, "Fail - Selection of given Sort By Option");

	}

	public void selectGivenSortReportByOption(WebDriver driver, String s, ArrayList<String> test_steps)
			throws InterruptedException {

		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.SortReportByOptionsExpand);
		Wait.waitForElementToBeVisibile(By.xpath("//div[@id='sortBy_list']/following-sibling::div/div/div/div/div"),
				driver);
		List<WebElement> options = driver
				.findElements(By.xpath("//div[@id='sortBy_list']/following-sibling::div/div/div/div/div"));
		for (int i = 0; i < options.size(); i++) {
			if (s.equalsIgnoreCase(options.get(i).getText())) {
				Utility.clickThroughAction(driver, options.get(i));
				reportLogger.info("Success - Selection of given Sort By Option");
				// test_steps.add("Sucess - Selection of given Sort By Option");
				break;

			}
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <ValidateSelectionOfGivenGroupRowsByOption>
	 * Description: <This method selects given group rows by option> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps, String
	 * grouprowsbyoption> Return value: <void> Created By: <Naveen Kadthala> Created
	 * On: <08/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void ValidateSelectionOfGivenGroupRowsByOption(WebDriver driver, ArrayList<String> test_steps, String s)
			throws InterruptedException {
		int flag = 0;
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.GroupRowsByOptionsExpand);
		Wait.waitForElementToBeVisibile(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div"),
				driver);
		List<WebElement> options = driver
				.findElements(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div/div"));
		for (int i = 0; i < options.size(); i++) {
			if (s.equalsIgnoreCase(options.get(i).getText())) {
				Utility.clickThroughAction(driver, options.get(i));
				reportLogger.info("Success - Selection of given Group Rows By Option");
				test_steps.add("Sucess - Selection of given Group Rows Option");
				flag = 1;
				break;
			}

		}
		if (flag == 0)
			Assert.assertTrue(false, "Fail - Selection of given Group Rows By Option");

	}

	// New Sprint 13
	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <clickExcelInLedgerBalancesReport> Description:
	 * <This method clicks on Excel in Ledger Balances Report> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void clickExcelInLedgerBalancesReport(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.ExcelExport);
		reportLogger.info("Clicked on Excel");
		test_steps.add("Clicked on Excel");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <clickPDFlInLedgerBalancesReport> Description:
	 * <This method clicks on PDF in Ledger Balances Report> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void clickPDFlInLedgerBalancesReport(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.PDFExport);
		reportLogger.info("Clicked on PDF");
		test_steps.add("Clicked on PDF");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <clickPrintInLedgerBalancesReport> Description:
	 * <This method clicks on Print in Ledger Balances Report> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void clickPrintInLedgerBalancesReport(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.Print);
		reportLogger.info("Clicked on Print");
		test_steps.add("Clicked on Print");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <clickRunReportInLedgerBalancesReport>
	 * Description: <This method clicks on RunReport in Ledger Balances Report>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <08/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void clickRunReportInLedgerBalancesReport(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.RunReport);
		reportLogger.info("Clicked on RunReport");
		test_steps.add("Clicked on RunReport");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateRunReporExistenceinMainHeader>
	 * Description: <This method checks if RunReport exists on Main Header in Ledger
	 * Balances Report> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <08/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateRunReporExistenceinMainHeader(WebDriver driver, ArrayList<String> test_steps) {
		if (Utility.isElementDisplayed(driver, By.xpath(OR_Reports.RunReport))) {
			reportLogger.info("Success - Run Report existence validation in Main header");
			test_steps.add("Success - Run Report existence validation in Main header");
		} else
			Assert.assertTrue(false, "Fail - Run Report existence validation in Main header");

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateRunReporExistenceAtPageBottom>
	 * Description: <This method checks if RunReport exists on Main Header in Ledger
	 * Balances Report> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <08/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateRunReporExistenceAtPageBottom(WebDriver driver, ArrayList<String> test_steps) {
		if (Utility.isElementDisplayed(driver, By.xpath(OR_Reports.RunReportAtBottom))) {
			reportLogger.info("Success - Run Report existence validation at Page Bottom");
			test_steps.add("Success - Run Report existence validation at Page Bottom" + "<br>"
					+ "<a href='https://innroad.atlassian.net/browse/RPT-279'>"
					+ "Click here to open JIRA: RPT-279</a>");
		} else
			Assert.assertTrue(false,
					"Fail - Run Report existence validation at Page Bottom" + "<br>"
							+ "<a href='https://innroad.atlassian.net/browse/RPT-279'>"
							+ "Click here to open JIRA: RPT-279</a>");

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateLedgerBalancesReportExistenceDescriptionAtBottomHeader> Description:
	 * <This method checks Report Name and Description exists in Secodary Header in
	 * Ledger Balances Report> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <08/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateNameAndDescriptioninSecondaryHeader(WebDriver driver, ArrayList<String> test_steps) {
		if ((Utility.isElementDisplayed(driver, By.xpath(OR_Reports.LedgerBalancesReportHeader)))
				&& (Utility.isElementDisplayed(driver, By.xpath(OR_Reports.LedgerBalancesSubTitle)))) {
			reportLogger.info("Success - Report Filter Header along with Description validation");
			test_steps.add("Success - Report Filter Header along with Description validation");
		} else
			Assert.assertTrue(false, "Fail - Report Filter Header along with Description validation");

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <checkRequiredAdvancedOption> Description:
	 * <This method selects required Account Type Option. This method works for
	 * Account Type, Item Status and Reservation status> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps, String OptiontToBeChecked>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <08/10/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void checkRequiredAdvancedOption(WebDriver driver, ArrayList<String> test_steps,
			String... OptiontsToBeChecked) {
		for (int i = 0; i < OptiontsToBeChecked.length; i++) {
			String s = "//*[text()='" + OptiontsToBeChecked[i] + "']/..";
			String s2 = "(//*[text()='Gift Certificate']/..)[2]";
			WebElement e;
			if (OptiontsToBeChecked[i].equalsIgnoreCase("Gift Certificate")) {
				e = driver.findElement(By.xpath(s2));
			} else {
				e = driver.findElement(By.xpath(s));
			}

			Wait.explicit_wait_visibilityof_webelement(e, driver);
			if (e.getAttribute("class").contains("checked")) {
				reportLogger.info("Required option already checked");
			} else {

				Utility.clickThroughJavaScript(driver, e);
				reportLogger.info("checked the required option " + OptiontsToBeChecked[i]);
			}
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <unCheckRequiredAdvancedOption> Description:
	 * <This method unchecks required Account Type Option. This method works for
	 * Account Type, Item Status and Reservation status> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps, String OptiontToBeChecked>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <08/10/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void unCheckRequiredAdvancedOption(WebDriver driver, ArrayList<String> test_steps,
			String OptiontToBeUnChecked) {
		String s = "//*[text()='" + OptiontToBeUnChecked + "']/../preceding-sibling::span/span"; //"//*[text()='" + OptiontToBeUnChecked + "']/..";
		WebElement e = driver.findElement(By.xpath(s));
		if (e.getAttribute("class").contains("checked")) {
			Utility.clickThroughJavaScript(driver, e);
			reportLogger.info("unchecked the required option " + OptiontToBeUnChecked);
		} else
			reportLogger.info("Required option already unchecked");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getCountOfCheckedAdvancedSubOptions>
	 * Description: <This method gets count of checked advanced options. This method
	 * works for Account Type, Item Status and Reservation status> Input parameters:
	 * <WebDriver driver, String AdvacnedOption> Return value: <int> Created By:
	 * <Naveen Kadthala> Created On: <08/10/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public int getCountOfCheckedAdvancedSubOptions(WebDriver driver, String AdvacnedOption) {
		// get number of check-boxes
		String s1 = "//*[text()='" + AdvacnedOption + "']/../preceding-sibling::span/span"; //"//*[text()='" + AdvacnedOption + "']/../../../following-sibling::div/div/div/label";
		List<WebElement> options = driver.findElements(By.xpath(s1));
		int countOfCheckedBoxes = 0;
		for (int i = 0; i < options.size(); i++) {
			if (options.get(i).getAttribute("class").contains("checked"))
				countOfCheckedBoxes = countOfCheckedBoxes + 1;
		}
		return countOfCheckedBoxes;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getTextOfCheckedAdvancedSubOptionsDisplayed>
	 * Description: <This method gets text of checked advanced options Displayed.
	 * This method works for Account Type, Item Status and Reservation status> Input
	 * parameters: <WebDriver driver, String AdvacnedOption> Return value: <String>
	 * Created By: <Naveen Kadthala> Created On: <08/10/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public String getTextOfCheckedAdvancedSubOptionsDisplayed(WebDriver driver, String AdvacnedOption) {
		String s2 = "//*[text()='" + AdvacnedOption
				+ "']/../following-sibling::div//div[contains(@class,'textOverflow')]";
		Wait.waitForElementToBeVisibile(By.xpath(s2), driver);
		String text = driver.findElement(By.xpath(s2)).getText();
		return text;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateCountOfSelectedTotalAdvancedOption>
	 * Description: <This method validates count of selected / Total of advanced
	 * options. This method works for Account Type, Item Status and Reservation
	 * status> Input parameters: <WebDriver driver, ArrayList<String> test_steps,
	 * String AdvacnedOption> Return value: <void> Created By: <Naveen Kadthala>
	 * Created On: <08/10/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateCountOfSelectedTotalAdvancedOption(WebDriver driver, ArrayList<String> test_steps,
			String AdvacnedOption, int countOfCheckedBoxes, String CountTextDisplayed) {

		if (AdvacnedOption.equalsIgnoreCase("Account Type")) {
			boolean condition1 = (countOfCheckedBoxes == 8 && CountTextDisplayed.equals("All"));
			boolean condition2 = (countOfCheckedBoxes == 7 && CountTextDisplayed.equals("7/8"));
			boolean condition3 = (countOfCheckedBoxes == 6 && CountTextDisplayed.equals("6/8"));
			boolean condition4 = (countOfCheckedBoxes == 5 && CountTextDisplayed.equals("5/8"));
			boolean condition5 = (countOfCheckedBoxes == 4 && CountTextDisplayed.equals("4/8"));
			boolean condition6 = (countOfCheckedBoxes == 3 && CountTextDisplayed.equals("3/8"));
			boolean condition7 = (countOfCheckedBoxes == 2 && CountTextDisplayed.equals("2/8"));
			boolean condition8 = (countOfCheckedBoxes == 1 && CountTextDisplayed.equals("1/8"));
			boolean condition9 = (countOfCheckedBoxes == 0 && CountTextDisplayed.equals("None"));
			if (condition1 || condition2 || condition3 || condition4 || condition5 || condition6 || condition7
					|| condition8 || condition9) {
				reportLogger.info("Success - Count of selected and displayed check boxes validation");
			}
		}

		else if (AdvacnedOption.equalsIgnoreCase("Item Status")) {
			boolean condition1 = (countOfCheckedBoxes == 4 && CountTextDisplayed.equals("All"));
			boolean condition2 = (countOfCheckedBoxes == 3 && CountTextDisplayed.equals("3/4"));
			boolean condition3 = (countOfCheckedBoxes == 2 && CountTextDisplayed.equals("2/4"));
			boolean condition4 = (countOfCheckedBoxes == 1 && CountTextDisplayed.equals("1/4"));
			boolean condition5 = (countOfCheckedBoxes == 0 && CountTextDisplayed.equals("None"));
			if (condition1 || condition2 || condition3 || condition4 || condition5) {
				reportLogger.info("Success - Count of selected and displayed check boxes validation");
			}
		}

		else if (AdvacnedOption.equalsIgnoreCase("Reservation Status")) {
			boolean condition1 = (countOfCheckedBoxes == 10 && CountTextDisplayed.equals("All"));
			boolean condition2 = (countOfCheckedBoxes == 7 && CountTextDisplayed.equals("9/10"));
			boolean condition3 = (countOfCheckedBoxes == 7 && CountTextDisplayed.equals("8/10"));
			boolean condition4 = (countOfCheckedBoxes == 7 && CountTextDisplayed.equals("7/10"));
			boolean condition5 = (countOfCheckedBoxes == 6 && CountTextDisplayed.equals("6/10"));
			boolean condition6 = (countOfCheckedBoxes == 5 && CountTextDisplayed.equals("5/10"));
			boolean condition7 = (countOfCheckedBoxes == 4 && CountTextDisplayed.equals("4/10"));
			boolean condition8 = (countOfCheckedBoxes == 3 && CountTextDisplayed.equals("3/10"));
			boolean condition9 = (countOfCheckedBoxes == 2 && CountTextDisplayed.equals("2/10"));
			boolean condition10 = (countOfCheckedBoxes == 1 && CountTextDisplayed.equals("1/10"));
			boolean condition11 = (countOfCheckedBoxes == 0 && CountTextDisplayed.equals("None"));
			if (condition1 || condition2 || condition3 || condition4 || condition5 || condition6 || condition7
					|| condition8 || condition9 || condition10 || condition11) {
				reportLogger.info("Success - Count of selected and displayed check boxes validation");
			}
		}

		else {
			Assert.assertTrue(false, "Fail - Count of selected and displayed check boxes validation");
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getTaxExemptLedgerItemsOptions> Description:
	 * <This method gets text of Tax Exempt Ledger Item Options> Input parameters:
	 * <WebDriver driver> Return value: <ArrayList<String>> Created By: <Naveen
	 * Kadthala> Created On: <08/10/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public ArrayList<String> getTaxExemptLedgerItemsOptions(WebDriver driver) {
		ArrayList<String> options = new ArrayList<String>();
		List<WebElement> listedoptions = driver
				.findElements(By.xpath("//div[@id='taxExempt_list']/following-sibling::div/div/div/div/div"));
		for (int i = 0; i < listedoptions.size(); i++) {
			options.add(listedoptions.get(i).getText());
		}
		return options;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateTaxExemptLedgerItemsOptions>
	 * Description: <This method validates Tax Exempt Ledger Items options> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <08/10/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	
	

	public void validateTaxExemptLedgerItemsOptions(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		String[] actOptions = { "Tax Exempt & Taxed", "Tax Exempt", "Taxed" };
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.TaxExemptListExpand);
		Wait.waitForElementToBeVisibile(By.xpath("//div[@id='taxExempt_list']/following-sibling::div/div/div/div/div"),
				driver);
		List<WebElement> expoptions = driver
				.findElements(By.xpath("//div[@id='taxExempt_list']/following-sibling::div/div/div/div/div"));
		for (int i = 0; i < actOptions.length; i++) {
			Assert.assertEquals(actOptions[i], expoptions.get(i).getText(),
					"FAIL - Tax Exempt Ledger Items options validation");
		}
		Utility.ScrollToElement(res.TaxExemptListExpand, driver);
		Utility.clickThroughAction(driver, res.TaxExemptListExpand);
		//Utility.clickThroughJavaScript(driver, res.TaxExemptListExpand);
		reportLogger.info("Success - Tax Exempt Ledger Items options validation");
		test_steps.add("Sucess - Tax Exempt Ledger Items options validation");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getMarketSegmentOptions> Description: <This
	 * method gets text of Market Segment Options> Input parameters: <WebDriver
	 * driver> Return value: <ArrayList<String>> Created By: <Naveen Kadthala>
	 * Created On: <08/10/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public ArrayList<String> getMarketSegmentOptions(WebDriver driver) {
		ArrayList<String> options = new ArrayList<String>();
		List<WebElement> listedoptions = driver.findElements(By.xpath(
				"//div[@id='marketSegment_list']/following-sibling::div/descendant::div[@class='ant-select-item-option-content']"));
		for (WebElement option : listedoptions) {
			options.add(option.getText());
		}
		return options;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateMarketSegmentOptions> Description:
	 * <This method validates options of Market Segment Options> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/10/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateMarketSegmentOptions(WebDriver driver, ArrayList<String> test_steps) throws Throwable {
		Elements_Reports res = new Elements_Reports(driver);
		Navigation nav = new Navigation();
		ReportsV2 report = new ReportsV2();
//		 setup(driver);
//		 nav.ListManagemnet(driver);
		driver.findElement(By.xpath("//a[text()='Market Segment']")).click();
		ListManagement ls = new ListManagement();
		ArrayList<String> lsMarketSegments = ls.getActiveMarketSegmentsNames(driver);
		report.navigateToReports(driver, test_steps);
		report.navigateToLedgerBalancesReport(driver);
		Wait.wait2Second();
		res.MarketSegment.click();
		Utility.clickThroughAction(driver, res.MarketSegmentListExpand);
		Wait.wait5Second();
		ArrayList<String> options = report.getMarketSegmentOptions(driver);

		try {
			if (options.get(0).equals("All")) {
				options.remove(0);
				Collections.sort(lsMarketSegments);
				Collections.sort(options);
				if (lsMarketSegments.equals(options)) {
					reportLogger.info("Success - Market Segments options validation");
					test_steps.add("Sucess - Market Segments options validation");
				} else {
					Assert.assertTrue(false, "Fail - Market Segments options validation. Expected: " + lsMarketSegments
							+ " but found: " + options);
				}
			} else {
				Assert.assertTrue(false, "Fail - Market Segments options validation");
			}
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getReferralsOptions> Description: <This method
	 * gets text of Referrals Options> Input parameters: <WebDriver driver> Return
	 * value: <ArrayList<String>> Created By: <Naveen Kadthala> Created On:
	 * <08/14/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public ArrayList<String> getReferralsOptions(WebDriver driver) {
		ArrayList<String> options = new ArrayList<String>();
		List<WebElement> listedoptions = driver.findElements(By.xpath(
				"//div[@id='referrals_list']/following-sibling::div/descendant::div[@class='ant-select-item-option-content']"));
		for (WebElement option : listedoptions) {
			options.add(option.getText());
		}
		return options;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateReferralsOptions> Description: <This
	 * method validates options of Market Segment Options> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <08/14/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateReferralsOptions(WebDriver driver, ArrayList<String> test_steps) throws Throwable {

		// ********************************************
		Elements_Reports res = new Elements_Reports(driver);
		Navigation nav = new Navigation();
		ReportsV2 report = new ReportsV2();
		// setup(driver);
		// nav.ListManagemnet(driver);
		// driver.findElement(By.xpath("//a[text()='Market Segment']")).click();
		ListManagement ls = new ListManagement();
		ArrayList<String> lsReferrals = ls.getActiveReferralsNames(driver);
		report.navigateToReports(driver, test_steps);
		report.navigateToLedgerBalancesReport(driver);
		res.Referrals.click();
		Utility.clickThroughAction(driver, res.ReferralstListExpand);
		Wait.wait5Second();
		ArrayList<String> options = report.getReferralsOptions(driver);

		try {
			if (options.get(0).equals("All")) {
				options.remove(0);
				Collections.sort(lsReferrals);
				Collections.sort(options);
				if (lsReferrals.equals(options)) {
					reportLogger.info("Success - Referrals options validation");
					test_steps.add("Sucess - Referrals options validation");
				} else {
					Assert.assertTrue(false,
							"Fail - Referrals options validation. Expected: " + lsReferrals + " but found: " + options);
				}
			} else {
				Assert.assertTrue(false, "Fail - Referrals options validation");
			}
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

		// ***********************************************
		// Elements_Reports res = new Elements_Reports(driver);
		// Navigation nav = new Navigation();
		// ReportsV2 report = new ReportsV2();
		// nav.setup(driver);
		// nav.ListManagemnet(driver);
		// ListManagement ls = new ListManagement();
		// ArrayList<String> lsReferrals = ls.getActiveReferralsNames(driver);
		// report.navigateToReports(driver, test_steps);
		// report.navigateToLedgerBalancesReport(driver);
		// res.Referrals.click();
		// Utility.clickThroughAction(driver, res.ReferralstListExpand);
		// Wait.wait5Second();
		// ArrayList<String> options = report.getReferralsOptions(driver);
		// int flag=0;
		// for(int i=0; i<lsReferrals.size();i++) {
		// Assert.assertEquals(lsReferrals.get(i), options.get(i+1), "Fail - Referrals
		// options validation");
		// }
		// flag=1;
		// if(options.get(0).equals("All") && flag==1) {
		// reportLogger.info("Success - Referrals options validation");
		// test_steps.add("Sucess - Referrals options validation");}
		// else
		// {
		// reportLogger.info("Fail - Referrals options validation");
		// test_steps.add("Fail - Referrals options validation");
		// }
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateTaxExemptLedgerItemsCollapseText>
	 * Description: <This method validates Tax Exempt Ledger Items Collapse Text>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <08/17/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateTaxExemptLedgerItemsCollapseText(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		List<WebElement> l = driver
				.findElements(By.xpath("//div[@id='taxExempt_list']/following-sibling::div/div/div/div/div"));
		for (WebElement e : l) {
			Utility.clickThroughJavaScript(driver, e);
			String selectedoption = e.getAttribute("textContent");
			Utility.clickThroughJavaScript(driver, res.TaxExemptLedgerItems);
			String displayText = driver.findElement(By.xpath(
					"//*[text()='Tax Exempt Ledger Items']/../following-sibling::div//div[contains(@class,'textOverflow')]"))
					.getText();
			Utility.clickThroughJavaScript(driver, res.TaxExemptLedgerItems);
			Assert.assertEquals(selectedoption, displayText,
					"Fail - Tax Exempt Ledger Items Collapse Text validation" + "<br>"
							+ "<a href='https://innroad.atlassian.net/browse/RPT-536'>"
							+ "Click here to open JIRA: RPT-536</a>");
		}
		reportLogger.info("Success - Tax Exempt Ledger Items Collapse Text validation");
		test_steps.add("Sucess - Tax Exempt Ledger Items Collapse Text validation" + "<br>"
				+ "<a href='https://innroad.atlassian.net/browse/RPT-536'>" + "Click here to open JIRA: RPT-536</a>");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateMarketSegmentCollapseText>
	 * Description: <This method validates Market Segment Collapse Text> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <08/17/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateMarketSegmentCollapseText(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		List<WebElement> l = driver
				.findElements(By.xpath("//div[@id='marketSegment_list']/following-sibling::div/div/div/div/div"));
		for (WebElement e : l) {
			Utility.clickThroughJavaScript(driver, e);
			String selectedoption = e.getAttribute("textContent");
			Utility.clickThroughJavaScript(driver, res.MarketSegment);
			String displayText = driver.findElement(By.xpath(
					"//*[text()='Market Segment']/../following-sibling::div//div[contains(@class,'textOverflow')]"))
					.getText();
			Utility.clickThroughJavaScript(driver, res.MarketSegment);
			Assert.assertEquals(selectedoption, displayText, "Fail - Market Segment Collapse Text validation");
		}
		reportLogger.info("Success - Market Segment Collapse Text validation");
		test_steps.add("Sucess - Market Segment Collapse Text validation");

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateReferralsCollapseText> Description:
	 * <This method validates Referrals Collapse Text> Input parameters: <WebDriver
	 * driver, ArrayList<String> test_steps> Return value: <void> Created By:
	 * <Naveen Kadthala> Created On: <08/17/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateReferralsCollapseText(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		List<WebElement> l = driver
				.findElements(By.xpath("//div[@id='referrals_list']/following-sibling::div/div/div/div/div"));
		for (WebElement e : l) {
			Utility.clickThroughJavaScript(driver, e);
			String selectedoption = e.getAttribute("textContent");
			Utility.clickThroughJavaScript(driver, res.Referrals);
			String displayText = driver
					.findElement(By.xpath(
							"//*[text()='Referrals']/../following-sibling::div//div[contains(@class,'textOverflow')]"))
					.getText();
			Utility.clickThroughJavaScript(driver, res.Referrals);
			Assert.assertEquals(selectedoption, displayText, "Fail - Referrals Collapse Text validation");
		}
		reportLogger.info("Success - Referrals Collapse Text validation");
		test_steps.add("Sucess - Referrals Collapse Text validation");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <verifyHelpbuttonAvailabilityInAllNonAspxPages>
	 * Description: <This method checks if Help button is available in other react
	 * pages> Input parameters: <WebDriver driver, ArrayList<String> test_steps>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <08/17/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void verifyHelpbuttonAvailabilityInAllNonAspxPages(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		Navigation nav = new Navigation();
		Wait.wait1Second();
		driver.findElement(By.xpath("//a[text()='Inventory']")).click();
		// nav.inventory(driver);
		nav.RatesGrid(driver);
		boolean c1 = Utility.isElementPresent(driver, By.xpath("//a[text()='Help']"));

//		driver.findElement(By.xpath("//a[text()='Demand Management']")).click();
//		boolean c2 = Utility.isElementPresent(driver, By.xpath("//a[text()='Help']"));

		driver.findElement(By.xpath("//a[contains(text(),'Distribution')]")).click();
		boolean c3 = Utility.isElementPresent(driver, By.xpath("/a[text()='Help']"));

		driver.findElement(By.xpath("//span[@class='sn_span3'][contains(text(),'Policies')]")).click();
		boolean c4 = Utility.isElementPresent(driver, By.xpath("/a[text()='Help']"));

		driver.findElement(By.xpath("//a[contains(text(),'Products & Bundles')]")).click();
		boolean c5 = Utility.isElementPresent(driver, By.xpath("/a[text()='Help']"));

		//if (!c1 && !c2 && !c3 && !c4 && !c5) {
		if (!c1 && !c3 && !c4 && !c5) {
			reportLogger.info("validated Help button and it is not available in other react pages");
			test_steps.add("validated Help button and it is not available in other react pages" + "<br>"
					+ "<a href='https://innroad.atlassian.net/browse/RPT-314'>"
					+ "Click here to open JIRA: RPT-314</a>");
		} else
			Assert.assertTrue(false,
					"validated Help button and it is available in other react pages" + "<br>"
							+ "<a href='https://innroad.atlassian.net/browse/RPT-314'>"
							+ "Click here to open JIRA: RPT-314</a>");

	}

	// Navigate to other pages
	// navigate to Admin
	public void admin(WebDriver driver) {
		Elements_On_All_Navigation Navigate = new Elements_On_All_Navigation(driver);
		try {
			driver.findElement(By.xpath("(//*[text()='Admin'])[2]")).click();
		} catch (Exception e) {
			try {
				Navigate.Admin.click();
			} catch (Exception e1) {
				Navigate.AdminIcon.click();
			}
		}
		Wait.waitForElementToBeVisibile(By.xpath(OR.Admin_Grid), driver);
		reportLogger.info("Navigated to Admin");
	}

	// Navigate to Setup page
	public void setup(WebDriver driver) {
		Elements_On_All_Navigation Navigate = new Elements_On_All_Navigation(driver);
		JavascriptExecutor jse = (JavascriptExecutor) driver;
		try {
			driver.findElement(By.xpath("//*[@data-id='fncMenuSetup']")).click();
			//jse.executeScript("arguments[0].click();", driver.findElement(By.xpath("(//*[text()='Setup'])[2]")));
			// driver.findElement(By.xpath("(//span[text()='Setup'])[2]")).click();
		} catch (Exception e) {
			try {
				jse.executeScript("arguments[0].click();", driver.findElement(By.xpath("(//*[text()='Setup'])[2]")));
				//jse.executeScript("arguments[0].click();", Navigate.Setup);
			} catch (Exception e1) {
				try {
					driver.findElement(By.xpath("//*[@data-id='fncMenuSetup']")).click();
				} catch (Exception e2) {
					jse.executeScript("arguments[0].click();", Navigate.SetupIcon);
				}
			}
		}
		try {
			Wait.explicit_wait_xpath(OR.Setup_Grid, driver);
		} catch (Exception e) {
			driver.navigate().refresh();
			Wait.explicit_wait_xpath(OR.Setup_Grid, driver);
		}
		Wait.explicit_wait_xpath(OR.Setup_Menu_Title, driver);
		reportLogger.info("Navigated to Setup");
	}

	// Naresh
	// This method is to verify Select Input options are available in Ledger
	// Balances Report page
	public boolean verifySelectInputAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		boolean flag;
		if (driver.findElements(By.xpath(OR_Reports.txtSelectInputs)).size() > 0) {
			test_steps.add("Select Input option is available on Ledger Balances Report page");
			reportLogger.info("Select Input option is available on Ledger Balances Report page");
			flag = true;
		} else {
			flag = false;
		}
		return flag;
	}

	// This method is to verify Include Ledger Account is available in Ledger
	// Balances Report page
	public boolean verifyIncludeLedgerAccountAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);
		boolean flag;
		if (driver.findElements(By.xpath(OR_Reports.txtIncludeLedgerAccount)).size() > 0) {
			test_steps.add("Include Ledger Account is available on Ledger Balances Report page");
			reportLogger.info("Include Ledger Account is available on Ledger Balances Report page");
			flag = true;
		} else {
			flag = false;
		}
		return flag;
	}

	// This method is to verify Include Ledger Account tooltip
	public void validateTooltipIncludeLedgerAccount(WebDriver driver, String expectedMessage,
			ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);

		try {
			driver.navigate().refresh();
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.infoIncludeLedgerAccount), driver);
			Utility.mouseOverElement(driver, report.infoIncludeLedgerAccount);
			Wait.wait2Second();
			String actualMessage = readTooltipText(driver);
			reportLogger.info("Expected " + expectedMessage);
			reportLogger.info("Actual " + actualMessage);
			if (expectedMessage.equals(actualMessage)) {
				test_steps.add("Include Ledger Account tooltip message validated susseccfully");
				reportLogger.info("Include Ledger Account tooltip message validated susseccfully");
			} else {
				Assert.assertTrue(false, "Failed to validate Display Custom General Ledger Account # tooltip message");
			}
		} catch (Exception e) {
			// Assert.assertTrue(false, "Failed to validate Include Ledger Account tooltip
			// message");
		}
	}

	// This method is to read the tooltip message
	public String readTooltipText(WebDriver driver) throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);
		String text = report.tooltip.getText();
		return text;
	}

	// This method is to verify Incidentals Select input option is available in
	// Ledger Balances Report page
	public void verifyIncidentalsAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		// Wait.WaitForElement(driver, OR_Reports.txtIncludeLedgerAccount);
		try {
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.selectIncidentals), driver);
			reportLogger.info("Incidentals available under Select inputs in Ledger Balances Repost page");
			test_steps.add("Incidentals available under Select inputs in Ledger Balances Repost page");
		} catch (Exception e) {
			reportLogger.info("Incidentals is not available under Select inputs in Ledger Balances Repost page");
			test_steps.add("Incidentals is not available under Select inputs in Ledger Balances Repost page");
			Assert.assertTrue(false, "");
		}
	}

	// This method is to verify given Select input option is available in Ledger
	// Balances Report page
	public void verifySelectInputOptionAvailability(WebDriver driver, String selectInputName,
			ArrayList<String> test_steps) throws InterruptedException {
		String selectInputLocator = "//span[contains(text(),'" + selectInputName + "')]//parent::button";
		ArrayList<String> types = new ArrayList<>();
		// Wait.WaitForElement(driver, OR_Reports.txtIncludeLedgerAccount);
		try {
			Wait.explicit_wait_visibilityof_webelement_3(driver.findElement(By.xpath(selectInputLocator)), driver);
			Wait.waitForElementToBeVisibile(By.xpath(selectInputLocator), driver);
			reportLogger.info(selectInputName + " available under Select inputs in Ledger Balances Repost page");
			test_steps.add(selectInputName + " available under Select inputs in Ledger Balances Repost page");
		} catch (Exception e) {
			reportLogger.info(selectInputName + " is not available under Select inputs in Ledger Balances Repost page");
			test_steps.add("AssertionError: " + selectInputName
					+ " is not available under Select inputs in Ledger Balances Repost page");
		}
	}

	// This method is to get available types
	public ArrayList<String> getAvailableTypes(WebDriver driver, Set<String> typesAll, ArrayList<String> test_steps)
			throws InterruptedException {

		ArrayList<String> types = new ArrayList<>();

		for (String type : typesAll) {
			String selectInputLocator = "//span[contains(text(),'" + type + "')]//parent::button";

			if (driver.findElements(By.xpath(selectInputLocator)).size() > 0) {
				types.add(type);
			}
		}

		return types;
	}

	// This method is to get available types
	public ArrayList<String> getAllAvailableTypes(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		ArrayList<String> types = new ArrayList<>();
		String strType = "//span[contains(@class,'MultiSelectControls')]";

		List<WebElement> type = driver.findElements(By.xpath(strType));

		for (int i = 0; i < type.size(); i++) {
			types.add(type.get(i).getText());
		}

		return types;
	}

	// This method is to validate Select Inputs Default values
	public void validateSelectInputsDefaultValues(WebDriver driver, Set<String> typesAll, ArrayList<String> test_steps)
			throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);
		ArrayList<String> types = new ArrayList<>();

		types = getAvailableTypes(driver, typesAll, test_steps);

		// String selectInputLocator = "//span[contains(text(),'" + selectInputName +
		// "')]//parent::button";
		// String strCheckbox = "//span[contains(text(),'" + selectInputName +
		// "')]//preceding-sibling::label//input";

		// Wait.WaitForElement(driver, OR_Reports.txtIncludeLedgerAccount);

		for (int i = 0; i < types.size(); i++) {

			try {

				String strCheckbox = "//span[contains(text(),'" + types.get(i) + "')]/../preceding-sibling::label//input";

				// Wait.waitForElementToBeVisibile(By.xpath(selectInputLocator), driver);
				WebElement checkbox = driver.findElement(By.xpath(strCheckbox));
				if (checkbox.isEnabled()) {
					reportLogger.info(types.get(i) + " checkbox enabled as expected");
					test_steps.add(types.get(i) + " checkbox enabled as expected");
				} else {
					reportLogger.info(types.get(i) + " checkbox not enabled as expected");
					Assert.assertTrue(false);
				}

			} catch (Exception e) {
				reportLogger.info(types.get(i) + " checkbox validation failed");
				test_steps.add(types.get(i) + " checkbox validation failed");
				Assert.assertTrue(false, types.get(i) + " checkbox validation failed");
			} catch (Error e) {
				reportLogger.info("Failed - " + types.get(i) + " checkbox not enabled as expected");
				test_steps.add("Failed - " + types.get(i) + " checkbox not enabled as expected");
			}

		}

	}

	// This method is to verify popup when we clicked on input options - Incidentals
	public void selectInputsPopupValidationIncidentals(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);
		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.selectIncidentals), driver);
		report.selectIncidentals.click();

		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.popupMessage), driver);

		if (report.popupMessage.getText().equals("Ledger Account Balances")) {
			Assert.assertTrue(true, "Popup not displayed as expected");
			reportLogger.info("Select inputs popup displayed");
			test_steps.add("Select inputs popup displayed");

			Wait.wait5Second();
			reportLogger.info(report.inputIncidentals.getAttribute("class"));
			if (report.inputIncidentals.getAttribute("class").contains("ant-menu-item-selected")) {
				Assert.assertTrue(true, "Incidentals input is selected as expected");
			} else {
				Assert.assertTrue(false, "Incidentals input is not selected as expected");
			}

		} else {
			Assert.assertTrue(false, "Popup not displayed as expected");
		}
	}

	// This method is to click on given select input
	public void clickSelectInput(WebDriver driver, String selectInputName, ArrayList<String> test_steps)
			throws InterruptedException {

		String selectInputLocator = "//span[contains(text(),'" + selectInputName + "')]//parent::button";

		Elements_Reports report = new Elements_Reports(driver);
		// Wait.waitForElementToBeVisibile(By.xpath(selectInputLocator), driver);
		try {
			// Wait.explicit_wait_10sec(driver.findElement(By.xpath(selectInputLocator)),
			// driver);
			Wait.explicit_wait_visibilityof_webelement_3(driver.findElement(By.xpath(selectInputLocator)), driver);
			WebElement input = driver.findElement(By.xpath(selectInputLocator));
			input.click();
			Wait.wait1Second();

		} catch (Exception e) {
			test_steps.add("AssertionError " + selectInputName + " is not available in Ledger Balances page");
			Assert.assertTrue(false);
		}

		Wait.wait1Second();
	}

	// This method is to validate click on given select input
	public void validateClickSelectInput(WebDriver driver, String selectInputName, ArrayList<String> test_steps)
			throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);

		clickSelectInput(driver, selectInputName, test_steps);

		try {
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.popupMessage), driver);
			if (report.popupMessage.getText().equals("Ledger Account Balances")) {
				reportLogger.info("Select inputs popup displayed");
				test_steps.add("Select inputs popup displayed");
			} else {
				Assert.assertTrue(false, "Popup not displayed as expected");
			}

		} catch (Exception e) {
			test_steps.add("AssertionError " + selectInputName + "popup validation failed");
		}
	}

	// This method is to verify popup when we clicked on input options - All options
	public void validateSelectInputsPopup(WebDriver driver, String selectInputName, ArrayList<String> test_steps)
			throws InterruptedException {

//		String selectInputLocator = "//span[contains(text(),'" + selectInputName + "')]//parent::button";
//		String inputLocator = "//li[contains(text(),'" + selectInputName + "')]";

		Elements_Reports report = new Elements_Reports(driver);
		try {
			// Wait.waitForElementToBeVisibile(By.xpath(selectInputLocator), driver);
			Wait.wait2Second();
			// driver.findElement(By.xpath(selectInputLocator)).click();
			clickSelectInput(driver, selectInputName, test_steps);
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.popupMessage), driver);

			try {
				if (report.popupMessage.getText().equals("Ledger Account Balances")) {
					test_steps.add("Select inputs popup displayed sucessfully - " + selectInputName);
					reportLogger.info("Select inputs popup displayed sucessfully - " + selectInputName);

					Wait.wait3Second();
					//WebElement input = driver.findElement(By.xpath(inputLocator));
					WebElement popup = driver.findElement(By.xpath(
							"//span[contains(text(),'Save')]//parent::button"));
					// reportLogger.info(input.getAttribute("class"));
					if (!popup.isEnabled()) {
						test_steps.add("Save button disabled as expected - " + selectInputName);
						reportLogger.info("Save button disabled as expected - " + selectInputName);
					} else {
						reportLogger.info(selectInputName + " Save button not disabled as expected");
						Assert.assertTrue(false, selectInputName + " Save button not disabled as expected");
					}

				} else {
					reportLogger.info(selectInputName + "Select input Popup not displayed as expected");
					Assert.assertTrue(false, selectInputName + "Select input Popup not displayed as expected");
				}

				reportLogger.info(selectInputName + " Select inputs popup validated sucessfully");
				test_steps.add(selectInputName + " Select inputs popup validated sucessfully");

				// closePopupSelectInputs(driver, test_steps);
				Wait.wait3Second();
			} catch (Exception e) {
				test_steps.add(e.toString());
				// test_steps.add("AssertionError "+selectInputName+" Select input Popup
				// validation failed");
			} catch (Error e) {
				// test_steps.add(e.toString());
				test_steps.add(e.toString());
			}

		} catch (Exception e) {
			// test_steps.add(e.toString());
			reportLogger.info(selectInputName + " Select input option not available on Ledger Balances page");
			test_steps.add(
					"AssertionError " + selectInputName + " Select input option not available on Ledger Balances page");
		} catch (Error e) {
			// test_steps.add(e.toString());
			reportLogger.info(selectInputName + " Select input option not available on Ledger Balances page");
			test_steps.add(
					"AssertionError " + selectInputName + " Select input option not available on Ledger Balances page");
		}
	}

	// This method is to close the popup
	public void closePopupSelectInputs(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);

		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.buttonClosePopup), driver);
		Utility.clickThroughJavaScript(driver, report.buttonClosePopup);
	}

	// This method is to Save the popup
	public void savePopupSelectInputs(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);

		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.buttonSavePopup), driver);
		// report.buttonSavePopup.click();
		Utility.clickThroughAction(driver, report.buttonSavePopup);
	}

	// This method is to Cancel the popup
	public void cancelPopupSelectInputs(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);

		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.buttonCancelPopup), driver);
		report.buttonCancelPopup.click();
	}

	// This method is to get input values from Selected input
	public ArrayList<String> getInputValuesFromGivenCategory(WebDriver driver, String selectInputName,
			ArrayList<String> test_steps) throws InterruptedException {

		String inputLocator = "//li[contains(text(),'" + selectInputName + "')]";
		String inputValuesLocator = "//span[contains(text(),'" + selectInputName
				+ "')]//following-sibling::a[@role='button']";
		ArrayList<String> inputValues = new ArrayList<>();

		Elements_Reports report = new Elements_Reports(driver);

		// Wait.waitForElementToBeVisibile(By.xpath(inputLocator), driver);
		// driver.findElement(By.xpath(inputLocator)).click();
		Wait.wait1Second();

		List<WebElement> inputValuesElements = driver.findElements(By.xpath(inputValuesLocator));

		for (WebElement input : inputValuesElements) {
			inputValues.add(input.getAttribute("title"));
		}

		return inputValues;
	}

	// This method is to validate Select Input options clear all and checkbox and
	// Input Option availability
	public void validateSelectInputCheckboxAndClearAll(WebDriver driver, String selectInputName,
			ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		// report.buttonClearAll.click();

		String selectInputLocator = "//span[contains(text(),'" + selectInputName + "')]//parent::button";
		String strCheckbox = "//span[contains(text(),'" + selectInputName + "')]/../preceding-sibling::label//input";

		// Wait.WaitForElement(driver, OR_Reports.txtIncludeLedgerAccount);
		try {
			try {
				Wait.explicit_wait_10sec(driver.findElement(By.xpath(selectInputLocator)), driver);
				reportLogger.info(selectInputName + " is available");
			} catch (Exception e) {
				reportLogger.info("Failed: " + selectInputName + " is not available on Ledger Balances Report page");
				test_steps.add("Failed: " + selectInputName + " is not available on Ledger Balances Report page");
				Assert.assertTrue(false,
						"Failed: " + selectInputName + " is not available on Ledger Balances Report page");
			}

			// Wait.waitForElementToBeVisibile(By.xpath(selectInputLocator), driver);
			WebElement checkbox = driver.findElement(By.xpath(strCheckbox));
			if (checkbox.isEnabled()) {
				reportLogger.info("Checkbox is enabled");
				// clickSelectInput(driver, selectInputName, test_steps);
				//selectAllInputOptions(driver, selectInputName, test_steps);
				//Utility.clickThroughAction(driver, report.buttonSavePopup);
				checkbox.click();

				if (checkbox.isSelected()) {
					test_steps.add(selectInputName + " checkbox is Selected after selecting options");
					reportLogger.info(selectInputName
							+ " available under Select inputs in Ledger Balances Report page and checkbox validated sucessfully");
					test_steps.add(selectInputName
							+ " available under Select inputs in Ledger Balances Report page and checkbox validated sucessfully");
				}
			}

		} catch (Exception e) {
			reportLogger.info(selectInputName + " checkbox validation failed");
			test_steps.add(selectInputName + " checkbox validation failed");
			Assert.assertTrue(false, selectInputName + " checkbox validation failed");
		}

		try {
			Wait.wait1Second();
			clearAllInputOptions(driver, test_steps);
			Wait.wait2Second();
			WebElement checkbox = driver.findElement(By.xpath(strCheckbox));
			if (!checkbox.isSelected()) {
				test_steps.add(selectInputName + " Clear all validated successfully");
				reportLogger.info(selectInputName + " checkbox is disabled after clear all options");
			} else {
				reportLogger.info(selectInputName + " checkbox is disabled after clear all options");
				test_steps.add("AssertionError - " + selectInputName + " Clear all validated successfully");
			}

		} catch (Exception e) {
			reportLogger.info(selectInputName + " clear all validation failed");
			test_steps.add(selectInputName + " clear all validation failed");
			Assert.assertTrue(false, selectInputName + " clear all validation failed");
		} catch (Error e) {
			test_steps.add(e.toString());
		}

	}

	// This method is to all Select Input items using See All
	public void selectAllInputsUsingSeeAll(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);

		Utility.clickThroughAction(driver, report.buttonSeeAll);
		Wait.wait1Second();
		Utility.clickThroughAction(driver, report.clickSelectAll);
		Wait.wait1Second();
		Utility.clickThroughAction(driver, report.buttonSavePopup);
		Wait.wait1Second();

	}

	// This method is to validate See all functionality
	public void validateSeeAll(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);

		String strNames = "//button[contains(@class,'MultiSelectControls_checkBoxButton')]";
		String inputLocator = "//h3[text()='Available']//parent::div//a";
		ArrayList<String> inputValues = new ArrayList<>();
		ArrayList<String> allNames = new ArrayList<>();

		// seeAllInputOptions(driver, test_steps);
		Wait.wait2Second();
		try {
			Utility.clickThroughJavaScript(driver, report.buttonSeeAll);
			Wait.wait3Second();
			List<WebElement> inputValuesElements = driver.findElements(By.xpath(inputLocator));

			for (int i = 0; i < inputValuesElements.size(); i++) {
				inputValues.add(inputValuesElements.get(i).getAttribute("title"));
			}

			reportLogger.info("See All: " + inputValues.size() + "  " + inputValues);
			Wait.wait2Second();
			closePopupSelectInputs(driver, test_steps);
			List<WebElement> names = driver.findElements(By.xpath(strNames));

			for (int i = 0; i < names.size(); i++) {
				// names.get(i).click();
				Utility.clickThroughAction(driver, names.get(i));
				List<WebElement> values = driver.findElements(By.xpath("//a[@role='button']"));
				for (int j = 0; j < values.size() - 2; j++) {
					allNames.add(values.get(j).getAttribute("title"));
				}
				Wait.wait2Second();
				closePopupSelectInputs(driver, test_steps);
			}
			reportLogger.info("All: " + allNames.size() + "  " + allNames);

			Collections.sort(inputValues);
			Collections.sort(allNames);

			if (inputValues.equals(allNames)) {
				reportLogger.info("Select Inputs - See All functionality validated successfully");
				test_steps.add("Select Inputs - See All functionality validated successfully");
			} else {
				reportLogger.info("Failed: Select Inputs - See All functionality validation failed");
				test_steps.add("Failed: Select Inputs - See All functionality validation failed");
				Assert.assertTrue(false, "Failed: Select Inputs - See All functionality validation failed. Expected: "
						+ allNames + " But found: " + inputValues);
			}
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}
	}

	// This method is to validate 0 options
	public void validate_0_0_Functionality(WebDriver driver, ArrayList<String> types, ArrayList<String> test_steps)
			throws InterruptedException {

		for (String type : types) {
			if (getAllInputOptionsCount(driver, type, test_steps) == 0) {
				reportLogger.info(
						"The given " + type + " type has no accounts, but it's still visible in Ledger Balances page");
				test_steps.add(
						"The given " + type + " type has no accounts, but it's still visible in Ledger Balances page");
				Assert.assertTrue(false,
						"The give " + type + " type has no accounts, but it's still visible in Ledger Balances page");
			}
		}
	}

	// This method is to select input option from given category
	public void selectInputOption(WebDriver driver, String selectInputName, String selectInputOption,
			ArrayList<String> test_steps) throws InterruptedException {

		String inputLocator = "//li[contains(text(),'" + selectInputName + "')]";
		String strInputValuesAvailable = "//h3[text()='Available']//parent::div//span[contains(text(),'"
				+ selectInputName + "')]//following-sibling::a[@role='button']";
		// String inputValuesLocator =
		// "//span[text()='"+selectInputName+"']//following-sibling::a[@role='button']";

		Wait.waitForElementToBeVisibile(By.xpath(inputLocator), driver);
		driver.findElement(By.xpath(inputLocator)).click();

		List<WebElement> inputValuesAvailable = driver.findElements(By.xpath(strInputValuesAvailable));

		for (WebElement input : inputValuesAvailable) {
			if (input.getText().equalsIgnoreCase(selectInputOption)) {
				input.click();
				break;
			}
		}
	}

	// This method is to verify select input option from given category
	public void verifySelectInputOption(WebDriver driver, String selectInputName, String selectInputOption,
			ArrayList<String> test_steps) throws InterruptedException {

		String strInputValuesAvailable = "//h3[text()='Available']//parent::div//span[contains(text(),'"
				+ selectInputName + "')]//following-sibling::a[@role='button']";
		String strInputValuesSelected = "//h3[text()='Selected']//parent::div//span[contains(text(),'" + selectInputName
				+ "')]//following-sibling::a[@role='button']";
		// String inputValuesLocator =
		// "//span[text()='"+selectInputName+"']//following-sibling::a[@role='button']";
		ArrayList<String> inputValuesSelectedList = new ArrayList<>();
		ArrayList<String> inputValuesAvailableList = new ArrayList<>();
		clickSelectInput(driver, selectInputName, test_steps);
		Wait.wait2Second();
		selectInputOption(driver, selectInputName, selectInputOption, test_steps);

		List<WebElement> inputValuesAvailable = driver.findElements(By.xpath(strInputValuesAvailable));
		List<WebElement> inputValuesSelected = driver.findElements(By.xpath(strInputValuesSelected));

		for (WebElement available : inputValuesAvailable) {
			inputValuesAvailableList.add(available.getText());
		}

		for (WebElement selected : inputValuesSelected) {
			inputValuesSelectedList.add(selected.getText());
		}

		if (inputValuesSelectedList.contains(selectInputOption)
				&& !inputValuesAvailableList.contains(selectInputOption)) {
			reportLogger.info(selectInputOption + " input option is selected and it is moved to Selected list");
			test_steps.add(selectInputOption + " input option is selected and it is moved to Selected list");
		} else {
			Assert.assertTrue(false, "Given " + selectInputOption + " option is not selected");
		}

		closePopupSelectInputs(driver, test_steps);
		Wait.wait3Second();
	}

	// This method is to select all input options from given category
	public void selectAllInputOptions(WebDriver driver, String selectInputName, ArrayList<String> test_steps)
			throws InterruptedException {

		String inputLocator = "//li[contains(text(),'" + selectInputName + "')]";
		String strInputValuesAvailable = "//h3[text()='Available']//parent::div//span[contains(text(),'"
				+ selectInputName + "')]//following-sibling::a[@role='button']";
		// String inputValuesLocator =
		// "//span[text()='"+selectInputName+"']//following-sibling::a[@role='button']";

		Elements_Reports report = new Elements_Reports(driver);

		try {
			clickSelectInput(driver, selectInputName, test_steps);
			Wait.wait2Second();
			// Wait.waitForElementToBeVisibile(By.xpath(inputLocator), driver);
			// driver.findElement(By.xpath(inputLocator)).click();
		} catch (Exception e) {
			test_steps.add("AssertionError " + selectInputName + " not available on Ledger Balances page");
		}

		report.clickSelectAll.click();

		if (driver.findElements(By.xpath(strInputValuesAvailable)).size() == 0) {
			reportLogger.info(selectInputName + " All options are moved from Available to Selected");
		} else {
			Assert.assertTrue(false, selectInputName + " Failed to move all options from Available to Selected");
		}

		// closePopupSelectInputs(driver, test_steps);
		Wait.wait1Second();
	}

	// This method is to validate select all and deselect all input options from
	// given category
	public void validateSelectAndDeselectAllInputOptions(WebDriver driver, String selectInputName,
			ArrayList<String> test_steps) throws InterruptedException {

		try {
			selectAllInputOptions(driver, selectInputName, test_steps);
			reportLogger.info("Select Inputs: " + selectInputName + " select all options successfully validated");
			test_steps.add("Select Inputs: " + selectInputName + " select all options successfully validated");

		} catch (Exception e) {
			test_steps.add(e.toString());
			test_steps.add(
					"AssertionError Select Inputs: " + selectInputName + " Select all input options validation failed");
		} catch (Error e) {
			test_steps.add(e.toString());
			test_steps.add(
					"AssertionError Select Inputs: " + selectInputName + " Select all input options validation failed");
		}
		Wait.wait1Second();
		try {
			removeAllInputOptions(driver, selectInputName, test_steps);
			reportLogger.info("Select Inputs: " + selectInputName + " deselect all options successfully validated");
			test_steps.add("Select Inputs: " + selectInputName + " deselect all options successfully validated");
			closePopupSelectInputs(driver, test_steps);
			Wait.wait1Second();

		} catch (Exception e) {
			test_steps.add(e.toString());
			test_steps.add("AssertionError Select Inputs: " + selectInputName
					+ " De-select all input options validation failed");
		} catch (Error e) {
			test_steps.add(e.toString());
			test_steps.add("AssertionError Select Inputs: " + selectInputName
					+ " De-select all input options validation failed");
		}

	}

	// This method is to deselect(remove) all input options from given category
	public void removeAllInputOptions(WebDriver driver, String selectInputName, ArrayList<String> test_steps)
			throws InterruptedException {

		String inputLocator = "//li[contains(text(),'" + selectInputName + "')]";
		String strInputValuesSelected = "//h3[text()='Selected']//parent::div//span[contains(text(),'" + selectInputName
				+ "')]//following-sibling::a[@role='button']";
		// String inputValuesLocator =
		// "//span[text()='"+selectInputName+"']//following-sibling::a[@role='button']";

		Elements_Reports report = new Elements_Reports(driver);
		// clickSelectInput(driver, selectInputName, test_steps);
		// Wait.waitForElementToBeVisibile(By.xpath(inputLocator), driver);
		// driver.findElement(By.xpath(inputLocator)).click();

		report.clickRemoveAll.click();

		if (driver.findElements(By.xpath(strInputValuesSelected)).size() == 0) {
			reportLogger.info(selectInputName + " All options are moved from Selected to Available");
		} else {
			Assert.assertTrue(false, selectInputName + " Failed to move all options from Selected to Available");
		}

		// closePopupSelectInputs(driver, test_steps);
		Wait.wait1Second();
	}

	// This method is to validate Plus(+) and close(x) symbols on Select input
	// options popup
	public void validatePlusAndCloseIconsOnSelectInputOptionsPopup(WebDriver driver, String selectInputName,
			ArrayList<String> test_steps) throws InterruptedException {

		String inputLocator = "//li[contains(text(),'" + selectInputName + "')]";
		String strInputValuesAvailable = "//h3[text()='Available']//parent::div//span[contains(text(),'"
				+ selectInputName + "')]//following-sibling::a[@role='button']//span[@role='img']";
		String strInputValuesSelected = "//h3[text()='Selected']//parent::div//span[contains(text(),'" + selectInputName
				+ "')]//following-sibling::a[@role='button']//span[@role='img']";

		// String strInputValuesAvailable =
		// "//h3[text()='Available']//parent::div//span[text()='"+selectInputName+"']//following-sibling::a[@role='button']";
		// String strInputValuesSelected =
		// "//h3[text()='Selected']//parent::div//span[text()='"+selectInputName+"']//following-sibling::a[@role='button']";

		try {
			clickSelectInput(driver, selectInputName, test_steps);
			// String inputValuesLocator =
			// "//span[text()='"+selectInputName+"']//following-sibling::a[@role='button']";
			Wait.wait3Second();
			Wait.waitForElementToBeVisibile(By.xpath(inputLocator), driver);
			driver.findElement(By.xpath(inputLocator)).click();

			Wait.wait3Second();
			List<WebElement> inputValuesAvailable = driver.findElements(By.xpath(strInputValuesAvailable));
			// reportLogger.info(inputValuesAvailable.size());
			// reportLogger.info(inputValuesAvailable.get(0).getAttribute("type"));
			if (inputValuesAvailable.get(0).getAttribute("type").equals("plus")) {

				reportLogger.info("Plus icon Successfully validated on " + selectInputName + " Select input options");
				test_steps.add("Plus icon Successfully validated on '" + selectInputName + "' Select input options");
			} else {
				Assert.assertTrue(false,
						"Plus icon validation failed on '" + selectInputName + "' Select input options");
			}

			inputValuesAvailable.get(0).click();

			List<WebElement> inputValuesSelected = driver.findElements(By.xpath(strInputValuesSelected));

			if (inputValuesSelected.get(0).getAttribute("type").equals("close")) {

				reportLogger.info("Close icon Successfully validated on " + selectInputName + " Select input options");
				test_steps.add("Close icon Successfully validated on '" + selectInputName + "' Select input options");
			} else {
				Assert.assertTrue(false,
						"Close icon validation failed on '" + selectInputName + "' Select input options");
			}

			closePopupSelectInputs(driver, test_steps);
		} catch (Exception e) {
			test_steps.add("AssertionError " + selectInputName + "is not available in Ledger Balances page");
		} catch (Error e) {
			test_steps.add(e.toString());

		}

	}

	// This method is to clear all input options
	public void clearAllInputOptions(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);
		Wait.wait1Second();
		Wait.waitForElementToBeClickable(By.xpath(OR_Reports.buttonClearAll), driver, 10);
		Utility.clickThroughAction(driver, report.buttonClearAll);
	}
	
	// This method is to Select all input options
	public void selectAllInputOptions(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);
		Wait.wait1Second();
		Wait.waitForElementToBeClickable(By.xpath(OR_Reports.buttonSelectAll), driver, 10);
		Utility.clickThroughAction(driver, report.buttonSelectAll);
	}

	// This method is to See all input options
	public void seeAllInputOptions(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.buttonSeeAll), driver);
		// Utility.ScrollToElement(report.buttonSeeAll, driver);
		// report.buttonSeeAll.click();
		Utility.clickThroughAction(driver, report.buttonSeeAll);

	}

	// This method is to validate Select input options values with Ledger account
	// details
	public void validateSelectInputOptionsWithLedgerAccount(WebDriver driver, ArrayList<String> accountDetailsExpected,
			String selectInputName, ArrayList<String> test_steps) throws InterruptedException {

		LedgerAccount la = new LedgerAccount();

		// ArrayList<String> accountDetailsExpected = la.getLedgerAccountDetails(driver,
		// accountType, Status);
		ArrayList<String> accountDetailsActual = getInputValuesFromGivenCategory(driver, selectInputName, test_steps);

		Collections.sort(accountDetailsExpected);
		Collections.sort(accountDetailsActual);

		if (accountDetailsExpected.equals(accountDetailsActual)) {
			reportLogger.info("Successfully validated " + selectInputName
					+ " Select Input options values with Ledger Account details");
			test_steps.add("Successfully validated " + selectInputName
					+ "Select Input options values with Ledger Account details");
		} else {
			Assert.assertTrue(false,
					"Failed to validate " + selectInputName
							+ " Select Input options values with Ledger Account details, Expected: "
							+ accountDetailsExpected + " Actual: " + accountDetailsActual);
		}
	}

	// This method is to get Selected input options count
	public int getSelectedInputOptionsCount(WebDriver driver, String selectInputName, ArrayList<String> test_steps)
			throws InterruptedException {

		String strSelectInput = "//span[contains(text(),'" + selectInputName + "')]//following-sibling::span";
		WebElement selectInput = driver.findElement(By.xpath(strSelectInput));

		reportLogger.info(selectInput.getText());
		int selectedCount = Integer.parseInt(selectInput.getText().split("/")[0].replaceAll("[^a-zA-Z0-9]", ""));
		reportLogger.info(selectedCount);

		return selectedCount;
	}

	// This method is to get all input options count
	public int getAllInputOptionsCount(WebDriver driver, String selectInputName, ArrayList<String> test_steps)
			throws InterruptedException {

		String strSelectInput = "//span[contains(text(),'" + selectInputName + "')]/../following-sibling::span";
		WebElement selectInput = driver.findElement(By.xpath(strSelectInput));

		reportLogger.info(selectInput.getText());
		int totalCount = Integer.parseInt(selectInput.getText().split("/")[1].replaceAll("[^a-zA-Z0-9]", ""));
		reportLogger.info("Total count: " + totalCount);

		return totalCount;
	}

	// This method is to validate Select input options count with Ledger account
	// details
	public void validateSelectInputOptionsCountWithLedgerAccount(WebDriver driver,
			ArrayList<String> accountDetailsExpected, String selectInputName, ArrayList<String> test_steps)
			throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);
		LedgerAccount la = new LedgerAccount();
		Navigation nav = new Navigation();

		// ArrayList<String> accountDetailsExpected = la.getLedgerAccountDetails(driver,
		// accountType, Status);
		// nav.ReportsV2(driver);
		// navigateToLedgerBalancesReport(driver);
		// clickSelectInput(driver, selectInputName, test_steps);
		// ArrayList<String> accountDetailsActual =
		// getInputValuesFromGivenCategory(driver, selectInputName, test_steps);
		// closePopupSelectInputs(driver, test_steps);

		int countExpected = accountDetailsExpected.size();
		reportLogger.info(countExpected);
		int countActual = getAllInputOptionsCount(driver, selectInputName, test_steps);
		reportLogger.info(countActual);

		Collections.sort(accountDetailsExpected);
		// Collections.sort(accountDetailsActual);

		// if (accountDetailsExpected.equals(accountDetailsActual)) {
		if (countExpected == countActual) {
			test_steps.add("Successfully validated " + selectInputName
					+ " Select Input options values count with Ledger Account details");
			reportLogger.info("Successfully validated " + selectInputName
					+ " Select Input options values count with Ledger Account details");
		} else {
			Assert.assertTrue(false,
					"Failed to validate " + selectInputName
							+ " Select Input options values count with Ledger Account details, Expected: "
							+ countExpected + " Actual: " + countActual);
		}
	}

	// This method is to validate Exclude Zero Balance Ledger Accounts availability
	public void validateExcludeZeroBalanceLedgerAccountsAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.txtExcludeZeroBalanceLedgerAccounts), driver);
			test_steps.add("Exclude Zero Balance Ledger Accounts is available on Ledger Balances Report page");
			reportLogger.info("Exclude Zero Balance Ledger Accounts is available on Ledger Balances Report page");
		} catch (Exception e) {
			Assert.assertTrue(false,
					"Failed, Exclude Zero Balance Ledger Accounts is not available on Ledger Balances Report page");
		}
	}

	// This method is to validate Exclude Zero Balance Ledger Accounts tooltip
	// message
	public void validateTooltipExcludeZeroBalanceLedgerAccounts(WebDriver driver, String expectedMessage,
			ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		try {
			driver.navigate().refresh();
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.tooltipExcludeZeroBalanceLedgerAccounts), driver);
			Utility.mouseOverElement(driver, report.tooltipExcludeZeroBalanceLedgerAccounts);
			String actualMessage = readTooltipText(driver);
			if (expectedMessage.equals(actualMessage)) {
				test_steps.add("Exclude Zero Balance Ledger Accounts tooltip message validated susseccfully");
				reportLogger.info("Exclude Zero Balance Ledger Accounts tooltip message validated susseccfully");
			} else {
				Assert.assertTrue(false, "Failed to validate Exclude Zero Balance Ledger Accounts tooltip message");
			}
		} catch (Exception e) {
			Assert.assertTrue(false, "Failed to validate Exclude Zero Balance Ledger Accounts tooltip message");
		}
	}

	// This method is to validate Display Custom General Ledger Account #
	// availability
	public void validateDisplayCustomGeneralLedgerAccountAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.txtDisplayCustomGeneralLedgerAccount), driver);
			test_steps.add("Display Custom General Ledger Account # is available on Ledger Balances Report page");
			reportLogger.info("Display Custom General Ledger Account # is available on Ledger Balances Report page");
		} catch (Exception e) {
			Assert.assertTrue(false,
					"Failed, Display Custom General Ledger Account # is not available on Ledger Balances Report page");
		}
	}

	// This method is to validate Display Custom General Ledger Account # tooltip
	// message
	public void validateTooltipDisplayCustomGeneralLedgerAccount(WebDriver driver, String expectedMessage,
			ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		try {
			driver.navigate().refresh();
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.tooltipDisplayCustomGeneralLedgerAccount), driver);
			Utility.mouseOverElement(driver, report.tooltipDisplayCustomGeneralLedgerAccount);
			String actualMessage = readTooltipText(driver);
			if (expectedMessage.equals(actualMessage)) {
				test_steps.add("Display Custom General Ledger Account # tooltip message validated susseccfully");
				reportLogger.info("Display Custom General Ledger Account # tooltip message validated susseccfully");
			} else {
				Assert.assertTrue(false, "Failed to validate Display Custom General Ledger Account # tooltip message");
			}
		} catch (Exception e) {
			Assert.assertTrue(false, "Failed to validate Display Custom General Ledger Account # tooltip message");
		}
	}

	// This method is to select Yes/No for Exclude Zero Balance Ledger Accounts
	public void selectExcludeZeroBalanceLedgerAccountsOption(WebDriver driver, String option,
			ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		try {
			if (option.equals("Yes")) {
				Wait.waitForElementToBeClickable(By.xpath(OR_Reports.rdoYesExcludeZero), driver);
				if (!report.rdoYesExcludeZero.isSelected()) {
					report.rdoYesExcludeZero.click();
				}
			} else {
				Wait.waitForElementToBeClickable(By.xpath(OR_Reports.rdoNoExcludeZero), driver);
				report.rdoNoExcludeZero.click();
			}

			test_steps.add("Exclude Zero Balance Ledger Accounts - " + option + " selected successfully");
			reportLogger.info("Exclude Zero Balance Ledger Accounts - " + option + " selected successfully");
		} catch (Exception e) {
			Assert.assertTrue(false, "Failed to select " + option + " for Exclude Zero Balance Ledger Accounts");
		}
	}

	// This method is to select Yes/No for Exclude Zero Balance Ledger Accounts
	public void validateExcludeZeroBalanceLedgerAccountsOption(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);
		// Wait.explicit_wait_10sec(report.rdoYesExcludeZero, driver);

		try {
			if (report.rdoYesExcludeZero.isSelected()) {
				report.rdoYesExcludeZero.click();
				Wait.wait1Second();
				if (!report.rdoYesExcludeZero.isSelected()) {
					reportLogger.info("Exclude Zero Balance Ledger Accounts 'Yes' button validated successfully");
					test_steps.add("Exclude Zero Balance Ledger Accounts 'Yes' button validated successfully");
				}
			}
			if (!report.rdoYesExcludeZero.isSelected()) {
				report.rdoYesExcludeZero.click();
				Wait.wait1Second();
				if (report.rdoYesExcludeZero.isSelected()) {
					reportLogger.info("Exclude Zero Balance Ledger Accounts 'Yes' button validated successfully");
					test_steps.add("Exclude Zero Balance Ledger Accounts 'Yes' button validated successfully");
				}
			}

			if (report.rdoNoExcludeZero.isSelected()) {
				report.rdoNoExcludeZero.click();
				Wait.wait1Second();
				if (!report.rdoNoExcludeZero.isSelected()) {
					reportLogger.info("Exclude Zero Balance Ledger Accounts 'No' button validated successfully");
					test_steps.add("Exclude Zero Balance Ledger Accounts 'No' button validated successfully");
				}
			}

			if (!report.rdoNoExcludeZero.isSelected()) {
				report.rdoNoExcludeZero.click();
				Wait.wait1Second();
				if (report.rdoNoExcludeZero.isSelected()) {
					reportLogger.info("Exclude Zero Balance Ledger Accounts 'No' button validated successfully");
					test_steps.add("Exclude Zero Balance Ledger Accounts 'No' button validated successfully");
				}
			}
			test_steps.add("Exclude Zero Balance Ledger Accounts - Yes/No buttons validated successfully");
			reportLogger.info("Exclude Zero Balance Ledger Accounts - Yes/No buttons validated successfully");
		} catch (Exception e) {
			Assert.assertTrue(false, "Failed to validate Exclude Zero Balance Ledger Accounts Yes/No buttons");
		}
	}

	// This method is to select Yes/No for Display Custom General Ledger Account #
	public void validateDisplayCustomGeneralLedgerAccount(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);
		Wait.explicit_wait_10sec(report.rdoYesDisplayCustomGeneral, driver);

		try {
			if (report.rdoYesDisplayCustomGeneral.isSelected()) {
				report.rdoYesDisplayCustomGeneral.click();
				Wait.wait1Second();
				if (!report.rdoYesDisplayCustomGeneral.isSelected()) {
					reportLogger.info("Display Custom General Ledger Account 'Yes' button validated successfully");
					test_steps.add("Display Custom General Ledger Account 'Yes' button validated successfully");
				}
			}
			if (!report.rdoYesDisplayCustomGeneral.isSelected()) {
				report.rdoYesDisplayCustomGeneral.click();
				Wait.wait1Second();
				if (report.rdoYesDisplayCustomGeneral.isSelected()) {
					reportLogger.info("Display Custom General Ledger Account 'Yes' button validated successfully");
					test_steps.add("Display Custom General Ledger Account 'Yes' button validated successfully");
				}
			}

			if (report.rdoNoDisplayCustomGeneral.isSelected()) {
				report.rdoNoDisplayCustomGeneral.click();
				Wait.wait1Second();
				if (!report.rdoNoDisplayCustomGeneral.isSelected()) {
					reportLogger.info("Display Custom General Ledger Account 'No' button validated successfully");
					test_steps.add("Display Custom General Ledger Account 'No' button validated successfully");
				}
			}

			if (!report.rdoNoDisplayCustomGeneral.isSelected()) {
				report.rdoNoDisplayCustomGeneral.click();
				Wait.wait1Second();
				if (report.rdoNoDisplayCustomGeneral.isSelected()) {
					reportLogger.info("Exclude Zero Balance Ledger Accounts 'No' button validated successfully");
					test_steps.add("Exclude Zero Balance Ledger Accounts 'No' button validated successfully");
				}
			}
			test_steps.add("Display Custom General Ledger Account - Yes/No buttons validated successfully");
			reportLogger.info("Display Custom General Ledger Account - Yes/No buttons validated successfully");
		} catch (Exception e) {
			Assert.assertTrue(false, "Failed to validate Display Custom General Ledger Account Yes/No buttons");
		}
	}

	// This method is to Select Yes/No for Display Custom General Ledger Account #
	public void selectDisplayCustomGeneralLedgerAccountsOption(WebDriver driver, String option,
			ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		try {
			if (option.equals("Yes")) {
				Wait.waitForElementToBeClickable(By.xpath(OR_Reports.rdoYesDisplayCustomGeneral), driver);
				if (!report.rdoYesDisplayCustomGeneral.isSelected()) {
					report.rdoYesDisplayCustomGeneral.click();
				}
			} else {
				Wait.waitForElementToBeClickable(By.xpath(OR_Reports.rdoNoDisplayCustomGeneral), driver);
				report.rdoNoDisplayCustomGeneral.click();
			}

			test_steps.add("Display Custom General Ledger Account # - " + option + " selected successfully");
			reportLogger.info("Display Custom General Ledger Account # - " + option + " selected successfully");
		} catch (Exception e) {
			Assert.assertTrue(false, "Failed to select " + option + " for Display Custom General Ledger Account #");
		}
	}

	// This method is to verify search functionality for available options
	public void validateSearchAvailable(WebDriver driver, String selectInputName, String searchValue,
			ArrayList<String> test_steps) throws InterruptedException {

		String strInputValuesAvailable = "//h3[text()='Available']//parent::div//span[contains(text(),'"
				+ selectInputName + "')]//following-sibling::a[@role='button']";
		String searchNoResults = "//h3[text()='Available']//following-sibling::span/input[@name='searchKey']//parent::span//following-sibling::div/div/i[text()='No results found']";
		Elements_Reports report = new Elements_Reports(driver);

		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.searchAvailable), driver);
		report.searchAvailable.click();
		report.searchAvailable.sendKeys(searchValue);

		// String strInputValuesSelected =
		// "//h3[text()='Selected']//parent::div//span[text()='"+selectInputName+"']//following-sibling::a[@role='button']";
		// String inputValuesLocator =
		// "//span[text()='"+selectInputName+"']//following-sibling::a[@role='button']";
		ArrayList<String> inputValuesSelectedList = new ArrayList<>();
		ArrayList<String> inputValuesAvailableList = new ArrayList<>();
		ArrayList<String> inputValuesAvailableListBeforeSort = new ArrayList<>();

		List<WebElement> inputValuesAvailable = driver.findElements(By.xpath(strInputValuesAvailable));
		// List<WebElement> inputValuesSelected =
		// driver.findElements(By.xpath(strInputValuesSelected));

		for (WebElement available : inputValuesAvailable) {
			inputValuesAvailableList.add(available.getText());
		}

		inputValuesAvailableListBeforeSort = inputValuesAvailableList;

		Collections.sort(inputValuesAvailableList);

		if (inputValuesAvailableList.equals(inputValuesAvailableListBeforeSort)) {
			if (inputValuesAvailableList.size() == 0) {
				Wait.waitForElementToBeVisibile(By.xpath(searchNoResults), driver);
				test_steps.add("Search functionality successfully validated in Available");
				reportLogger.info("Search functionality successfully validated in Available");
			}
		} else {
			Assert.assertTrue(false, "Failed to validate search functionality in Available");
		}

	}

	// This method is to verify search functionality for Selected options
	public void validateSearchSelected(WebDriver driver, String selectInputName, String searchValue,
			ArrayList<String> test_steps) throws InterruptedException {

		String strInputValuesSelected = "//h3[text()='Selected']//parent::div//span[contains(text(),'" + selectInputName
				+ "')]//following-sibling::a[@role='button']";
		String searchNoResults = "//h3[text()='Available']//following-sibling::span/input[@name='searchKey']//parent::span//following-sibling::div/div/i[text()='No results found']";
		Elements_Reports report = new Elements_Reports(driver);

		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.searchSelected), driver);
		report.searchSelected.click();
		report.searchSelected.sendKeys(searchValue);

		// String strInputValuesSelected =
		// "//h3[text()='Selected']//parent::div//span[text()='"+selectInputName+"']//following-sibling::a[@role='button']";
		// String inputValuesLocator =
		// "//span[text()='"+selectInputName+"']//following-sibling::a[@role='button']";
		ArrayList<String> inputValuesSelectedList = new ArrayList<>();
		ArrayList<String> inputValuesSelectedListBeforeSort = new ArrayList<>();

		List<WebElement> inputValuesSelected = driver.findElements(By.xpath(strInputValuesSelected));

		for (WebElement available : inputValuesSelected) {
			inputValuesSelectedList.add(available.getText());
		}

		inputValuesSelectedListBeforeSort = inputValuesSelectedList;

		Collections.sort(inputValuesSelectedList);

		if (inputValuesSelectedList.equals(inputValuesSelectedListBeforeSort)) {
			if (inputValuesSelectedList.size() == 0) {
				Wait.waitForElementToBeVisibile(By.xpath(searchNoResults), driver);
				test_steps.add("Search functionality successfully validated in Selected");
				reportLogger.info("Search functionality successfully validated in Selected");
			}
		} else {
			Assert.assertTrue(false, "Failed to validate search functionality in Selected");
		}
	}

	public void validateIncludeLedgerAccountsToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.IncludedLedgerAccounts);
		Utility.hoverOnElement(driver, res.IncludedLedgerAccountsToolTipIcon);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Included Ledger Accounts')]"), driver);
		String act1 = driver
				.findElement(
						By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Included Ledger Accounts')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'Define which Ledger Accounts to be included')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String exp1 = "Included Ledger Accounts";
		String exp2 = "Define which Ledger Accounts to be included in the report. Click on the category name or click �See All� to select specific accounts.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Included Ledger Accounts tooltip validation");
			test_steps.add("Sucess - Included Ledger Accounts tooltip validation");
		} else
			Assert.assertTrue(false, "Fail - Included Ledger Accounts tooltip validation");
	}

	public void validateExcludeZeroBalanceLedgerAccountsToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.ExcludeZeroBalanceLedgerAccounts);
		Utility.hoverOnElement(driver, res.ExcludeZeroBalanceLedgerAccountsToolTipIcon);
		Wait.waitForElementToBeVisibile(
				By.xpath(
						"//div[@class='ant-popover-title']/b[contains(text(),'Exclude Zero Balance Ledger Accounts')]"),
				driver);
		String act1 = driver
				.findElement(By.xpath(
						"//div[@class='ant-popover-title']/b[contains(text(),'Exclude Zero Balance Ledger Accounts')]"))
				.getText();
		String act2 = driver
				.findElement(By.xpath("//div[@class='ant-popover-inner-content']/p[contains(text(),'Exclude all $0')]"))
				.getText();
		String exp1 = "Exclude Zero Balance Ledger Accounts";
		String exp2 = "Exclude all $0 balance Ledger Accounts from the report.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Exclude Zero Balance Ledger Accounts tooltip validation");
			test_steps.add("Sucess - Exclude Zero Balance Ledger Accounts tooltip validation");
		} else
			Assert.assertTrue(false, "Fail - Exclude Zero Balance Ledger Accounts tooltip validation");
	}

	public void validateDisplayCustomGeneralLedgerAccountToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.DisplayCustomGeneralLedgerAccount);
		Utility.hoverOnElement(driver, res.DisplayCustomGeneralLedgerAccountToolTipIcon);
		Wait.waitForElementToBeVisibile(By.xpath(
				"//div[@class='ant-popover-title']/b[contains(text(),'Display Custom General Ledger Account #')]"),
				driver);
		String act1 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-title']/b[contains(text(),'Display Custom General Ledger Account #')]"))
				.getText();
		String act2 = driver.findElement(By
				.xpath("//div[@class='ant-popover-inner-content']/p[contains(text(),'General Ledger Account Number')]"))
				.getText();
		String exp1 = "Display Custom General Ledger Account #";
		String exp2 = "Display the General Ledger Account Number, if any, for each Ledger Account.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Display Custom General Ledger Account tooltip validation");
			test_steps.add("Sucess - Display Custom General Ledger Account tooltip validation");
		} else
			Assert.assertTrue(false, "Fail - Display Custom General Ledger Account tooltip validation");
	}

	// Validate all account types with Ledger Balances Report options
	public void validateLedgerAccountWithReport(WebDriver driver, HashSet<String> typesUnique, ArrayList<String> names,
			ArrayList<String> types, ArrayList<String> status, ArrayList<String> test_steps)
			throws InterruptedException {

		Elements_Reports res = new Elements_Reports(driver);
		LedgerAccount la = new LedgerAccount();

		ArrayList<String> inputValues = new ArrayList<>();
		ArrayList<String> nameList = new ArrayList<>();

		if (typesUnique.contains("Package")) {
			typesUnique.remove("Package");
		}

		if (typesUnique.contains("Retail")) {
			typesUnique.remove("Retail");
		}

		for (String type : typesUnique) {

			nameList.clear();
			inputValues.clear();

			try {
				clickSelectInput(driver, type, test_steps);
				test_steps.add(type + " is available in Ledger Balances Report page");
				String inputLocator = "//li[contains(text(),'" + type + "')]";
				String inputValuesLocator = "//span[contains(text(),'" + type
						+ "')]//following-sibling::a[@role='button']";

				// Wait.waitForElementToBeVisibile(By.xpath(inputLocator), driver);
				driver.findElement(By.xpath(inputLocator)).click();

				List<WebElement> inputValuesElements = driver.findElements(By.xpath(inputValuesLocator));

				for (WebElement input : inputValuesElements) {
					inputValues.add(input.getAttribute("title").trim());
				}
				closePopupSelectInputs(driver, test_steps);

				int count = 0;
				for (int i = 0; i < types.size(); i++) {
					if (types.get(i).equalsIgnoreCase(type) && status.get(i).equalsIgnoreCase("Active")) {
						nameList.add(names.get(i));
						reportLogger.info(names.get(i) + " Added to list");
						count++;
					}
				}

				if (type.equalsIgnoreCase("Payment Method")) {
					nameList.add("Account (Corp/Member)");
					nameList.add("Account (Group)");
					nameList.add("Account (House Account)");
					nameList.add("Account (Travel Agent)");
					nameList.add("Account (Unit Owner)");
					nameList.remove("Account (Advanced Deposit)");
					count = count + 4;

				}

				Collections.sort(inputValues);
				Collections.sort(nameList);
				reportLogger.info("Input Values"+inputValues);
				reportLogger.info("Names: "+nameList);

				try {
					if (inputValues.equals(nameList)) {
						test_steps.add(
								type + " account names successfully matching with LedgerBalances Report Page options");
						reportLogger.info(
								type + " account names successfully matching with LedgerBalances Report Page options");
					} else {
						Assert.assertTrue(false, "Select inputs: " + type
								+ " Failed to match Ledger Account value with Ledger Balances Report value. Expected: "
								+ nameList + " But found: " + inputValues);
						/*
						 * try { Assert.assertTrue(false,
						 * "Failed to match Ledger Account value with Ledger Balances Report value. Expected: "
						 * +nameList+" But found: "+inputValues); }catch (Exception e) {
						 * test_steps.add(e.toString()); } catch (Error e) {
						 * test_steps.add(e.toString()); } for (int i = 0; i < inputValues.size(); i++)
						 * { try { Assert.assertEquals(inputValues.get(i), nameList.get(i),
						 * "Failed to match Ledger Account value with Ledger Balances Report value");
						 * }catch (Exception e) { test_steps.add(e.toString()); } catch (Error e) {
						 * test_steps.add(e.toString()); } }
						 */
					}
				} catch (Exception e) {
					test_steps.add(e.toString());
				} catch (Error e) {
					test_steps.add(e.toString());
				}

				reportLogger.info("Count " + count);
				try {
					if (getAllInputOptionsCount(driver, type, test_steps) == count) {
						test_steps.add(type + " options count is matching with Ledger Balances Select Input count");
						reportLogger.info(type + " options count is matching with Ledger Balances Select Input count");
					} else {
						Assert.assertTrue(false, "Failed - Select Inputs: " + type + " Expected: " + count
								+ ", Actual: " + getAllInputOptionsCount(driver, type, test_steps));
					}

				} catch (Exception e) {
					test_steps.add(e.toString());
				} catch (Error e) {
					test_steps.add(e.toString());
				}

			} catch (Exception e) {
				test_steps.add("AssertionError " + type + " account is not available on Ledger Balances Report page");
			} catch (Error e) {
				test_steps.add("AssertionError " + type + " account is not available on Ledger Balances Report page");
				// test_steps.add(e.toString());
			}
		}

	}

	// This method is to validate Transer input
	public void validateTransfersInput(WebDriver driver, ArrayList<String> expected, ArrayList<String> test_steps)
			throws InterruptedException {

		String selectInputLocator = "//span[contains(text(),'Transfers')]//parent::button";
		String inputLocator = "//li[text()='Transfers']";
		String inputValuesLocator = "//span[text()='Transfers']//following-sibling::a[@role='button']";
		ArrayList<String> actual = new ArrayList<>();

		Elements_Reports report = new Elements_Reports(driver);

		try {
			clickSelectInput(driver, "Transfers", test_steps);

			List<WebElement> inputValuesElements = driver.findElements(By.xpath(inputValuesLocator));

			for (WebElement input : inputValuesElements) {
				actual.add(input.getAttribute("title"));
			}

			if (expected.equals(actual)) {
				reportLogger.info("Transfers input and it's values validated successfully");
				test_steps.add("Transfers input and it's values validated successfully");
			} else {
				reportLogger.info("Transfers input validation failed");
				test_steps.add("Transfers input validation failed");
			}
		} catch (Exception e) {
			reportLogger.info("Transfers input validation failed");
			test_steps.add("AssertionError - Transfers input validation failed");
		} catch (Error e) {
			reportLogger.info("Transfers input validation failed");
			test_steps.add("AssertionError - Transfers input validation failed");
		}
		closePopupSelectInputs(driver, test_steps);

	}

	// This method is to validate Advance deposit input
	public void validateAdvanceDepositAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		String selectInputLocator = "//span[contains(text(),'Advanced Deposit')]//parent::button";

		try {
			Wait.waitForElementToBeVisibile(By.xpath(selectInputLocator), driver, 15);
			reportLogger.info("Advanced Deposit input is available on Ledger Balances page");
			test_steps.add("Advanced Deposit input is available on Ledger Balances page");

		} catch (Exception e) {
			reportLogger.info("Advanced Deposit input is not available on Ledger Balances page");
			test_steps.add("AssertionError - Advanced Deposit input is not available on Ledger Balances page");
			// test_steps.add(e.toString());
		}

	}

	// This method is to validate Select Inputs order in Multiselect model popup
	public void validateSeletInputsOrder(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {

		//String strType = "//*[contains(@class, 'MultiSelectControls_disabled_31Mff')][1]"; // "//*[contains(@class,
																						// 'MultiSelectControls_underLine')]"
		//String strType = "//*[contains(@class, 'MultiSelectControls_checkBoxButton')]//child::span[2]//preceding-sibling::span";
		String strType = "//*[contains(@class, 'MultiSelectControls_checkBoxButton')]//child::span";
		String strCategories = "//li[contains(@role,'menuitem') and contains(text(),'All Categories')]//following::li";
		ArrayList<String> allTypes = new ArrayList<>();
		ArrayList<String> allCategories = new ArrayList<>();

		Elements_Reports report = new Elements_Reports(driver);

		try {

			List<WebElement> types = driver.findElements(By.xpath(strType));

			/*
			 * for (int i = 0; i < types.size(); i++) { if (i % 2 == 0) {
			 * allTypes.add(types.get(i).getText()); } }
			 * 
			 * for (int i = 0; i < types.size(); i++) { if (i % 2 == 1) {
			 * allTypes.add(types.get(i).getText()); } }
			 */

			for (int i = 0; i < types.size(); i++) {
				allTypes.add(types.get(i).getText());
			}

			reportLogger.info("All types: " + allTypes);

			report.selectIncidentals.click();
			Wait.wait1Second();
			List<WebElement> categories = driver.findElements(By.xpath(strCategories));
			reportLogger.info("All Categories size: " + categories.size());
			reportLogger.info("All Categories : " + categories);
			for (int i = 0; i < categories.size(); i++) {
				allCategories.add(categories.get(i).getText());
			}
			reportLogger.info("All Categories: " + allCategories);
			closePopupSelectInputs(driver, test_steps);

			if (allTypes.equals(allCategories)) {
				reportLogger.info("Success - Select inputs order is same as the order in Multiselect model popup");
				test_steps.add("Success - Select inputs order is same as the order in Multiselect model popup");
			} else {
				reportLogger.info("Failed - Select inputs order is not same as the order in Multiselect model popup");
				test_steps.add(
						"AssertionError Failed - Select inputs order is not same as the order in Multiselect model popup. <br>"
								+ "Expected: " + allTypes + " But found: " + allCategories);
			}

		} catch (Exception e) {
			test_steps.add(e.toString());
			reportLogger.info(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

	}

	// This method is to expand given advanced options
	public void expandGivenAdvancedOptions(WebDriver driver, String option, ArrayList<String> test_steps)
			throws InterruptedException {

		String strOption = "//*[text()='" + option + "']";

		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.AdvancedInputs);

		WebElement advancedOption = driver.findElement(By.xpath(strOption));
		// Utility.ScrollToElement(advancedOption, driver);
		Utility.clickThroughAction(driver, advancedOption);
		Wait.wait3Second();

	}

	// This method is to get all users list from Include Data form
	public ArrayList<String> getUsersListFromIncludeDataForm(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		String strUsers = "//div[@id='users_list']//following-sibling::div//div//div//div/div/div";
		// String struser = "//input[@id='users']";

		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.AdvancedInputs);
		ArrayList<String> usersList = new ArrayList<>();

		WebElement user = driver.findElement(By.xpath("//input[@id='users']"));
		// driver.findElement(By.xpath("//input[@id='users']")).click();
		// user.click();
		Utility.clickThroughAction(driver, user);
		Wait.wait2Second();

		List<WebElement> users = driver.findElements(By.xpath(strUsers));

		for (int i = 1; i < users.size(); i++) {
			Utility.ScrollToElement(users.get(i), driver);
			Wait.wait1Second();
			usersList.add(users.get(i).getText());
		}
		// driver.findElement(By.xpath("//input[@id='users']")).click();
		Wait.wait1Second();
		Utility.clickThroughAction(driver, user);
		return usersList;
	}

	// This method is select user from Include Data form
	public void selectUserFromIncludeDataForm(WebDriver driver, String userName, ArrayList<String> test_steps)
			throws InterruptedException {

		String strUsers = "//div[@id='users_list']//following-sibling::div//div//div//div/div";
		// String struser = "//input[@id='users']";

		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.AdvancedInputs);
		ArrayList<String> usersList = new ArrayList<>();

		WebElement user = driver.findElement(By.xpath("//input[@id='users']"));
		// driver.findElement(By.xpath("//input[@id='users']")).click();
		// user.click();
		try {
			Utility.clickThroughAction(driver, user);
		}catch(Exception e) {
			Utility.clickThroughJavaScript(driver, user);
		}
		Wait.wait2Second();

		List<WebElement> users = driver.findElements(By.xpath(strUsers));

		if (!userName.isEmpty()) {
			for (int i = 1; i < users.size(); i++) {
				// Utility.ScrollToElement(users.get(i), driver);
				// Wait.wait1Second();
				if (users.get(i).getText().equalsIgnoreCase(userName)) {
					users.get(i).click();
					break;
				}
			}
		}

	}

	// This method is to validate Include data Form Collapse text
	public void validateIncludeDataFormCollapseText(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		String text = "//*[text()='Include Data From']/../following-sibling::div//div[contains(@class,'textOverflow')]";

		Elements_Reports report = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.AdvancedInputs);
		String startDate = null, endDate = null, expected = null, actual = null;

		try {
			Wait.wait3Second();
			Utility.clickThroughAction(driver, report.IncludeDataFrom);
			// expandGivenAdvancedOptions(driver, "Include Data From", test_steps);
			// Wait.wait1Second();
			selectUserFromIncludeDataForm(driver, "All Users", test_steps);
			// expandGivenAdvancedOptions(driver, "Include Data From", test_steps);
			Wait.wait1Second();
			Utility.clickThroughAction(driver, report.buttonShiftTime);

			selectShiftTimeStart(driver, "05", "08", "AM", test_steps);
			selectShiftTimeEnd(driver, "07", "10", "AM", test_steps);

			startDate = report.inputStartShiftTime.getAttribute("value");
			endDate = report.inputEndShiftTime.getAttribute("value");

			Wait.wait1Second();
			Utility.clickThroughAction(driver, report.IncludeDataFrom);
			expected = "All Users | 05:08 to 07:10";
			actual = driver.findElement(By.xpath(text)).getText();

			if (expected.equalsIgnoreCase(actual)) {
				reportLogger.info("Include Data From collapse text successfully validated");
				test_steps.add("Include Data From collapse text successfully validated");
			} else {
				reportLogger.info("Failed - Include Data From collapse text validation failed");
				Assert.assertTrue(false, "Failed - Include Data From collapse text validation failed");
			}

			try {
				Wait.wait3Second();
				Utility.clickThroughAction(driver, report.IncludeDataFrom);
				Wait.wait2Second();
				Utility.clickThroughAction(driver, report.buttonShiftTime);
				Wait.wait2Second();
				Utility.clickThroughAction(driver, report.IncludeDataFrom);

				expected = "All Users | 00:00 to 00:00";
				actual = driver.findElement(By.xpath(text)).getText();

				if (expected.equalsIgnoreCase(actual)) {
					reportLogger
							.info("Include Data From Shift time back to default 00:00 after unckeck the Shift time");
					test_steps.add("Include Data From Shift time back to default 00:00 after unckeck the Shift time");
				} else {
					reportLogger.info(
							"Failed - Include Data From Shift time not back to 00:00 after uncheck the Shift time");
					Assert.assertTrue(false,
							"Failed - Include Data From Shift time not back to 00:00 after uncheck the Shift time");
				}

			} catch (Exception e) {
				test_steps.add("AssertionError " + e.toString());
			} catch (Error e) {
				test_steps.add(e.toString());
			}

		} catch (Exception e) {
			test_steps.add("AssertionError " + e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

	}

	// This method is to get all Properties list from Include Data form
	public ArrayList<String> getPropertiesListFromIncludeDataForm(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		String strProperties = "//div[@id='properties_list']//following-sibling::div//div//div//div/div";

		Elements_Reports res = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.AdvancedInputs);
		ArrayList<String> propertiesList = new ArrayList<>();

		Wait.wait1Second();
		driver.findElement(By.xpath("//input[@id='properties']")).click();
		Wait.wait2Second();

		List<WebElement> properties = driver.findElements(By.xpath(strProperties));

		for (int i = 1; i < properties.size(); i++) {
			propertiesList.add(properties.get(i).getText());
		}
		driver.findElement(By.xpath("//input[@id='properties']")).click();
		return propertiesList;
	}

	// This method is to validate Users availability in Include Data form
	public void validateIncludeDataFormUsersAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.Users);
			// Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.Users), driver);
			reportLogger.info("Users available under Include Data form in Ledger Balances Repost page");
			test_steps.add("Users available under Include Data form in Ledger Balances Repost page");
		} catch (Exception e) {
			reportLogger.info("Users not available under Include Data form in Ledger Balances Repost page");
			test_steps.add("Users not available under Include Data form in Ledger Balances Repost page");
			Assert.assertTrue(false, "Users not available under Include Data form in Ledger Balances Repost page");
		}
	}

	// This method is to validate Properties availability in Include Data form
	public void validateIncludeDataFormPropertiesAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.Properties);
			// Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.Properties), driver);
			reportLogger.info("Properties available under Include Data form in Ledger Balances Repost page");
			test_steps.add("Properties available under Include Data form in Ledger Balances Repost page");
		} catch (Exception e) {
			reportLogger.info("Properties not available under Include Data form in Ledger Balances Repost page");
			test_steps.add("Properties not available under Include Data form in Ledger Balances Repost page");
			Assert.assertTrue(false, "Properties not available under Include Data form in Ledger Balances Repost page");
		}
	}

	// This method is to validate Shift Time availability in Include Data form
	public void validateIncludeDataFormShiftTimeAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.ShiftTime);
			// Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.ShiftTime), driver);
			reportLogger.info("Shift Time available under Include Data form in Ledger Balances Repost page");
			test_steps.add("Shift Time available under Include Data form in Ledger Balances Repost page");
		} catch (Exception e) {
			reportLogger.info("Shift Time not available under Include Data form in Ledger Balances Repost page");
			test_steps.add("Shift Time not available under Include Data form in Ledger Balances Repost page");
			Assert.assertTrue(false, "Shift Time not available under Include Data form in Ledger Balances Repost page");
		}
	}

	// This method is to select Shift Time Start
	public void clickShifTime(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.buttonShiftTime), driver);
		// report.buttonShiftTime.click();
		Utility.clickThroughAction(driver, report.buttonShiftTime);

	}

	// This method is to select Shift Time Start
	public void selectShiftTimeStart(WebDriver driver, String hours, String minutes, String AMorPm,
			ArrayList<String> test_steps) throws InterruptedException {
		String strHours = "(//ul[@class='ant-picker-time-panel-column'])[1]/li/div";
		String strMinutes = "(//ul[@class='ant-picker-time-panel-column'])[2]/li/div";
		String strAMPM = "(//ul[@class='ant-picker-time-panel-column'])[3]/li/div";

		String strHours1 = "((//ul[@class='ant-picker-time-panel-column'])[1]/li/div)[" + (Integer.parseInt(hours) + 1)
				+ "]";
		String strMinutes1 = "((//ul[@class='ant-picker-time-panel-column'])[2]/li/div)["
				+ (Integer.parseInt(minutes) + 1) + "]";

		Elements_Reports report = new Elements_Reports(driver);

		report.inputStartShiftTime.click();

		// Utility.ScrollToElement(driver.findElement(By.xpath("((//ul[@class='ant-picker-time-panel-column'])[1]/li/div)[12]")),
		// driver);
		// Utility.ScrollToElement(driver.findElement(By.xpath("((//ul[@class='ant-picker-time-panel-column'])[2]/li/div)[60]")),
		// driver);

		List<WebElement> hoursList = driver.findElements(By.xpath(strHours));
		List<WebElement> minutesList = driver.findElements(By.xpath(strMinutes));
		List<WebElement> AMorPMList = driver.findElements(By.xpath(strAMPM));

		/*
		 * reportLogger.info("Hours: "+hoursList.size()); for (int i = 0; i <
		 * hoursList.size(); i++) { reportLogger.info(hoursList.get(i).getText()); }
		 * 
		 * reportLogger.info("Minutes: "+minutesList.size()); for (int i = 0; i <
		 * minutesList.size(); i++) { reportLogger.info(minutesList.get(i).getText()); }
		 */

		/*
		 * for (int i = 0; i < hoursList.size(); i++) { if
		 * (hoursList.get(i).getText().equalsIgnoreCase(hours)) {
		 * hoursList.get(i).click(); break; } }
		 * 
		 * for (int i = 0; i < minutesList.size(); i++) { if
		 * (minutesList.get(i).getText().equalsIgnoreCase(minutes)) {
		 * minutesList.get(i).click(); break; } }
		 */
		Utility.ScrollToElement(driver.findElement(By.xpath(strHours1)), driver);
		Utility.clickThroughAction(driver, driver.findElement(By.xpath(strHours1)));
		// driver.findElement(By.xpath(strHours1)).click();

		Utility.ScrollToElement(driver.findElement(By.xpath(strMinutes1)), driver);
		Utility.clickThroughJavaScript(driver, driver.findElement(By.xpath(strMinutes1)));

		for (int i = 0; i < AMorPMList.size(); i++) {
			if (AMorPMList.get(i).getText().equalsIgnoreCase(AMorPm)) {
				AMorPMList.get(i).click();
				break;
			}
		}

		Wait.waitForElementToBeClickable(By.xpath(OR_Reports.buttonOkShiftTimeStart), driver);
		report.buttonOkShiftTimeStart.click();

		Wait.wait10Second();

	}

	// This method is to select Shift Time End
	public void selectShiftTimeEnd(WebDriver driver, String hours, String minutes, String AMorPm,
			ArrayList<String> test_steps) throws InterruptedException {
		String strHours = "(//ul[@class='ant-picker-time-panel-column'])[4]/li/div";
		String strMinutes = "(//ul[@class='ant-picker-time-panel-column'])[5]/li/div";
		String strAMPM = "(//ul[@class='ant-picker-time-panel-column'])[6]/li/div";

		String strHours1 = "((//ul[@class='ant-picker-time-panel-column'])[4]/li/div)[" + (Integer.parseInt(hours) + 1)
				+ "]";
		String strMinutes1 = "((//ul[@class='ant-picker-time-panel-column'])[5]/li/div)["
				+ (Integer.parseInt(minutes) + 1) + "]";

		Elements_Reports report = new Elements_Reports(driver);

		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.inputEndShiftTime), driver);
		Utility.ScrollToElement(report.IncludeDataFrom, driver);
		report.inputEndShiftTime.click();

		List<WebElement> hoursList = driver.findElements(By.xpath(strHours));
		List<WebElement> minutesList = driver.findElements(By.xpath(strMinutes));
		List<WebElement> AMorPMList = driver.findElements(By.xpath(strAMPM));

		/*
		 * for (int i = 0; i < hoursList.size(); i++) { if
		 * (hoursList.get(i).getText().equalsIgnoreCase(hours)) {
		 * hoursList.get(i).click(); break; } }
		 * 
		 * for (int i = 0; i < minutesList.size(); i++) { if
		 * (minutesList.get(i).getText().equalsIgnoreCase(minutes)) {
		 * minutesList.get(i).click(); break; } }
		 */

		Utility.ScrollToElement(driver.findElement(By.xpath(strHours1)), driver);
		driver.findElement(By.xpath(strHours1)).click();

		Utility.ScrollToElement(driver.findElement(By.xpath(strMinutes1)), driver);
		driver.findElement(By.xpath(strMinutes1)).click();

		for (int i = 0; i < AMorPMList.size(); i++) {
			if (AMorPMList.get(i).getText().equalsIgnoreCase(AMorPm)) {
				AMorPMList.get(i).click();
				break;
			}
		}

		Wait.waitForElementToBeClickable(By.xpath(OR_Reports.buttonOkShiftTimeEnd), driver);
		report.buttonOkShiftTimeEnd.click();

	}

	// This method is to select Now Shift Time start
	public void selectNowShiftTimeStart(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.inputStartShiftTime), driver);
		// Utility.ScrollToElement(report.inputStartShiftTime, driver);
		Utility.ScrollToElement(report.IncludeDataFrom, driver);
		report.inputStartShiftTime.click();
		report.buttonNowShiftTimeStart.click();
	}

	// This method is to select Now Shift Time End
	public void selectNowShiftTimeEnd(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.inputEndShiftTime), driver);
		// Utility.ScrollToElement(report.inputEndShiftTime, driver);
		Utility.ScrollToElement(report.IncludeDataFrom, driver);
		report.inputEndShiftTime.click();
		report.buttonNowShiftTimeEnd.click();
	}

	// This method is to validate Shift Time Start
	public void validateShiftTimeStart(WebDriver driver, String hours, String minutes, String AMorPm,
			ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);

		selectShiftTimeStart(driver, hours, minutes, AMorPm, test_steps);

		try {
			if (AMorPm.equalsIgnoreCase("PM")) {
				if (report.inputStartShiftTime.getAttribute("value")
						.equalsIgnoreCase(Integer.parseInt(hours) + 12 + ":" + minutes)) {
					reportLogger.info("Shift Time - Start time successfully validated");
					test_steps.add("Shift Time - Start time successfully validated");
				} else {
					reportLogger.info("Shift Time - Start time validation failed " + "Expected: "
							+ (Integer.parseInt(hours) + 12) + ":" + minutes + " But found: "
							+ report.inputStartShiftTime.getAttribute("value"));
					test_steps.add("Shift Time - Start time validation failed " + "Expected: " + Integer.parseInt(hours)
							+ 12 + ":" + minutes + " But found: " + report.inputStartShiftTime.getAttribute("value"));
					Assert.assertTrue(false,
							"Shift Time - Start time validation failed " + "Expected: " + Integer.parseInt(hours) + 12
									+ ":" + minutes + " But found: "
									+ report.inputStartShiftTime.getAttribute("value"));
				}
			} else {
				if (report.inputStartShiftTime.getAttribute("value").equalsIgnoreCase(hours + ":" + minutes)) {
					reportLogger.info("Shift Time - Start time successfully validated");
					test_steps.add("Shift Time - Start time successfully validated");
				} else {
					reportLogger.info("Shift Time - Start time validation failed " + "Expected: " + hours + ":"
							+ minutes + " But found: " + report.inputStartShiftTime.getAttribute("value"));
					test_steps.add("Shift Time - Start time validation failed " + "Expected: " + hours + ":" + minutes
							+ " But found: " + report.inputStartShiftTime.getAttribute("value"));
					Assert.assertTrue(false, "Shift Time - Start time validation failed " + "Expected: " + hours + ":"
							+ minutes + " But found: " + report.inputStartShiftTime.getAttribute("value"));
				}
			}
		} catch (Exception e) {
			test_steps.add("AssertionError: Shift Time - Start time validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Shift Time - Start time validation failed");
		}

	}

	// This method is to validate Shift Time Start - Now
	public void validateNowShiftTimeStart(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());

		selectNowShiftTimeStart(driver, test_steps);

		try {
			if (report.inputStartShiftTime.getAttribute("value")
					.equalsIgnoreCase(cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE))) {
				reportLogger.info("Shift Time - Now - Start time successfully validated");
				test_steps.add("Shift Time - Now - Start time successfully validated");
			} else {
				reportLogger.info("Shift Time - Now - Start time validation failed " + "Expected: "
						+ cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE) + " But found: "
						+ report.inputStartShiftTime.getAttribute("value"));
				test_steps.add("Shift Time - Now - Start time validation failed " + "Expected: "
						+ cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE) + " But found: "
						+ report.inputStartShiftTime.getAttribute("value"));
				Assert.assertTrue(false,
						"Shift Time - Now - Start time validation failed " + "Expected: "
								+ cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE) + " But found: "
								+ report.inputStartShiftTime.getAttribute("value"));
			}
		} catch (Exception e) {
			test_steps.add("AssertionError: Shift Time - Now - Start time validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Shift Time - Now - Start time validation failed");
		}
	}

	// This method is to validate Shift Time End
	public void validateShiftTimeEnd(WebDriver driver, String hours, String minutes, String AMorPm,
			ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);

		selectShiftTimeEnd(driver, hours, minutes, AMorPm, test_steps);

		try {
			if (AMorPm.equalsIgnoreCase("PM")) {
				if (report.inputEndShiftTime.getAttribute("value")
						.equalsIgnoreCase(Integer.parseInt(hours) + 12 + ":" + minutes)) {
					reportLogger.info("Shift Time - End time successfully validated");
					test_steps.add("Shift Time - End time successfully validated");
				} else {
					reportLogger.info(
							"Shift Time - End time validation failed " + "Expected: " + Integer.parseInt(hours) + 12
									+ ":" + minutes + " But found: " + report.inputEndShiftTime.getAttribute("value"));
					test_steps.add("Shift Time - End time validation failed " + "Expected: " + Integer.parseInt(hours)
							+ 12 + ":" + minutes + " But found: " + report.inputEndShiftTime.getAttribute("value"));
					Assert.assertTrue(false,
							"Shift Time - End time validation failed " + "Expected: " + Integer.parseInt(hours) + 12
									+ ":" + minutes + " But found: " + report.inputEndShiftTime.getAttribute("value"));
				}
			} else {
				if (report.inputEndShiftTime.getAttribute("value").equalsIgnoreCase(hours + ":" + minutes)) {
					reportLogger.info("Shift Time - End time successfully validated");
					test_steps.add("Shift Time - End time successfully validated");
				} else {
					reportLogger.info("Shift Time - End time validation failed " + "Expected: " + hours + ":" + minutes
							+ " But found: " + report.inputEndShiftTime.getAttribute("value"));
					test_steps.add("Shift Time - End time validation failed " + "Expected: " + hours + ":" + minutes
							+ " But found: " + report.inputEndShiftTime.getAttribute("value"));
					Assert.assertTrue(false, "Shift Time - End time validation failed " + "Expected: " + hours + ":"
							+ minutes + " But found: " + report.inputEndShiftTime.getAttribute("value"));
				}
			}
		} catch (Exception e) {
			test_steps.add("AssertionError: Shift Time - End time validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Shift Time - End time validation failed");
		}

	}

	// This method is to validate Shift Time End - Now
	public void validateNowShiftTimeEnd(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());

		selectNowShiftTimeEnd(driver, test_steps);

		try {
			if (report.inputEndShiftTime.getAttribute("value")
					.equalsIgnoreCase(cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE))) {
				reportLogger.info("Shift Time - Now - End time successfully validated");
				test_steps.add("Shift Time - Now - End time successfully validated");
			} else {
				reportLogger.info("Shift Time - Now - End time validation failed " + "Expected: "
						+ cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE) + " But found: "
						+ report.inputEndShiftTime.getAttribute("value"));
				test_steps.add("Shift Time - Now - End time validation failed " + "Expected: "
						+ cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE) + " But found: "
						+ report.inputEndShiftTime.getAttribute("value"));
				Assert.assertTrue(false,
						"Shift Time - Now - End time validation failed " + "Expected: " + cal.get(Calendar.HOUR_OF_DAY)
								+ ":" + cal.get(Calendar.MINUTE) + " But found: "
								+ report.inputEndShiftTime.getAttribute("value"));
			}
		} catch (Exception e) {
			test_steps.add("AssertionError: Shift Time - Now - End time validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Shift Time - Now - End time validation failed");
		}
	}

	// This method is to logout from ReportsV2
	public void logout(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {

		String CurrentUser = "//span[@class='ant-avatar-string']";
		String Logout = "//a[text()='Logout']";

		Elements_Users user = new Elements_Users(driver);
		Wait.waitForElementToBeClickable(By.xpath(CurrentUser), driver);
		driver.findElement(By.xpath(CurrentUser)).click();
		try {
			Wait.waitForElementToBeClickable(By.xpath(Logout), driver, 10);
			driver.findElement(By.xpath(Logout)).click();
		} catch (Exception e) {
			Wait.waitForElementToBeClickable(By.xpath(OR.logoutLink), driver, 10);
			user.logoutLink.click();
		}
		Wait.waitForElementToBeVisibile(By.xpath(OR.LoginPage), driver);
	}

	// Ledger Balances - Choose Date Range

	// This method is to validate Choose Date Range availability - Ledger Balances Report
	public boolean validateChooseDateRangeAvailabilityLBR(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		boolean flag = false;
		try {
			Wait.WaitForElement(driver, OR_Reports.txtChooseDateRange);
			reportLogger.info("Success - Choose Date Range is available in Ledger Balances Report page");
			test_steps.add("Success - Choose Date Range is available in Ledger Balances Report page");
			flag = true;
		} catch (Exception e) {
			reportLogger.info("Failed - Choose Date Range is not available in Ledger Balances Report page");
			test_steps.add("AssertionError Failed - Choose Date Range is not available in Ledger Balances Report page");
			flag = false;
		}
		
		return flag;
	}
	
	// This method is to select Date range
	public void selectDateRange(WebDriver driver, String dateOption, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.effectiveDateDropdown);
		Utility.ScrollToViewElementINMiddle(driver, report.effectiveDateDropdown);
		report.effectiveDateDropdown.click();
		test_steps.add("Click Day drop down box");
		reportLogger.info("Click Day drop down box");
		Wait.wait2Second();
		try {
		String path="//div[@class='ant-select-item-option-content' and text()='"+dateOption+"']";
		driver.findElement(By.xpath(path)).click();}
		catch(Exception e) {
			String path="//div[@class='ant-select-item-option-content' and text()='"+dateOption+"']";
			driver.findElement(By.xpath(path)).click();
		}
		Wait.wait1Second();
		test_steps.add("Selected date range as : <b>"+dateOption+"</b>");
		reportLogger.info("Selected date range as : <b>"+dateOption+"</b>");
	}

	// This method is to return Start date
	public void startDate(WebDriver driver, String dateOption, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);

		Wait.WaitForElement(driver, OR_Reports.dateStart);
		report.dateStart.click();
		List<WebElement> startDateOption = driver.findElements(By.xpath(OR_Reports.dateOptions));

		for (int i = 0; i < startDateOption.size(); i++) {
			if (dateOption.equalsIgnoreCase(startDateOption.get(i).getText())) {
				startDateOption.get(i).click();
				break;
			}
		}
	}

	// This method is to return Start date
	public String getStartDate(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);

		String sdate = report.dateStart.getAttribute("value");

		return sdate;
	}

	/*
	 * //This method is to return End date public void endDate(WebDriver driver,
	 * String dateOption, ArrayList<String> test_steps) throws InterruptedException,
	 * ParseException {
	 * 
	 * Elements_Reports report = new Elements_Reports(driver);
	 * 
	 * Wait.WaitForElement(driver, OR_Reports.dateEnd); report.dateEnd.click();
	 * List<WebElement> startDateOption =
	 * driver.findElements(By.xpath(OR_Reports.dateOptions));
	 * 
	 * for (int i = 0; i < startDateOption.size(); i++) { if
	 * (dateOption.equalsIgnoreCase(startDateOption.get(i).getText())) {
	 * startDateOption.get(i).click(); break; } } }
	 */

	// This method is to return End date
	public String getEndDate(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);

		// endDate(driver, dateOption, test_steps);

		String sdate = report.dateEnd.getAttribute("value");
		// Date date = new SimpleDateFormat("dd/MM/yyyy").parse(sdate);
		return sdate;
	}

	// This method is to validate Date range
	public void validateAllDateRanges(WebDriver driver, String startDayOfWeek, String timeZone, String dateFormat, String dFormat, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		
		//String dateFormat = "dd MMM, YYYY";
		
		SimpleDateFormat format = new SimpleDateFormat(dateFormat);
		// format.setTimeZone(TimeZone.getTimeZone("US/Eastern"));
		// Calendar cal = Calendar.getInstance();

		try {
			selectDateRange(driver, "Today", test_steps);
			if (format.format(new Date(report.dateStart.getAttribute("value")))
					.equalsIgnoreCase(Utility.getCurrentDate(dateFormat, timeZone))
					&& format.format(new Date(report.dateEnd.getAttribute("value")))
							.equalsIgnoreCase(Utility.getCurrentDate(dateFormat, timeZone))) {
				reportLogger.info("Today date selection validated successfuly");
				test_steps.add("Today date selection validated successfuly");
			} else {
				reportLogger.info("Failed - Today date selection validation failed. Expected Start Date: "
						+ Utility.getCurrentDate(dateFormat, timeZone) + " But found: "
						+ report.dateStart.getAttribute("value") + " and Expected End date: "
						+ Utility.getCurrentDate(dateFormat, timeZone) + " But found: "
						+ report.dateEnd.getAttribute("value"));
				test_steps.add("Failed - Today date selection validation failed. Expected Start Date: "
						+ Utility.getCurrentDate(dateFormat, timeZone) + " But found: "
						+ report.dateStart.getAttribute("value") + " and Expected End date: "
						+ Utility.getCurrentDate(dateFormat, timeZone) + " But found: "
						+ report.dateEnd.getAttribute("value"));
				Assert.assertTrue(false, "");
			}
		} catch (Exception e) {
			test_steps.add("AssertionError: Today date selection validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Today date selection validation failed");
		}

    	try {
    		selectDateRange(driver, "Last Month", test_steps);
    		//startDate(driver, "Last Month", test_steps);
    		Calendar lastMonth = Calendar.getInstance();
    		lastMonth.add(Calendar.MONTH, -1);
    		
    		//Date lastMonthFirst = new Date(cal.get(Calendar.MONTH) + "/" + cal.getActualMinimum(Calendar.DATE) + "/" + cal.get(Calendar.YEAR));
    		//Date lastMonthLast = new Date(cal.get(Calendar.MONTH) + "/" + cal.getActualMinimum(Calendar.DATE) + "/" + cal.get(Calendar.YEAR));
    		String lastMonthFirst = format.format(new Date((lastMonth.get(Calendar.MONTH)+1) + "/" + 01 + "/" + lastMonth.get(Calendar.YEAR)));
    		String d = (lastMonth.get(Calendar.MONTH)+1) + "/" + lastMonth.getActualMaximum(Calendar.DATE) + "/" + lastMonth.get(Calendar.YEAR);
    		String lastMonthLast = new SimpleDateFormat(dateFormat).format(new Date(d));
    		
    		if (format.format(new Date(report.dateStart.getAttribute("value"))).equalsIgnoreCase(lastMonthFirst) &&
    				report.dateEnd.getAttribute("value").equalsIgnoreCase(lastMonthLast)) {
    				reportLogger.info("Last Month date selection validated successfuly");
    				test_steps.add("Last Month date selection validated successfuly");
			}else {
				reportLogger.info("Failed - Last Month date selection validation failed. Expected Start Date: "+lastMonthFirst
									+" But found: "+report.dateStart.getAttribute("value")+" and Expected End date: "+lastMonthLast+" But found: "+report.dateEnd.getAttribute("value"));
				test_steps.add("Failed - Last Month date selection validation failed. Expected Start Date: "+lastMonthFirst
									+" But found: "+report.dateStart.getAttribute("value")+" and Expected End date: "+lastMonthLast+" But found: "+report.dateEnd.getAttribute("value"));
				Assert.assertTrue(false, "");
			}
    		
		} catch (Exception e) {
			test_steps.add("AssertionError: Last Month date selection validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Last Month date selection validation failed");
		}
    	
    	try {
    		
    		selectDateRange(driver, "Month To Date", test_steps);
    		Calendar monthToDate = Calendar.getInstance();
    		monthToDate.add(Calendar.MONTH, +1);
    		//Date dd = new Date(monthToDate.get(Calendar.MONTH) + "/"+1+"/" + monthToDate.get(Calendar.YEAR));
    		Date dd = new Date("06/01/2021");
    		String start = format.format(dd);
    		//String end = format.format(new Date(cal.get(Calendar.MONTH) + "/" + cal.getActualMinimum(Calendar.DATE) + "/" + cal.get(Calendar.YEAR)));
    		//cal.add(Calendar.MONTH, -1);
    		
        	if (format.format(new Date(report.dateStart.getAttribute("value"))).equalsIgnoreCase("Jun 01, 2021") && 
        			report.dateEnd.getAttribute("value").equalsIgnoreCase(Utility.getCurrentDate(dateFormat, timeZone))) {
    				
				reportLogger.info("Month To Date date selection validated successfuly");
				test_steps.add("Month To Date date selection validated successfuly");
        		
    		} else {
				reportLogger.info("Failed - Month To Date date selection validation failed. Expected Start Date: "+start
						+" But found: "+report.dateStart.getAttribute("value")+" and Expected End date: "+Utility.getCurrentDate(dateFormat, timeZone)+" But found: "+report.dateEnd.getAttribute("value"));
				test_steps.add("Failed - Month To Date date selection validation failed. Expected Start Date: "+start
						+" But found: "+report.dateStart.getAttribute("value")+" and Expected End date: "+Utility.getCurrentDate(dateFormat, timeZone)+" But found: "+report.dateEnd.getAttribute("value"));
    			Assert.assertTrue(false, "");
    		}
		} catch (Exception e) {
			test_steps.add("AssertionError "+e.toString());
			reportLogger.info("AssertionError "+e.toString());
		} catch (Error e) {
			test_steps.add("AssertionError "+e.toString());
			reportLogger.info("AssertionError "+e.toString());
		}
    	
    	try {
    		selectDateRange(driver, "Year To Date", test_steps);
    		//startDate(driver, "Year To Date", test_steps);
    		Calendar yearToDate = Calendar.getInstance();
    		
    		String startYear = format.format(new Date(1 + "/" + 1 + "/" + yearToDate.get(Calendar.YEAR)));

    		
        	if (format.format(new Date(report.dateStart.getAttribute("value"))).equalsIgnoreCase(startYear) && 
        			report.dateEnd.getAttribute("value").equalsIgnoreCase(Utility.getCurrentDate(dateFormat))) {
    				reportLogger.info("Year To Date date selection validated successfuly");
    				test_steps.add("Year To Date date selection validated successfuly");
    		} else {
				reportLogger.info("Failed - Year To Date date selection validation failed. Expected Start Date: "+startYear
						+" But found: "+report.dateStart.getAttribute("value")+" and Expected End date: "+Utility.getCurrentDate(dateFormat, timeZone)+" But found: "+report.dateEnd.getAttribute("value"));
				test_steps.add("Failed - Year To Date date selection validation failed. Expected Start Date: "+startYear
						+" But found: "+report.dateStart.getAttribute("value")+" and Expected End date: "+Utility.getCurrentDate(dateFormat, timeZone)+" But found: "+report.dateEnd.getAttribute("value"));
    			Assert.assertTrue(false, "");
    		}
		} catch (Exception e) {
			test_steps.add("AssertionError: Year To Date date selection validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Year To Date date selection validation failed");
		}

		try {
			selectDateRange(driver, "Last Week", test_steps);
			//int dayFromMonday = 0;
			//int dayFromSunday = 0;
			int dayFrom = 0;
			GregorianCalendar dayBeforeThisWeek = new GregorianCalendar();
			if (startDayOfWeek.equalsIgnoreCase("Monday")) {
				//dayFromMonday = (dayBeforeThisWeek.get(Calendar.DAY_OF_WEEK) + 7 - Calendar.MONDAY) % 7;
				dayFrom = (dayBeforeThisWeek.get(Calendar.DAY_OF_WEEK) + 7 - Calendar.MONDAY) % 7;
			}else if (startDayOfWeek.equalsIgnoreCase("Sunday")) {
				dayFrom = (dayBeforeThisWeek.get(Calendar.DAY_OF_WEEK) + 7 - Calendar.SUNDAY) % 7;
			}
			
			dayBeforeThisWeek.add(Calendar.DATE, -dayFrom - 1);
			String end = new SimpleDateFormat(dateFormat).format(dayBeforeThisWeek.getTime());
			System.out.println(end);
			dayBeforeThisWeek.add(Calendar.DATE, -6);
			// String start = new SimpleDateFormat("MMM dd, YYYY").format(new
			// Date(Utility.GetNextDate(-7, end)));

			String start = new SimpleDateFormat(dateFormat).format(dayBeforeThisWeek.getTime());
			System.out.println(start);

			if (format.format(new Date(report.dateStart.getAttribute("value"))).equalsIgnoreCase(start)
					&& format.format(new Date(report.dateEnd.getAttribute("value"))).equalsIgnoreCase(end)) {
				reportLogger.info("Last Week date selection validated successfuly");
				test_steps.add("Last Week date selection validated successfuly");
			} else {
				reportLogger.info("Failed - Last Week date selection validation failed. Expected Start Date: " + start
						+ " But found: " + report.dateStart.getAttribute("value") + " and Expected End date: " + end
						+ " But found: " + report.dateEnd.getAttribute("value"));
				test_steps.add("Failed - Last Week date selection validation failed. Expected Start Date: " + start
						+ " But found: " + report.dateStart.getAttribute("value") + " and Expected End date: " + end
						+ " But found: " + report.dateEnd.getAttribute("value"));
				Assert.assertTrue(false, "");
			}
		} catch (Exception e) {
			reportLogger.info("Last Week date selection validation failed");
			test_steps.add("AssertionError: Last Week date selection validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Last Week date selection validation failed");
		}

		try {
			// startDate(driver, "Last 3 Months", test_steps);
			selectDateRange(driver, "Last 3 Months", test_steps);

			Calendar cal3Months = Calendar.getInstance();
			cal3Months.add(Calendar.MONTH, -3);
			cal3Months.set(Calendar.DATE, 1);
			Date firstDateOfLast3Months = cal3Months.getTime();

			cal3Months.add(Calendar.MONTH, 2);

			cal3Months.set(Calendar.DATE, cal3Months.getActualMaximum(Calendar.DATE)); // changed calendar to cal

			Date lastDateOfLast3Months = cal3Months.getTime();

			String expectedStartDate = format.format(firstDateOfLast3Months);
			String expectedEndDate = format.format(lastDateOfLast3Months);

			if (format.format(new Date(report.dateStart.getAttribute("value"))).equalsIgnoreCase(expectedStartDate)
					&& format.format(new Date(report.dateEnd.getAttribute("value")))
							.equalsIgnoreCase(expectedEndDate)) {
				reportLogger.info("Last 3 Months date selection validated successfuly");
				test_steps.add("Last 3 Months date selection validated successfuly");
			} else {
				reportLogger.info("Failed - Last 3 Months date selection validation failed. Expected Start Date: "
						+ expectedStartDate + " But found: "
						+ format.format(new Date(report.dateStart.getAttribute("value"))) + " and Expected End date: "
						+ expectedEndDate + " But found: "
						+ format.format(new Date(report.dateEnd.getAttribute("value"))));
				test_steps.add("Failed - Last 3 Months date selection validation failed. Expected Start Date: "
						+ expectedStartDate + " But found: "
						+ format.format(new Date(report.dateStart.getAttribute("value"))) + " and Expected End date: "
						+ expectedEndDate + " But found: "
						+ format.format(new Date(report.dateEnd.getAttribute("value"))));
				Assert.assertTrue(false);
			}
		} catch (Exception e) {
			test_steps.add("AssertionError: Last 3 Months date selection validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Last 3 Months date selection validation failed");
		}

		try {
			selectDateRange(driver, "Last Year", test_steps);
			
			String start=null, end=null;

			Calendar c = Calendar.getInstance();
			c.add(Calendar.YEAR, -1);
			int firstDate = c.getActualMinimum(Calendar.DATE);
			// cal.add(Calendar.MONTH, 1);
			int month = c.getActualMinimum(Calendar.MONTH) + 1;

			int year = c.get(Calendar.YEAR);
			String firstDay = firstDate + "/" + month + "/" + year;
			System.out.println(firstDay);

			// String start = format.format(new Date(c.getActualMinimum(Calendar.MONTH) + 1
			// + "/" + c.getActualMinimum(Calendar.DATE) + "/" + c.get(Calendar.YEAR)));
			//String start = "Jan 01, " + c.get(Calendar.YEAR);
			if (dFormat.equalsIgnoreCase("USA")) {
				start = "Jan 01, " + c.get(Calendar.YEAR);
				end = "Dec 31, " + c.get(Calendar.YEAR);
			}else if (dFormat.equalsIgnoreCase("International")) {
				start = "01 Jan, " + c.get(Calendar.YEAR);
				end = "31 Dec, " + c.get(Calendar.YEAR);
			}
			
//			String end = format.format(new Date(c.getActualMaximum(Calendar.MONTH) + 1 + "/"
//					+ (c.getActualMaximum(Calendar.DATE)+1) + "/" + c.get(Calendar.YEAR)));
			//String end = "Dec 31, " + c.get(Calendar.YEAR);
			

			if (format.format(new Date(report.dateStart.getAttribute("value"))).equalsIgnoreCase(start)
					&& report.dateEnd.getAttribute("value").equalsIgnoreCase(end)) {
				reportLogger.info("Last Year date selection validated successfuly");
				test_steps.add("Last Year date selection validated successfuly");
			} else {
				reportLogger.info("Failed - Last Year date selection validation failed. Expected Start Date: " + start
						+ " But found: " + report.dateStart.getAttribute("value") + " and Expected End date: " + end
						+ " But found: " + report.dateEnd.getAttribute("value"));
				test_steps.add("Failed - Last Year date selection validation failed. Expected Start Date: " + start
						+ " But found: " + report.dateStart.getAttribute("value") + " and Expected End date: " + end
						+ " But found: " + report.dateEnd.getAttribute("value"));
				Assert.assertTrue(false, "");
			}
		} catch (Exception e) {
			test_steps.add("AssertionError: Last Year date selection validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Last Year date selection validation failed");
		}

	}
	
	// This method is to validate Date range - Year To Date
	public boolean validateDateRangeYearToDate(WebDriver driver, String startDayOfWeek, String timeZone, String dateFormat, String dFormat, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {
		Elements_Reports report = new Elements_Reports(driver);
		SimpleDateFormat format = new SimpleDateFormat(dateFormat);
		boolean result = false;
    	try {
    		selectDateRange(driver, "Year To Date", test_steps);
    		//startDate(driver, "Year To Date", test_steps);
    		Calendar yearToDate = Calendar.getInstance();
    		String startYear = format.format(new Date(1 + "/" + 1 + "/" + yearToDate.get(Calendar.YEAR)));
    		
        	if (format.format(new Date(report.dateStart.getAttribute("value"))).equalsIgnoreCase(startYear) && 
        			report.dateEnd.getAttribute("value").equalsIgnoreCase(Utility.getCurrentDate(dateFormat))) {
    				reportLogger.info("Year To Date date selection validated successfuly");
    				test_steps.add("Year To Date date selection validated successfuly");
    				result = true;
    		} else {
				reportLogger.info("Failed - Year To Date date selection validation failed. Expected Start Date: "+startYear
						+" But found: "+report.dateStart.getAttribute("value")+" and Expected End date: "+Utility.getCurrentDate(dateFormat, timeZone)+" But found: "+report.dateEnd.getAttribute("value"));
				test_steps.add("AssertionError - Failed - Year To Date date selection validation failed. Expected Start Date: "+startYear
						+" But found: "+report.dateStart.getAttribute("value")+" and Expected End date: "+Utility.getCurrentDate(dateFormat, timeZone)+" But found: "+report.dateEnd.getAttribute("value"));
    			//Assert.assertTrue(false, "");
				result = false;
    		}
		} catch (Exception e) {
			test_steps.add("AssertionError: Year To Date date selection validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Year To Date date selection validation failed");
		}
		return result;
	}
	
	// This method is to validate Date range - Last Month
	public boolean validateDateRangeLastMonth(WebDriver driver, String startDayOfWeek, String timeZone, String dateFormat, String dFormat, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {
		Elements_Reports report = new Elements_Reports(driver);
		SimpleDateFormat format = new SimpleDateFormat(dateFormat);
		boolean result = false;
    	try {
    		selectDateRange(driver, "Last Month", test_steps);
    		//startDate(driver, "Last Month", test_steps);
    		Calendar lastMonth = Calendar.getInstance();
    		lastMonth.add(Calendar.MONTH, -1);
    		
    		//Date lastMonthFirst = new Date(cal.get(Calendar.MONTH) + "/" + cal.getActualMinimum(Calendar.DATE) + "/" + cal.get(Calendar.YEAR));
    		//Date lastMonthLast = new Date(cal.get(Calendar.MONTH) + "/" + cal.getActualMinimum(Calendar.DATE) + "/" + cal.get(Calendar.YEAR));
    		String lastMonthFirst = format.format(new Date((lastMonth.get(Calendar.MONTH)+1) + "/" + 01 + "/" + lastMonth.get(Calendar.YEAR)));
    		String d = (lastMonth.get(Calendar.MONTH)+1) + "/" + lastMonth.getActualMaximum(Calendar.DATE) + "/" + lastMonth.get(Calendar.YEAR);
    		String lastMonthLast = new SimpleDateFormat(dateFormat).format(new Date(d));
    		
    		if (format.format(new Date(report.dateStart.getAttribute("value"))).equalsIgnoreCase(lastMonthFirst) &&
    				report.dateEnd.getAttribute("value").equalsIgnoreCase(lastMonthLast)) {
    				reportLogger.info("Last Month date selection validated successfuly");
    				test_steps.add("Last Month date selection validated successfuly");
    				result = true;
			}else {
				reportLogger.info("Failed - Last Month date selection validation failed. Expected Start Date: "+lastMonthFirst
									+" But found: "+report.dateStart.getAttribute("value")+" and Expected End date: "+lastMonthLast+" But found: "+report.dateEnd.getAttribute("value"));
				test_steps.add("AssertionError - Failed - Last Month date selection validation failed. Expected Start Date: "+lastMonthFirst
									+" But found: "+report.dateStart.getAttribute("value")+" and Expected End date: "+lastMonthLast+" But found: "+report.dateEnd.getAttribute("value"));
				//Assert.assertTrue(false, "");
				result = false;
			}
    		
		} catch (Exception e) {
			test_steps.add("AssertionError: Last Month date selection validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Last Month date selection validation failed");
		}
		return result;
	}
	
	// This method is to validate Date range - Last Year
	public boolean validateDateRangeLastYear(WebDriver driver, String startDayOfWeek, String timeZone, String dateFormat, String dFormat, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {
		Elements_Reports report = new Elements_Reports(driver);
		SimpleDateFormat format = new SimpleDateFormat(dateFormat);
		boolean result = false;
		try {
			selectDateRange(driver, "Last Year", test_steps);
			
			String start=null, end=null;

			Calendar c = Calendar.getInstance();
			c.add(Calendar.YEAR, -1);
			int firstDate = c.getActualMinimum(Calendar.DATE);
			// cal.add(Calendar.MONTH, 1);
			int month = c.getActualMinimum(Calendar.MONTH) + 1;

			int year = c.get(Calendar.YEAR);
			String firstDay = firstDate + "/" + month + "/" + year;
			System.out.println(firstDay);

			// String start = format.format(new Date(c.getActualMinimum(Calendar.MONTH) + 1
			// + "/" + c.getActualMinimum(Calendar.DATE) + "/" + c.get(Calendar.YEAR)));
			//String start = "Jan 01, " + c.get(Calendar.YEAR);
			if (dFormat.equalsIgnoreCase("USA")) {
				start = "Jan 01, " + c.get(Calendar.YEAR);
				end = "Dec 31, " + c.get(Calendar.YEAR);
			}else if (dFormat.equalsIgnoreCase("International")) {
				start = "01 Jan, " + c.get(Calendar.YEAR);
				end = "31 Dec, " + c.get(Calendar.YEAR);
			}
			
//			String end = format.format(new Date(c.getActualMaximum(Calendar.MONTH) + 1 + "/"
//					+ (c.getActualMaximum(Calendar.DATE)+1) + "/" + c.get(Calendar.YEAR)));
			//String end = "Dec 31, " + c.get(Calendar.YEAR);
			

			if (format.format(new Date(report.dateStart.getAttribute("value"))).equalsIgnoreCase(start)
					&& report.dateEnd.getAttribute("value").equalsIgnoreCase(end)) {
				reportLogger.info("Last Year date selection validated successfuly");
				test_steps.add("Last Year date selection validated successfuly");
				result = true;
			} else {
				reportLogger.info("Failed - Last Year date selection validation failed. Expected Start Date: " + start
						+ " But found: " + report.dateStart.getAttribute("value") + " and Expected End date: " + end
						+ " But found: " + report.dateEnd.getAttribute("value"));
				test_steps.add("AssertionError - Failed - Last Year date selection validation failed. Expected Start Date: " + start
						+ " But found: " + report.dateStart.getAttribute("value") + " and Expected End date: " + end
						+ " But found: " + report.dateEnd.getAttribute("value"));
				//Assert.assertTrue(false, "");
				result = false;
			}
		} catch (Exception e) {
			test_steps.add("AssertionError: Last Year date selection validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Last Year date selection validation failed");
		}
		return result;
	}
	
	public boolean validateDateRange(WebDriver driver,String dateOption,String startDate, String endDate, ArrayList<String> test_steps) {
		boolean flag = false;
		
		Elements_Reports report = new Elements_Reports(driver);
		try {
			selectDateRange(driver, dateOption, test_steps);
			Wait.wait1Second();
			Utility.ScrollToViewElementINMiddle(driver, report.dateStart);
			String start=report.dateStart.getAttribute("value");
			String end=report.dateEnd.getAttribute("value");
			assertEquals(start,startDate, "Failed to verify Start Date");
			assertEquals( end,endDate, "Failed to verify End Date");			
			reportLogger.info(dateOption+" date selection validated successfuly");
			test_steps.add(dateOption+" date selection validated successfuly");
			reportLogger.info("Validate " + start + "And " + end);
			test_steps.add("Validate " + start + "And " + end);
		} catch (Exception e) {
			test_steps.add("AssertionError: Today date selection validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Today date selection validation failed");
		}
		
		
		return flag;
	}

	// This method is to validate Default date selection
	public void validateCustomRangeDateDefault(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);

		report.dateStart.click();
		Wait.WaitForElement(driver, OR_Reports.dateTab);

		Calendar c = Calendar.getInstance();
		int today = c.get(Calendar.DAY_OF_MONTH);
		
		if (report.daySelected.getText().equalsIgnoreCase("" + today + "")) {
			reportLogger.info("Default Date selection validated successfully");
			test_steps.add("Default Date selection validated successfully");
		} else {
			Assert.assertTrue(false,
					"Failed: Default Date selection validation. Expected: "
							+ Utility.getDay(Utility.getCurrentDate("DD/MM/YYYY")) + " But found: "
							+ report.daySelected.getText());
		}
	}

	// This method is to select custom date
	public void selectStartdateOld(WebDriver driver, String dateStart, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);

		report.dateStart.click();
		Wait.WaitForElement(driver, OR_Reports.dateTab);

		// res.CP_NewReservation_CheckinCal.click();
		String monthYear = Utility.get_MonthYear(dateStart);
		String year = Utility.get_Year(dateStart);
		String month = Utility.get_Month(dateStart);
		String day = Utility.getDay(dateStart);
		reportLogger.info(monthYear);
		String header = null, headerText = null, next = null, date1, date2;
		String monthHeader1 = null, monthHeader2 = null, yearHeader1 = null, yearHeader2 = null;
		String monthHeaderText1 = null, monthHeaderText2 = null, yearHeaderText1 = null, yearHeaderText2 = null;

		for (int i = 1; i <= 12; i++) {

			monthHeader1 = "(//button[@class='ant-picker-month-btn'])[1]";
			monthHeader2 = "(//button[@class='ant-picker-month-btn'])[2]";
			yearHeader1 = "(//button[@class='ant-picker-year-btn'])[1]";
			yearHeader2 = "(//button[@class='ant-picker-year-btn'])[2]";

			monthHeaderText1 = driver.findElement(By.xpath(monthHeader1)).getText();
			monthHeaderText2 = driver.findElement(By.xpath(monthHeader2)).getText();
			yearHeaderText1 = driver.findElement(By.xpath(yearHeader1)).getText();
			yearHeaderText2 = driver.findElement(By.xpath(yearHeader2)).getText();

			// header = "//table[@class='datepicker-table-condensed
			// table-condensed']/thead/tr/th[2]";
			// headerText = driver.findElement(By.xpath(header)).getText();

			date1 = "(//td[contains(@title,'" + day + "')])[1]";
			date2 = "(//td[contains(@title,'" + day + "')])[2]";

			if (monthYear.equalsIgnoreCase(monthHeaderText1 + " " + yearHeaderText1)) {
				Wait.WaitForElement(driver, date1);
				driver.findElement(By.xpath(date1)).click();
				break;
			} else if (monthYear.equalsIgnoreCase(monthHeaderText2 + " " + yearHeaderText2)) {
				Wait.WaitForElement(driver, date2);
				driver.findElement(By.xpath(date2)).click();
				break;
			} else {

				String previousMonth = "(//button[@class='ant-picker-header-prev-btn'])[1]";
				String nextMonth = "(//button[@class='ant-picker-header-next-btn'])[2]";

				String previousYear = "";
				String nextYear = "";

			}

			/*
			 * int size = driver.findElements(By.xpath(date)).size(); for (int k = 1; k <=
			 * size; k++) { date = "(//td[contains(@class,'day') and text()='" + day +
			 * "'])[" + k + "]"; String classText =
			 * driver.findElement(By.xpath(date)).getAttribute("class"); if
			 * (!classText.contains("old")) { driver.findElement(By.xpath(date)).click();
			 * test_steps.add("Selecting checkin date : " + CheckInDate);
			 * reslogger.info("Selecting checkin date : " + CheckInDate); break; } } break;
			 * } else { next =
			 * "//table[@class='datepicker-table-condensed table-condensed']/thead/tr/th[3]/div"
			 * ; Wait.WaitForElement(driver, next);
			 * driver.findElement(By.xpath(next)).click(); Wait.wait2Second(); }
			 */
		}

	}

	// This method is to select custom date
	public void selectStartdate(WebDriver driver, String dateStart, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		// String dateStart = new SimpleDateFormat("DD/MM/YYYY").format(new
		// Date(dateInput));

		String year = Utility.get_Year(dateStart);
		String month = Utility.get_Month(dateStart);
		String day = Utility.getDay(dateStart);

		String years = "//div[@class='ant-picker-cell-inner']";
		String months = "//div[@class='ant-picker-cell-inner']";
		String date = "//td[contains(@title,'" + day + "')]";

		Elements_Reports report = new Elements_Reports(driver);

		report.dateStart.click();
		Wait.WaitForElement(driver, OR_Reports.dateTab);
		Utility.clickThroughJavaScript(driver, report.buttonYear);
		List<WebElement> yearsAll = driver.findElements(By.xpath(years));

		for (int i = 0; i < yearsAll.size(); i++) {
			if (yearsAll.get(i).getText().equalsIgnoreCase(year)) {
				yearsAll.get(i).click();
				break;
			}
		}

		Wait.waitForElementToBeVisibile(By.xpath("//button[@class='ant-picker-year-btn']"), driver);
		Utility.clickThroughJavaScript(driver, report.buttonMonth);
		List<WebElement> monthsAll = driver.findElements(By.xpath(months));

		for (int i = 0; i < monthsAll.size(); i++) {
			if (monthsAll.get(i).getText().equalsIgnoreCase(month)) {
				monthsAll.get(i).click();
				break;
			}
		}
		Wait.wait5Second();
		List<WebElement> dates = driver.findElements(By.xpath(date));

		for (int i = 0; i < dates.size(); i++) {
			if (!dates.get(i).getAttribute("class").contains("disabled")) {
				dates.get(i).click();
				break;
			}
		}
		// driver.findElement(By.xpath(date)).click();
		reportLogger.info("Start date selected " + dateStart);
		test_steps.add("Start date selected as : <b>"+dateStart+"</b>");

	}

	// This method is to select custom End date
	public void selectEnddate(WebDriver driver, String dateEnd, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		// String dateStart = new SimpleDateFormat("DD/MM/YYYY").format(new
		// Date(dateInput));

		String year = Utility.get_Year(dateEnd);
		String month = Utility.get_Month(dateEnd);
		String day = Utility.getDay(dateEnd);

		String years = "//div[@class='ant-picker-cell-inner']";
		String months = "//div[@class='ant-picker-cell-inner']";
		String date = "//td[contains(@title,'" + day + "')]";

		Elements_Reports report = new Elements_Reports(driver);

		report.dateEnd.click();
		Wait.WaitForElement(driver, OR_Reports.dateTab);
		Utility.clickThroughJavaScript(driver, report.buttonYear);
		List<WebElement> yearsAll = driver.findElements(By.xpath(years));

		for (int i = 0; i < yearsAll.size(); i++) {
			if (yearsAll.get(i).getText().equalsIgnoreCase(year)) {
				try {
					yearsAll.get(i).click();
				}catch(Exception e) {
					test_steps.add("AssertionError" +e.toString());
				}
				break;
			}
		}

		Wait.waitForElementToBeVisibile(By.xpath("//button[@class='ant-picker-year-btn']"), driver);
		Utility.clickThroughJavaScript(driver, report.buttonMonth);
		List<WebElement> monthsAll = driver.findElements(By.xpath(months));

		for (int i = 0; i < monthsAll.size(); i++) {
			if (monthsAll.get(i).getText().equalsIgnoreCase(month)) {
				monthsAll.get(i).click();
				break;
			}
		}
		Wait.wait5Second();

		List<WebElement> dates = driver.findElements(By.xpath(date));

		for (int i = 0; i < dates.size(); i++) {
			if (!dates.get(i).getAttribute("class").contains("disabled")) {
				dates.get(i).click();
				break;
			}
		}

		// driver.findElement(By.xpath(date)).click();
		reportLogger.info("End date selected " + dateEnd);
		test_steps.add("End date selected as : <b>"+dateEnd+"</b>");

	}

	// This method is to validate Custom Date Range
	public boolean validateCustomDateRnge(WebDriver driver, String dateStart, String dateEnd, String dFormat, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {
		boolean result = false;
		String dateStartExpected = null, dateEndExpected = null;
		Elements_Reports report = new Elements_Reports(driver);
		selectStartdate(driver, dateStart, test_steps);
		selectEnddate(driver, dateEnd, test_steps);

		if (dFormat.equalsIgnoreCase("USA")) {
			dateStartExpected = Utility.get_Month(dateStart) + " " + Utility.getDay(dateStart) + ", "
					+ Utility.get_Year(dateStart);
			dateEndExpected = Utility.get_Month(dateEnd) + " " + Utility.getDay(dateEnd) + ", "
					+ Utility.get_Year(dateEnd);
		}else if (dFormat.equalsIgnoreCase("International")) {
			dateStartExpected = Utility.getDay(dateStart) + " " + Utility.get_Month(dateStart) + ", "
					+ Utility.get_Year(dateStart);
			dateEndExpected = Utility.getDay(dateEnd) + " " + Utility.get_Month(dateEnd) + ", "
					+ Utility.get_Year(dateEnd);
		}
		

		try {
			if (report.dateStart.getAttribute("value").equalsIgnoreCase(dateStartExpected)) {
				reportLogger.info("Custom Start date validated successfully");
				test_steps.add("Custom Start date validated successfully");
				result = true;
			} else {
				reportLogger.info("Failed - Custom Start date validation failed. Expected: " + dateStartExpected
						+ " But found: " + report.dateStart.getAttribute("value"));
				test_steps.add("AssertionError - Failed - Custom Start date validation failed. Expected: " + dateStartExpected
						+ " But found: " + report.dateStart.getAttribute("value"));
				result = false;
//				Assert.assertTrue(false, "Failed - Custom Start date validation failed. Expected: " + dateStartExpected
//						+ " But found: " + report.dateStart.getAttribute("value"));
			}
		} catch (Exception e) {
			test_steps.add("AssertionError: Custom Start date validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Custom Start date validation failed");
		}

		try {
			if (report.dateEnd.getAttribute("value").equalsIgnoreCase(dateEndExpected)) {
				reportLogger.info("Custom End date validated successfully");
				test_steps.add("Custom End date validated successfully");
				result = true;
			} else {
				reportLogger.info("Failed - Custom End date validation failed. Expected: " + dateEndExpected
						+ " But found: " + report.dateEnd.getAttribute("value"));
				test_steps.add("Failed - Custom End date validation failed. Expected: " + dateEndExpected
						+ " But found: " + report.dateEnd.getAttribute("value"));
//				Assert.assertTrue(false, "Failed - Custom End date validation failed. Expected: " + dateEndExpected
//						+ " But found: " + report.dateEnd.getAttribute("value"));
				result = false;
			}
		} catch (Exception e) {
			test_steps.add("AssertionError: Custom End date validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Custom End date validation failed");
		}
		return result;
	}

	// This method is to validate Custom Date Range
	public void validateDifferentDateFormat(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		String dateStartExpected, dateEndExpected, dateStartActual, dateEndActual;
		SimpleDateFormat format = new SimpleDateFormat("MMM dd, YYYY");
		dateStartExpected = Utility.getCurrentDate("MMM dd, YYYY");
		dateEndExpected = Utility.getCurrentDate("MMM dd, YYYY");

		Elements_Reports report = new Elements_Reports(driver);
		report.dateStart.click();
		Wait.wait3Second();
		report.dateStart.clear();
		Wait.wait3Second();
		report.dateStart.sendKeys("15/06/2020");
		Wait.wait3Second();
		report.dateStart.sendKeys(Keys.ENTER);
		dateStartActual = format.format(new Date(report.dateStart.getAttribute("value")));

		try {
			if (dateStartExpected.equalsIgnoreCase(dateStartActual)) {
				reportLogger.info(
						"Success - Start date - Entered different format date and it's not accepting and selecting current date");
				test_steps.add(
						"Success - Start date - Entered different format date and it's not accepting and selecting current date");
			}
		} catch (Exception e) {
			test_steps.add("AssertionError: Start date - Different format date validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: Start date - Different format date validation failed");
		}

		report.dateEnd.click();
		Wait.wait3Second();
		report.dateEnd.clear();
		Wait.wait3Second();
		report.dateEnd.sendKeys("15/06/2020");
		Wait.wait3Second();
		report.dateEnd.sendKeys(Keys.ENTER);

		dateEndActual = format.format(new Date(report.dateStart.getAttribute("value")));

		try {
			if (dateEndExpected.equalsIgnoreCase(dateEndActual)) {
				reportLogger.info(
						"Success - End date - Entered different format date and it's not accepting and selecting current date");
				test_steps.add(
						"Success - End date - Entered different format date and it's not accepting and selecting current date");
			}
		} catch (Exception e) {
			test_steps.add("AssertionError: End date - Different format date validation failed");
		} catch (Error e) {
			test_steps.add("AssertionError: End date - ifferent format date validation failed");
		}

	}

	// Return to Default
	// This method is to validate Return to Default availability
	public void validateReturnToDefaultAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);

		try {
			Wait.WaitForElement(driver, OR_Reports.buttonReturnToDefault);
			reportLogger.info("Return to Default option is available in Ledger Balances Page");
			test_steps.add("Return to Default option is available in Ledger Balances Page");
		} catch (Exception e) {
			test_steps.add("AssertionError: Return to Default option is not available in Ledger Balances Page");
			Assert.assertTrue(false, "Return to Default option is available in Ledger Balances Page");
		} catch (Error e) {
			test_steps.add("AssertionError: Return to Default option is not available in Ledger Balances Page");
			Assert.assertTrue(false, "Return to Default option is not available in Ledger Balances Page");
		}

		try {
			Wait.WaitForElement(driver, OR_Reports.symbolReturnToDefault);
			reportLogger.info("Return to Default symbol is available in Ledger Balances Page");
			test_steps.add("Return to Default symbol is available in Ledger Balances Page");
		} catch (Exception e) {
			test_steps.add("AssertionError: Return to Default symbol is not available in Ledger Balances Page");
			Assert.assertTrue(false, "Return to Default symbol is not available in Ledger Balances Page");
		} catch (Error e) {
			test_steps.add("AssertionError: Return to Default symbol is not available in Ledger Balances Page");
			Assert.assertTrue(false, "Return to Default symbol is not available in Ledger Balances Page");
		}

	}

	// This method is to click Return to Default
	public void clickReturnToDefault(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {
		Elements_Reports report = new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.buttonReturnToDefault);
		Utility.clickThroughJavaScript(driver, report.buttonReturnToDefault);
	}

	// This method is to get toast message Return to Default
	public String getToastMessageReturnToDefault(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		String message = null;

		if (driver.findElements(By.xpath(OR_Reports.ReturnToDefaultSeccess)).size() > 0) {
			message = report.ReturnToDefaultSeccess.getText();
			reportLogger.info("Return to Defaults Success - " + message);
			test_steps.add("Return to Defaults Success - " + message);
		} else if (driver.findElements(By.xpath(OR_Reports.ReturnToDefaultFailure)).size() > 0) {
			message = report.ReturnToDefaultFailure.getText();
			reportLogger.info("Return to Defaults Failure - " + message);
			test_steps.add("Return to Defaults Failure - " + message);
		}

		return message;
	}

	// This method is to validate Return to Default
	public void validateReturnToDefault(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		// String toast =
		// "//*[@class='ant-notification-notice-message-single-line-auto-margin']";

		Wait.WaitForElement(driver, OR_Reports.buttonReturnToDefault);
		Utility.clickThroughAction(driver, report.buttonReturnToDefault);
		// report.buttonReturnToDefault.click();
		String toastMessage = getToastMessageReturnToDefault(driver, test_steps);
		String toastDescription = report.ReturnToDefaultDescription.getText();
		System.out.println(toastMessage);

		try {

			if (toastMessage.equalsIgnoreCase("Success")) {
				reportLogger.info("Return to Default message validated successfully - " + toastMessage);
				test_steps.add("Return to Default message validated successfully - " + toastMessage);

				if (toastDescription.equalsIgnoreCase("Report inputs returned to default.")) {
					reportLogger
							.info("Return to Default Success Description validated successfully - " + toastDescription);
					test_steps
							.add("Return to Default Success Description validated successfully - " + toastDescription);
				}

			} else if (toastMessage.contains("No Report Data Available")) {
				reportLogger.info("Return to Default message validated successfully - " + toastMessage);
				test_steps.add("Return to Default message validated successfully - " + toastMessage);

				if (toastDescription
						.equalsIgnoreCase("Please update the report inputs below and try running reports again.")) {
					reportLogger
							.info("Return to Default Failure Description validated successfully - " + toastDescription);
					test_steps
							.add("Return to Default Failure Description validated successfully - " + toastDescription);
				}

			} else {
				Assert.assertTrue(false, "Failed - Return to Default message validation failed");
			}

		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

	}

	// This method is to validate Return to Default in different ways
	public void validateReturnToDefaultAll(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		String toastMessage = null;

		// Clear all Select Inputs then validate Return to Default
		try {
			Utility.clickThroughAction(driver, report.buttonClearAll);

			Utility.clickThroughAction(driver, report.buttonReturnToDefault);

			toastMessage = getToastMessageReturnToDefault(driver, test_steps);

			if (toastMessage.equalsIgnoreCase("Success")) {

				List<WebElement> inputs = driver.findElements(By.xpath(OR_Reports.checkboxSelectInputs));

				for (int i = 0; i < inputs.size(); i++) {
					if (inputs.get(i).isEnabled()) {
						reportLogger.info("Failed to get Default after click on Return to Default");
						Assert.assertTrue(false, "Failed to get Default after click on Return to Default");
					}
				}
				reportLogger.info("Select Input values are back to Default after click on Return to Default");
				test_steps.add("Select Input values are back to Default after click on Return to Default");

			} else if (toastMessage.contains("No Report Data Available")) {
				reportLogger.info("Failed to Return to Default - " + toastMessage);
				test_steps.add("Failed to Return to Default - " + toastMessage);
			}

		} catch (Exception e) {
			test_steps.add("AssertionError " + e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

		// Clear all Advanced Options then validate Return to Default
		try {

			Wait.wait3Second();
			driver.navigate().refresh();
			Wait.WaitForElement(driver, OR_Reports.buttonReturnToDefault);

			Utility.clickThroughAction(driver, report.AccountType);
			Utility.clickThroughAction(driver, report.AccountTypeClearAll);
			Utility.clickThroughAction(driver, report.AccountType);

			Utility.clickThroughJavaScript(driver, report.ItemStatus);
			Wait.wait1Second();
			Utility.clickThroughJavaScript(driver, report.ItemStatusSelectAll);
			Utility.clickThroughJavaScript(driver, report.ItemStatusClearAll);
			Utility.clickThroughAction(driver, report.ItemStatus);
			// Utility.clickThroughAction(driver, report.ItemStatusClearAll);

			// Utility.clickThroughAction(driver, report.ReservationStatus);
			// Utility.clickThroughJavaScript(driver, report.ReservationStatusClearAll);
			// Utility.clickThroughAction(driver, report.ReservationStatusClearAll);

			Utility.clickThroughAction(driver, report.buttonReturnToDefault);

			toastMessage = getToastMessageReturnToDefault(driver, test_steps);

			if (toastMessage.equalsIgnoreCase("Success")) {
				if (getAdvancedpOptionsCollapseText(driver, test_steps, "Account Type").equalsIgnoreCase("All")
						&& getAdvancedpOptionsCollapseText(driver, test_steps, "Item Status").equalsIgnoreCase("3/4")) {

					reportLogger.info("Advacned Input values are back to Default after click on Return to Default");
					test_steps.add("Advacned Input values are back to Default after click on Return to Default");

				} else {
					assertTrue(false,
							"Failed to get Advacned Input values are back to Default after clicking on Return to Default");
				}

			} else if (toastMessage.contains("No Report Data Available")) {
				reportLogger.info("Failed to Return to Default - " + toastMessage);
				test_steps.add("Failed to Return to Default - " + toastMessage);
			}

		} catch (Exception e) {
			//test_steps.add("AssertionError " + e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

		// Select Inputs and clear all Advanced Options then validate Return to Default
		try {

			Wait.wait3Second();
			//driver.navigate().refresh();
			clickReturnToDefault(driver, test_steps);
			Wait.WaitForElement(driver, OR_Reports.buttonReturnToDefault);
			Utility.clickThroughAction(driver, report.buttonReturnToDefault);

			selectAllInputOptions(driver, "Incidental", test_steps);
			savePopupSelectInputs(driver, test_steps);
//			selectAllInputOptions(driver, "Tax", test_steps);
//			savePopupSelectInputs(driver, test_steps);

			Utility.clickThroughJavaScript(driver, report.AccountType);
			Utility.clickThroughJavaScript(driver, report.AccountTypeClearAll);
			Utility.clickThroughJavaScript(driver, report.AccountType);

			Utility.clickThroughJavaScript(driver, report.ItemStatus);
			Wait.wait1Second();
			Utility.clickThroughJavaScript(driver, report.ItemStatusSelectAll);
			Utility.clickThroughJavaScript(driver, report.ItemStatusClearAll);
			Utility.clickThroughAction(driver, report.ItemStatus);

			Utility.clickThroughAction(driver, report.buttonReturnToDefault);

			toastMessage = getToastMessageReturnToDefault(driver, test_steps);

			if (toastMessage.equalsIgnoreCase("Success")) {

				if (!report.checkboxIncidentals.isEnabled() && !report.checkboxTaxes.isEnabled()) {
					reportLogger.info("Select Input values are back to Default after click on Return to Default");
					test_steps.add("Select Input values are back to Default after click on Return to Default");
				} else {
					assertTrue(false,
							"Failed to get Select Input values are back to Default after clicking on Return to Default");
				}

				if (getAdvancedpOptionsCollapseText(driver, test_steps, "Account Type").equalsIgnoreCase("All")
						&& getAdvancedpOptionsCollapseText(driver, test_steps, "Item Status").equalsIgnoreCase("3/4")) {

					reportLogger.info("Advacned Input values are back to Default after click on Return to Default");
					test_steps.add("Advacned Input values are back to Default after click on Return to Default");

				} else {
					assertTrue(false,
							"Failed to get Advacned Input values are back to Default after clicking on Return to Default");
				}

			} else if (toastMessage.contains("No Report Data Available")) {
				reportLogger.info(
						"After Clear All Advanced options and Select Inputs, Return to Default message validated successfully - "
								+ toastMessage);
				test_steps.add(
						"After Clear All Advanced options and Select Inputs, Return to Default message validated successfully - "
								+ toastMessage);
			} else {
				Assert.assertTrue(false, "Failed - Failed to return to default");
			}

		} catch (Exception e) {
			//test_steps.add("AssertionError " + e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

		/*
		 * //Change some other items then validate Return to Default try {
		 * 
		 * Wait.wait3Second(); driver.navigate().refresh(); Wait.WaitForElement(driver,
		 * OR_Reports.buttonReturnToDefault);
		 * 
		 * report.rdoNoExcludeZero.click(); report.rdoNoDisplayCustomGeneral.click();
		 * 
		 * Utility.clickThroughAction(driver, report.buttonReturnToDefault);
		 * 
		 * toastMessage = getToastMessageReturnToDefault(driver, test_steps);
		 * 
		 * if (toastMessage.equalsIgnoreCase("Success")) { reportLogger.
		 * info("After Clear All Advanced options and Select Inputs, Return to Default message validated successfully - "
		 * +toastMessage); test_steps.
		 * add("After Clear All Advanced options and Select Inputs, Return to Default message validated successfully - "
		 * +toastMessage);
		 * 
		 * }else if(toastMessage.contains("No Report Data Available")) { reportLogger.
		 * info("After Clear All Advanced options and Select Inputs, Return to Default message validated successfully - "
		 * +toastMessage); test_steps.
		 * add("After Clear All Advanced options and Select Inputs, Return to Default message validated successfully - "
		 * +toastMessage); }else { Assert.assertTrue(false,
		 * "Failed - After Clear All Advanced options and Select Inputs - Return to Default message validation failed"
		 * ); }
		 * 
		 * }catch(Exception e) { test_steps.add(e.toString()); }catch(Error e) {
		 * test_steps.add(e.toString()); }
		 */

		// click multiple times on Return to Defaults then validate
		try {
			// Click multiple times on Return to Defaults
			driver.navigate().refresh();
			Wait.WaitForElement(driver, OR_Reports.buttonReturnToDefault);
			Utility.clickThroughAction(driver, report.buttonReturnToDefault);

			toastMessage = getToastMessageReturnToDefault(driver, test_steps);

			if (toastMessage.equalsIgnoreCase("Success")) {
				List<WebElement> inputs = driver.findElements(By.xpath(OR_Reports.checkboxSelectInputs));

				for (int i = 0; i < inputs.size(); i++) {
					if (inputs.get(i).isEnabled()) {
						reportLogger.info("Failed to get Default after click on Return to Default");
						Assert.assertTrue(false, "Failed to get Default after click on Return to Default");
					}
				}
				reportLogger.info("Select Input values are back to Default after click on Return to Default");
				test_steps.add("Select Input values are back to Default after click on Return to Default");

			} else if (toastMessage.contains("No Report Data Available")) {

				reportLogger.info("Failed to Return to Default - " + toastMessage);
				test_steps.add("Failed to Return to Default - " + toastMessage);
			}

			Wait.wait5Second();
			Utility.clickThroughAction(driver, report.buttonReturnToDefault);
			reportLogger.info("Second time clicked on Return to Default");
			test_steps.add("Second time clicked on Return to Default");
			String toastMessage2 = getToastMessageReturnToDefault(driver, test_steps);

			if (toastMessage2.equalsIgnoreCase("Success")) {
				List<WebElement> inputs = driver.findElements(By.xpath(OR_Reports.checkboxSelectInputs));

				for (int i = 0; i < inputs.size(); i++) {
					if (inputs.get(i).isEnabled()) {
						reportLogger.info("Failed to get Default after click on Return to Default");
						Assert.assertTrue(false, "Failed to get Default after click on Return to Default");
					}
				}
				reportLogger.info("Select Input values are back to Default after click on Return to Default");
				test_steps.add("Select Input values are back to Default after click on Return to Default");

			} else if (toastMessage.contains("No Report Data Available")) {

				reportLogger.info("Failed to Return to Default - " + toastMessage);
				test_steps.add("Failed to Return to Default - " + toastMessage);
			}

		} catch (Exception e) {
			test_steps.add("AssertionError " + e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

		// validate Choose Date Range to Return to Default
		try {

			//driver.navigate().refresh();
			clickReturnToDefault(driver, test_steps);
			Wait.WaitForElement(driver, OR_Reports.buttonReturnToDefault);

			selectDateRange(driver, "Last Week", test_steps);

			Wait.WaitForElement(driver, OR_Reports.buttonReturnToDefault);
			Utility.clickThroughAction(driver, report.buttonReturnToDefault);

			toastMessage = getToastMessageReturnToDefault(driver, test_steps);

			if (toastMessage.equalsIgnoreCase("Success")) {

				SimpleDateFormat format = new SimpleDateFormat("MMM dd, YYYY");

				if (format.format(new Date(report.dateStart.getAttribute("value")))
						.equalsIgnoreCase(Utility.getCurrentDate("MMM dd, YYYY"))
						&& format.format(new Date(report.dateEnd.getAttribute("value")))
								.equalsIgnoreCase(Utility.getCurrentDate("MMM dd, YYYY"))) {

					reportLogger.info("Date set back to Default after click on Return to Default");
					test_steps.add("Date set back to Default after click on Return to Default");
				} else {
					reportLogger.info("Unable to get date back to Default after click on Return to Default");
					Assert.assertTrue(false, "Failed to get Date back to Default after click on Return to Default");
				}

			} else if (toastMessage.contains("No Report Data Available")) {

				reportLogger.info("Failed to Return to Default - " + toastMessage);
				test_steps.add("Failed to Return to Default - " + toastMessage);
			}

		} catch (Exception e) {
			test_steps.add("AssertionError " + e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getAdvancedpOptionsCollapseText> Description:
	 * <This method reads collapse text of advanced options> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps, String advanceOption> Return
	 * value: <String> Created By: <Naveen Kadthala> Created On: <08/19/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public String getAdvancedpOptionsCollapseText(WebDriver driver, ArrayList<String> test_steps,
			String advanceOption) {
		String displayText = driver.findElement(By.xpath(
				"//*[text()='" + advanceOption + "']/../following-sibling::div//div[contains(@class,'textOverflow')]"))
				.getText();
		return displayText;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateAllAdvancedpOptionsdefaultCollapseText> Description: <This method
	 * validates collapse text of all advanced options> Input parameters: <WebDriver
	 * driver, ArrayList<String> test_steps> Return value: <void> Created By:
	 * <Naveen Kadthala> Created On: <08/19/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateAllAdvancedpOptionsdefaultCollapseText(WebDriver driver, ArrayList<String> test_steps) {
		ReportsV2 report = new ReportsV2();
		String AccountTypeCollapseText = report.getAdvancedpOptionsCollapseText(driver, test_steps, "Account Type");
		String ItemStatusCollapseText = report.getAdvancedpOptionsCollapseText(driver, test_steps, "Item Status");
		String IncludeDataFromCollapseText = report.getAdvancedpOptionsCollapseText(driver, test_steps,
				"Include Data From");
		String TaxExemptLedgerItemsCollapseText = report.getAdvancedpOptionsCollapseText(driver, test_steps,
				"Tax Exempt Ledger Items");
		String MarketSegmentCollapseText = report.getAdvancedpOptionsCollapseText(driver, test_steps, "Market Segment");
		String ReservationStatusCollapseText = report.getAdvancedpOptionsCollapseText(driver, test_steps,
				"Reservation Status");
		String ReferralsCollapseText = report.getAdvancedpOptionsCollapseText(driver, test_steps, "Referrals");

		boolean condition1 = AccountTypeCollapseText.equals("All");
		boolean condition2 = ItemStatusCollapseText.equals("3/4");
		//boolean condition3 = IncludeDataFromCollapseText.equals("All Users | 00:00 to 00:00");
		boolean condition3 = IncludeDataFromCollapseText.equals("All Users");
		boolean condition4 = TaxExemptLedgerItemsCollapseText.equals("Tax Exempt & Taxed");
		boolean condition5 = MarketSegmentCollapseText.equals("All");
		boolean condition6 = ReservationStatusCollapseText.equals("All");
		boolean condition7 = ReferralsCollapseText.equals("All");

		if (condition1 && condition2 && condition3 && condition4 && condition5 && condition6 && condition7) {
			reportLogger.info("Sucess - Validaion of all Advanced Inputs default collapse text");
			test_steps.add("Success - Validaion of all Advanced Inputs default collapse text");
		} else {
			reportLogger.info("Failed - Validaion of all Advanced Inputs default collapse text");
			test_steps.add("AssertionError - Failed - Validaion of all Advanced Inputs default collapse text");
			//Assert.assertTrue(false, "Fail - Validaion of all Advanced Inputs default collapse text");
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateNoDuplicateofReportsNames>
	 * Description: <This method validates there are no duplicates of Reports names
	 * on Reports home page> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <08/19/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void validateNoDuplicateofReportsNames(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);

		boolean condition1 = (driver.findElements(By.xpath(OR_Reports.DailyFlashReport)).size() == 1);
		boolean condition2 = (driver.findElements(By.xpath(OR_Reports.NetSalesReport)).size() == 1);
		boolean condition3 = (driver.findElements(By.xpath(OR_Reports.RoomForecastReport)).size() == 1);
		boolean condition4 = (driver.findElements(By.xpath(OR_Reports.AdvanceDepositReport)).size() == 1);
		boolean condition5 = (driver.findElements(By.xpath(OR_Reports.AccountBalancesReport)).size() == 1);
		boolean condition6 = (driver.findElements(By.xpath(OR_Reports.LedgerBalancesReport)).size() == 1);
		boolean condition7 = (driver.findElements(By.xpath(OR_Reports.TransactionsReport)).size() == 1);
		boolean condition8 = (driver.findElements(By.xpath(OR_Reports.PerformanceReportsHeading)).size() == 1);
		boolean condition9 = (driver.findElements(By.xpath(OR_Reports.AccountingReportsHeading)).size() == 1);

		if (condition1 && condition2 && condition3 && condition4 && condition5 && condition6 && condition7 && condition8
				&& condition9) {
			reportLogger.info("Sucess - Validaion of duplicate Report names in ReportsV2 home page");
			test_steps.add("Success - Validaion of duplicate Report names in ReportsV2 home page" + "<br>"
					+ "<a href='https://innroad.atlassian.net/browse/RPT-276'>"
					+ "Click here to open JIRA: RPT-276</a>");
		} else {
			Assert.assertTrue(false,
					"Fail - Validaion of duplicate Report names in ReportsV2 home page" + "<br>"
							+ "<a href='https://innroad.atlassian.net/browse/RPT-276'>"
							+ "Click here to open JIRA: RPT-276</a>");
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <SelectGivenTaxExemptLedgerItems> Description:
	 * <This method selects given Tax Exempt LedgerItems option> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps, String
	 * TaxExemptLedgerItemsOption> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <20/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void SelectGivenTaxExemptLedgerItems(WebDriver driver, ArrayList<String> test_steps,
			String TaxExemptLedgerItemsOption) throws InterruptedException {
		Wait.waitForElementToBeVisibile(By.xpath("//div[@id='taxExempt_list']/following-sibling::div/div/div/div/div"),
				driver);
		List<WebElement> options = driver
				.findElements(By.xpath("//div[@id='taxExempt_list']/following-sibling::div/div/div/div/div"));
		for (int i = 0; i < options.size(); i++) {
			if (TaxExemptLedgerItemsOption.equalsIgnoreCase(options.get(i).getText())) {
				Utility.clickThroughAction(driver, options.get(i));
			}
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <SelectGivenMarketSegmentOption> Description:
	 * <This method selects given Market Segment option> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps, String MarketSegmentOption>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <20/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void SelectGivenMarketSegmentOption(WebDriver driver, ArrayList<String> test_steps,
			String MarketSegmentOption) throws InterruptedException {
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@id='marketSegment_list']/following-sibling::div/div/div/div/div"), driver);
		List<WebElement> options = driver
				.findElements(By.xpath("//div[@id='marketSegment_list']/following-sibling::div/div/div/div/div"));
		for (int i = 0; i < options.size(); i++) {
			if (MarketSegmentOption.equalsIgnoreCase(options.get(i).getText())) {
				Utility.clickThroughAction(driver, options.get(i));
			}
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <SelectGivenReferralsOption> Description: <This
	 * method selects given Referrals option> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps, String ReferralsOption> Return value: <void>
	 * Created By: <Naveen Kadthala> Created On: <20/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void SelectGivenReferralsOption(WebDriver driver, ArrayList<String> test_steps, String ReferralsOption)
			throws InterruptedException {
		Wait.waitForElementToBeVisibile(By.xpath("//div[@id='referrals_list']/following-sibling::div/div/div/div/div"),
				driver);
		List<WebElement> options = driver
				.findElements(By.xpath("//div[@id='referrals_list']/following-sibling::div/div/div/div/div"));
		for (int i = 0; i < options.size(); i++) {
			if (ReferralsOption.equalsIgnoreCase(options.get(i).getText())) {
				Utility.clickThroughAction(driver, options.get(i));
			}
		}
	}

	// functions for create Run Report
	public void selectSelectInputs(WebDriver driver, String input, String options, ArrayList<String> test_steps)
			throws InterruptedException {
		// reportLogger.info(options);
		reportLogger.info(options + "   " + options.split(",") + "  " + options.split(",").length);

		if (options.equalsIgnoreCase("All")) {
			selectAllInputOptions(driver, input, test_steps);
			savePopupSelectInputs(driver, test_steps);
		} else if (options.isEmpty()) {

		} else if (options.split(",").length == 1) {
			reportLogger.info("Input: "+input);
			reportLogger.info("Options: "+options);
			clickSelectInput(driver, input, test_steps);
			selectInputOption(driver, input, options, test_steps);
			Wait.wait1Second();
			savePopupSelectInputs(driver, test_steps);
		} else {
			clickSelectInput(driver, input, test_steps);
			String[] selectOptions = options.split(",");
			// reportLogger.info("Inputs " + selectOptions.length + " " + selectOptions);

			for (int i = 0; i < selectOptions.length; i++) {
				// reportLogger.info(selectOptions[i]);
				selectInputOption(driver, input, selectOptions[i], test_steps);
				// reportLogger.info("Clicked on option");
			}
			Wait.wait1Second();
			savePopupSelectInputs(driver, test_steps);
		}
	}

	// This method is to select Input options
	public void selectSelectInputsAll(WebDriver driver, String[] inputs, String[] options, ArrayList<String> test_steps)
			throws InterruptedException {

		for (int i = 0; i < inputs.length; i++) {
			selectSelectInputs(driver, inputs[i], options[i], test_steps);
		}

	}

	// This method is to select Input options
	public void selectSelectInputsAll(WebDriver driver, Set<String> inputs, HashMap<String, String> options,
			ArrayList<String> test_steps) throws InterruptedException {

		for (String input : inputs) {
			selectSelectInputs(driver, input, options.get(input), test_steps);
		}

	}

	// This method is to validate dropdown box size
	public void validateDropdownBoxSize(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {

		int height, width;
		Elements_Reports report = new Elements_Reports(driver);
		driver.navigate().refresh();
		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.AdvancedInputs), driver);

		try {
			width = report.ChoseDateRange.getSize().getWidth();
			height = report.ChoseDateRange.getSize().getHeight();
			reportLogger.info("Width: " + width);
			reportLogger.info("Height: " + height);

			if (report.ChoseDateRange.getSize().getWidth() == 155) {
				reportLogger.info("Choose Date Range dropdown size validated successfully");
				test_steps.add("Choose Date Range dropdown size validated successfully");
			} else {
				reportLogger.info("Failed - Choose Date Range dropdown size validation failed");
				Assert.assertTrue(false, "Failed - Choose Date Range dropdown size validation failed");
			}

		} catch (Error e) {
			test_steps.add(e.toString());
		}

		try {
			width = report.SortReportByOptionsExpand.getSize().getWidth();
			height = report.SortReportByOptionsExpand.getSize().getHeight();
			reportLogger.info("Width: " + width);
			reportLogger.info("Height: " + height);

			if (report.SortReportByOptionsExpand.getSize().getWidth() == 514) {
				reportLogger.info("Sort Report By dropdown size validated successfully");
				test_steps.add("Sort Report By dropdown size validated successfully");
			} else {
				reportLogger.info("Failed - Sort Report By dropdown size validation failed");
				Assert.assertTrue(false, "Failed - Sort Report By dropdown size validation failed");
			}

		} catch (Error e) {
			test_steps.add(e.toString());
		}

		try {
			width = report.GroupRowsByOptionsExpand.getSize().getWidth();
			height = report.GroupRowsByOptionsExpand.getSize().getHeight();
			reportLogger.info("Width: " + width);
			reportLogger.info("Height: " + height);

			if (report.GroupRowsByOptionsExpand.getSize().getWidth() == 514) {
				reportLogger.info("Group Rows By dropdown size validated successfully");
				test_steps.add("Group Rows By dropdown size validated successfully");
			} else {
				reportLogger.info("Failed - Group Rows By dropdown size validation failed");
				Assert.assertTrue(false, "Failed - Group Rows By dropdown size validation failed");
			}

		} catch (Error e) {
			test_steps.add(e.toString());
		}

		try {
			Wait.wait2Second();
			Utility.clickThroughJavaScript(driver, report.IncludeDataFrom);
			Wait.wait2Second();

			width = report.usersExpand.getSize().getWidth();
			height = report.usersExpand.getSize().getHeight();
			reportLogger.info("Width: " + width);
			reportLogger.info("Height: " + height);

			if (report.usersExpand.getSize().getWidth() == 480) {
				reportLogger.info("Include Data Form - Users dropdown size validated successfully");
				test_steps.add("Include Data Form - Users dropdown size validated successfully");
			} else {
				reportLogger.info("Failed - Include Data Form - Users dropdown size validation failed");
				Assert.assertTrue(false, "Failed - Include Data Form - Users dropdown size validation failed");
			}

		} catch (Error e) {
			test_steps.add(e.toString());
		}

		try {
			Utility.clickThroughJavaScript(driver, report.TaxExemptLedgerItems);
			Wait.wait2Second();

			width = report.TaxExempt.getSize().getWidth();
			height = report.TaxExempt.getSize().getHeight();
			reportLogger.info("Width: " + width);
			reportLogger.info("Height: " + height);

			if (report.TaxExempt.getSize().getWidth() == 480) {
				reportLogger.info("Tax Exempt Ledger Items dropdown size validated successfully");
				test_steps.add("Tax Exempt Ledger Items dropdown size validated successfully");
			} else {
				reportLogger.info("Failed - Tax Exempt Ledger Items dropdown size validation failed");
				Assert.assertTrue(false, "Failed - Tax Exempt Ledger Items dropdown size validation failed");
			}

		} catch (Error e) {
			test_steps.add(e.toString());
		}

		try {
			Utility.clickThroughJavaScript(driver, report.MarketSegment);
			Wait.wait2Second();

			width = report.MarketSegmentListExpand.getSize().getWidth();
			height = report.MarketSegmentListExpand.getSize().getHeight();
			reportLogger.info("Width: " + width);
			reportLogger.info("Height: " + height);

			if (report.MarketSegmentListExpand.getSize().getWidth() == 480) {
				reportLogger.info("Market Segment dropdown size validated successfully");
				test_steps.add("Market Segment dropdown size validated successfully");
			} else {
				reportLogger.info("Failed - Market Segment dropdown size validation failed");
				Assert.assertTrue(false, "Failed - Market Segment dropdown size validation failed");
			}

		} catch (Error e) {
			test_steps.add(e.toString());
		}

		try {
			Utility.clickThroughJavaScript(driver, report.Referrals);
			Wait.wait2Second();

			width = report.ReferralstListExpand.getSize().getWidth();
			height = report.ReferralstListExpand.getSize().getHeight();
			reportLogger.info("Width: " + width);
			reportLogger.info("Height: " + height);

			if (report.ReferralstListExpand.getSize().getWidth() == 480) {
				reportLogger.info("Referrals dropdown size validated successfully");
				test_steps.add("Referrals dropdown size validated successfully");
			} else {
				reportLogger.info("Failed - Referrals dropdown size validation failed");
				Assert.assertTrue(false, "Failed - Referrals dropdown size validation failed");
			}

		} catch (Error e) {
			test_steps.add(e.toString());
		}

	}

	// Sprint14
	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <splitComaSeperatedValuesfromExcel>
	 * Description: <This method seperates comma seperated values from a given
	 * string and returns string[]> Input parameters: <String options> Return value:
	 * <String[]> Created By: <Naveen Kadthala> Created On: <24/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public String[] splitComaSeperatedValuesfromExcel(String options) {
		String[] Options = options.split(",");
		for (int i = 0; i < Options.length; i++) {
			Options[i] = Options[i].trim();
		}
		return Options;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <selectAccountTyepOptionsGiventhroughExcel>
	 * Description: <This method selects Account Type Advanced Inputs given through
	 * Excel> Input parameters: <WebDriver driver, ArrayList<String> test_steps,
	 * String accounttypeoptions> Return value: <void> Created By: <Naveen Kadthala>
	 * Created On: <24/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void selectAccountTyepOptionsGiventhroughExcel(WebDriver driver, ArrayList<String> test_steps,
			String accounttypeoptions) {

		ReportsV2 reports = new ReportsV2();
		Elements_Reports res = new Elements_Reports(driver);
		Wait.explicit_wait_elementToBeClickable(res.AccountType, driver);

		if (!accounttypeoptions.contentEquals("")) {
			try {
				res.AccountType.click();
			} catch (Exception e) {
				Utility.clickThroughAction(driver, res.AccountType);
			}
			Utility.clickThroughAction(driver, res.AccountTypeClearAll);
			String[] options = reports.splitComaSeperatedValuesfromExcel(accounttypeoptions);
			reports.checkRequiredAdvancedOption(driver, test_steps, options);
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <selectItemStatusOptionsGiventhroughExcel>
	 * Description: <This method selects Item Status Advanced Inputs given through
	 * Excel> Input parameters: <WebDriver driver, ArrayList<String> test_steps,
	 * String ItemStatusOptions> Return value: <void> Created By: <Naveen Kadthala>
	 * Created On: <24/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void selectItemStatusOptionsGiventhroughExcel(WebDriver driver, ArrayList<String> test_steps,
			String ItemStatusOptions) {
		ReportsV2 reports = new ReportsV2();
		Elements_Reports res = new Elements_Reports(driver);
		// res.ItemStatus.click();

		if (!ItemStatusOptions.contentEquals("")) {
			Utility.clickThroughJavaScript(driver, res.ItemStatus);
			Utility.clickThroughJavaScript(driver, res.ItemStatusSelectAll);
			try {
				Utility.clickThroughAction(driver, res.ItemStatusClearAll);
			} catch (Exception e) {
				Utility.clickThroughJavaScript(driver, res.ItemStatusClearAll);
			}
			String[] options = reports.splitComaSeperatedValuesfromExcel(ItemStatusOptions);
			reports.checkRequiredAdvancedOption(driver, test_steps, options);
			res.ItemStatus.click();
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <selectReservationStatusOptionsGiventhroughExcel> Description: <This method
	 * selects Reservation Status Advanced Inputs given through Excel> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps, String
	 * reservationStatusOptions> Return value: <void> Created By: <Naveen Kadthala>
	 * Created On: <24/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void selectReservationStatusOptionsGiventhroughExcel(WebDriver driver, ArrayList<String> test_steps,
			String reservationStatusOptions) {
		ReportsV2 reports = new ReportsV2();
		Elements_Reports res = new Elements_Reports(driver);
		// res.ReservationStatus.click();

		if (!reservationStatusOptions.contentEquals("")) {
			Utility.clickThroughJavaScript(driver, res.ReservationStatus);
			Utility.clickThroughAction(driver, res.ReservationStatusClearAll);
			String[] options = reports.splitComaSeperatedValuesfromExcel(reservationStatusOptions);
			reports.checkRequiredAdvancedOption(driver, test_steps, options);
			res.ReservationStatus.click();
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <selectTaxExemptLedgerItemsGiventhroughExcel>
	 * Description: <This method selects Tax Exempt Ledger Items given through
	 * Excel> Input parameters: <WebDriver driver, ArrayList<String> test_steps,
	 * String taxExemptLedgerItemOption> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <24/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void selectTaxExemptLedgerItemsGiventhroughExcel(WebDriver driver, ArrayList<String> test_steps,
			String TaxExemptLedgerItemsOption) throws InterruptedException {
		ReportsV2 reports = new ReportsV2();
		Elements_Reports res = new Elements_Reports(driver);
		if (!TaxExemptLedgerItemsOption.isEmpty()) {
			// res.TaxExemptLedgerItems.click();
			Utility.clickThroughJavaScript(driver, res.TaxExemptLedgerItems);
			Wait.wait2Second();
			// Utility.clickThroughJavaScript(driver, res.TaxExemptListExpand);
			Utility.clickThroughAction(driver, res.TaxExemptListExpand);
			// res.TaxExemptListExpand.click();
			reports.SelectGivenTaxExemptLedgerItems(driver, test_steps, TaxExemptLedgerItemsOption);
			res.TaxExemptLedgerItems.click();
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <selectMarketSegmentOptionGiventhroughExcel>
	 * Description: <This method selects Market Segment Option given through Excel>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps, String
	 * marketSegmentOption> Return value: <void> Created By: <Naveen Kadthala>
	 * Created On: <24/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void selectMarketSegmentOptionGiventhroughExcel(WebDriver driver, ArrayList<String> test_steps,
			String marketSegmentOption) throws InterruptedException {
		ReportsV2 reports = new ReportsV2();
		Elements_Reports res = new Elements_Reports(driver);

		if (!marketSegmentOption.isEmpty()) {
			try {
				res.MarketSegment.click();
			} catch (Exception e) {
				Utility.clickThroughAction(driver, res.MarketSegment);
			}

			Wait.wait2Second();
			// res.MarketSegmentListExpand.click();
			// Utility.clickThroughJavaScript(driver, res.MarketSegmentListExpand);
			Utility.clickThroughAction(driver, res.MarketSegmentListExpand);
			reports.SelectGivenMarketSegmentOption(driver, test_steps, marketSegmentOption);
			try {
				res.MarketSegment.click();
			} catch (Exception e) {
				Utility.clickThroughAction(driver, res.MarketSegment);
			}
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <selectReferralsOptionGiventhroughExcel>
	 * Description: <This method selects Referrals Option given through Excel> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps, String
	 * referralsOption> Return value: <void> Created By: <Naveen Kadthala> Created
	 * On: <24/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void selectReferralsOptionGiventhroughExcel(WebDriver driver, ArrayList<String> test_steps,
			String referralsOption) throws InterruptedException {
		ReportsV2 reports = new ReportsV2();
		Elements_Reports res = new Elements_Reports(driver);

		if (!referralsOption.isEmpty()) {
			// res.Referrals.click();
			Utility.clickThroughJavaScript(driver, res.Referrals);
			Wait.wait1Second();
			// res.ReferralstListExpand.click();
			Utility.clickThroughAction(driver, res.ReferralstListExpand);
			reports.SelectGivenReferralsOption(driver, test_steps, referralsOption);
			res.Referrals.click();
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <selectIncludeDataFromOptionsGiventhroughExcel>
	 * Description: <This method selects IncludeDataFrom Options given through
	 * Excel> Input parameters: <WebDriver driver, ArrayList<String> test_steps,
	 * String IncludeDataFromUsers, String IncludeDataFromProperties, String
	 * IncludeDataFromShiftTimeStartHours, String
	 * IncludeDataFromShiftTimeStartMinutes,String
	 * IncludeDataFromShiftTimeStartAmPm, String IncludeDataFromShiftTimeEndHours,
	 * String IncludeDataFromShiftTimeEndMinutes, String
	 * IncludeDataFromShiftTimeEndAmPm> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <24/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void selectIncludeDataFromOptionsGiventhroughExcel(WebDriver driver, ArrayList<String> test_steps,
			String IncludeDataFromUsers, String IncludeDataFromShiftTimeStartHours,
			String IncludeDataFromShiftTimeStartMinutes, String IncludeDataFromShiftTimeStartAmPm,
			String IncludeDataFromShiftTimeEndHours, String IncludeDataFromShiftTimeEndMinutes,
			String IncludeDataFromShiftTimeEndAmPm) throws InterruptedException {
		ReportsV2 reports = new ReportsV2();
		Elements_Reports res = new Elements_Reports(driver);

		Wait.wait1Second();
		res.IncludeDataFrom.click();

		// select users
		if (!IncludeDataFromUsers.isEmpty()) {
			reports.selectUserFromIncludeDataForm(driver, IncludeDataFromUsers, test_steps);
		}
		
		// select shift start time and shift end time
		boolean condition1 = (!IncludeDataFromShiftTimeStartHours.equals(""));
		boolean condition2 = (!IncludeDataFromShiftTimeStartMinutes.equals(""));
		boolean condition3 = (!IncludeDataFromShiftTimeStartAmPm.equals(""));
		boolean condition4 = (!IncludeDataFromShiftTimeEndHours.equals(""));
		boolean condition5 = (!IncludeDataFromShiftTimeEndMinutes.equals(""));
		boolean condition6 = (!IncludeDataFromShiftTimeEndAmPm.equals(""));

		if (condition1 && condition2 && condition3 && condition4 && condition5 && condition6) {
			Utility.clickThroughAction(driver, res.buttonShiftTime);
			reports.selectShiftTimeStart(driver, IncludeDataFromShiftTimeStartHours,
					IncludeDataFromShiftTimeStartMinutes, IncludeDataFromShiftTimeStartAmPm, test_steps);
			reports.selectShiftTimeEnd(driver, IncludeDataFromShiftTimeEndHours, IncludeDataFromShiftTimeEndMinutes,
					IncludeDataFromShiftTimeEndAmPm, test_steps);
		}
		//res.IncludeDataFrom.click();
	}
	
	public void selectIncludeDataFromOptions(WebDriver driver, ArrayList<String> test_steps,
			String IncludeDataFromUsers, String shiftTime) throws InterruptedException {
		ReportsV2 reports = new ReportsV2();
		Elements_Reports res = new Elements_Reports(driver);
		
		//shiftTime = "5:45:AM|6:45:AM";
		
		String[] time = shiftTime.split("\\|");
		String[] startTime = time[0].split(":");
		String[] endTime = time[1].split(":");
		
		String IncludeDataFromShiftTimeStartHours = startTime[0];
		String IncludeDataFromShiftTimeStartMinutes = startTime[1]; 
		String IncludeDataFromShiftTimeStartAmPm = startTime[2];
		String IncludeDataFromShiftTimeEndHours = endTime[0]; 
		String IncludeDataFromShiftTimeEndMinutes = endTime[1];
		String IncludeDataFromShiftTimeEndAmPm = endTime[2];

		Wait.wait1Second();
		res.IncludeDataFrom.click();

		// select users
		if (!IncludeDataFromUsers.isEmpty()) {
			reports.selectUserFromIncludeDataForm(driver, IncludeDataFromUsers, test_steps);
		}
		
		// select shift start time and shift end time
		Utility.clickThroughAction(driver, res.buttonShiftTime);
		reports.selectShiftTimeStart(driver, IncludeDataFromShiftTimeStartHours,
				IncludeDataFromShiftTimeStartMinutes, IncludeDataFromShiftTimeStartAmPm, test_steps);
		reports.selectShiftTimeEnd(driver, IncludeDataFromShiftTimeEndHours, IncludeDataFromShiftTimeEndMinutes,
				IncludeDataFromShiftTimeEndAmPm, test_steps);
		
		//res.IncludeDataFrom.click();
	}

	/*
	 * #########################################################################
	 * #########################################################################
	 * ########################
	 *
	 * ' Method Name: <AccountSave> ' Description: <This method will Save account
	 * when created/Modification: remove unnecessary wait> ' Input
	 * parameters:(WebDriver) ' Return value: void ' Updated By: <Adhnan Ghaffar> '
	 * Updated On: <06/02/2020>
	 * #########################################################################
	 * #########################################################################
	 * ########################
	 */
	public ArrayList<String> AccountSave(WebDriver driver, ExtentTest test, String AccountName,
			ArrayList<String> test_steps) throws InterruptedException {

		Elements_Accounts CreateAccount = new Elements_Accounts(driver);
		Wait.waitForElementToBeVisibile(By.xpath(OR.Account_Save_Button), driver);
		Wait.waitForElementToBeClickable(By.xpath(OR.Account_Save_Button), driver);
		CreateAccount.Account_Save_Button.click();
		test_steps.add("Click Save ");
		reportLogger.info("Click Save");
		Wait.WaitForElementUsingClassName(driver, OR.Toaster_Message);
		Wait.waitForElementToBeVisibile(By.className(OR.Toaster_Message), driver);
		String Toast_Message = CreateAccount.Toaster_Message.getText();

		String dirty = "(//img[@src='scripts/innCenter/V4/server/dirty.png'])[7]";

		if (Utility.isElementDisplayed(driver, By.xpath(dirty))
				|| Toast_Message.contains("Please fill in all the mandatory fields")) {
			reportLogger.info("************* Please fill in all the mandatory fields ************");
			test_steps.add("Please fill in all the mandatory fields");
		} else {
			test_steps.add(Toast_Message);
			reportLogger.info(Toast_Message);
			assertEquals(Toast_Message, "The account " + AccountName + " has been successfully created.",
					"New account does not create");
		}

		return test_steps;
	}

	public Double deposit(WebDriver driver, ArrayList test_steps, String IsDepositOverride,
			String DepositOverrideAmount) throws InterruptedException {
		// Wait.wait5Second();
		Elements_CPReservation res = new Elements_CPReservation(driver);
		Wait.WaitForElement(driver, OR_Reservation.CP_NewReservation_DepositAmount);
		String deposit = res.CP_NewReservation_DepositAmount.getAttribute("textContent");
		test_steps.add("Deposit amount is : " + deposit);
		reportLogger.info("Deposit amount is : " + deposit);
		deposit = deposit.trim();
		char ch = deposit.charAt(0);
		deposit = deposit.replace("$", "");
		deposit = deposit.trim();
		Double d = Double.parseDouble(deposit);

		if (IsDepositOverride.equalsIgnoreCase("Yes") && d > 0) {
			Wait.WaitForElement(driver, OR_Reservation.CP_NewReservation_OverrideDeposit);
			res.CP_NewReservation_OverrideDeposit.click();
			test_steps.add("Clicking on override deposit amount");
			reportLogger.info("Clicking on override deposit amount");
			Wait.wait2Second();
			Wait.WaitForElement(driver, OR_Reservation.CP_NewReservation_OverrideDepositAmoount);
			res.CP_NewReservation_OverrideDepositAmoount.sendKeys(DepositOverrideAmount);
			test_steps.add("Override deposit amount is : " + ch + " " + DepositOverrideAmount);
			reportLogger.info("Override deposit amount is : " + ch + " " + DepositOverrideAmount);
			d = Double.parseDouble(DepositOverrideAmount.trim());
		}
		return d;
	}

	public void validate_GuestInfo(WebDriver driver, ArrayList test_steps, String Salutation, String GuestFirstName,
			String GuestLastName, String PhoneNumber, String AlternatePhone, String Email, String Country,
			String Account, String Address1, String Address2, String Address3, String State, String City,
			String PostalCode) {
		test_steps.add("******************* Guest Info fields verification **********************");
		reportLogger.info("******************* Guest Info fields verification **********************");

		Elements_CPReservation res = new Elements_CPReservation(driver);
		Wait.WaitForElement(driver, OR_Reservation.CP_GuestInfo_GuestName);

		String name = Salutation.trim() + " " + GuestFirstName.trim() + " " + GuestLastName.trim();
		String guestname = res.CP_GuestInfo_GuestName.getText().trim();
		reportLogger.info(guestname);
		if (guestname.equalsIgnoreCase(name.trim())) {
			test_steps.add("Reservation Guest Info GuestName field verified : " + name);
			reportLogger.info("Reservation Guest Info GuestName field verified : " + name);
		} else {
			test_steps.add("Reservation Guest Info GuestName field not found : " + name);
			reportLogger.info("Reservation Guest Info GuestName field not found : " + name);
		}

		String contactname = res.CP_GuestInfo_ContactName.getText().trim();
		reportLogger.info(contactname);
		if (contactname.equalsIgnoreCase(name.trim())) {
			test_steps.add("Reservation Guest Info ContactName field verified : " + name);
			reportLogger.info("Reservation Guest Info ContactName field verified : " + name);
		} else {
			test_steps.add("Reservation Guest Info ContactName field not found : " + name);
			reportLogger.info("Reservation Guest Info ContactName field not found : " + name);
		}

		PhoneNumber = PhoneNumber.replace("" + PhoneNumber.trim().charAt(0), "(" + PhoneNumber.trim().charAt(0));
		PhoneNumber = PhoneNumber.replace("" + PhoneNumber.trim().charAt(4), ")" + PhoneNumber.trim().charAt(4));
		PhoneNumber = PhoneNumber.replace("" + PhoneNumber.trim().charAt(5), " " + PhoneNumber.trim().charAt(5));
		PhoneNumber = PhoneNumber.replace("" + PhoneNumber.trim().charAt(9), "-" + PhoneNumber.trim().charAt(9));

		String code = null;
		if (Country.equalsIgnoreCase("United States")) {
			code = "1";
		} else if (Country.equalsIgnoreCase("United Kingdom")) {
			code = "41";
		}
		code = code + "-";
		PhoneNumber = code + PhoneNumber;
		reportLogger.info(PhoneNumber);

		String phone = res.CP_GuestInfo_Phone.getText().trim();
		if (phone.equalsIgnoreCase(PhoneNumber)) {
			test_steps.add("Reservation Guest Info PhoneNumber field verified : " + PhoneNumber);
			reportLogger.info("Reservation Guest Info PhoneNumber field verified : " + PhoneNumber);
		} else {
			test_steps.add("Reservation Guest Info PhoneNumber field not found : " + PhoneNumber);
			reportLogger.info("Reservation Guest Info PhoneNumber field not found : " + PhoneNumber);
		}

		AlternatePhone = AlternatePhone.replace("" + AlternatePhone.trim().charAt(0),
				"(" + AlternatePhone.trim().charAt(0));
		AlternatePhone = AlternatePhone.replace("" + AlternatePhone.trim().charAt(4),
				")" + AlternatePhone.trim().charAt(4));
		AlternatePhone = AlternatePhone.replace("" + AlternatePhone.trim().charAt(5),
				" " + AlternatePhone.trim().charAt(5));
		AlternatePhone = AlternatePhone.replace("" + AlternatePhone.trim().charAt(9),
				"-" + AlternatePhone.trim().charAt(9));

		AlternatePhone = code + AlternatePhone;
		reportLogger.info(AlternatePhone);

		phone = res.CP_GuestInfo_AlternatePhone.getText().trim();
		if (phone.equalsIgnoreCase(AlternatePhone)) {
			test_steps.add("Reservation Guest Info AlternatePhone field verified : " + AlternatePhone);
			reportLogger.info("Reservation Guest Info AlternatePhone field verified : " + AlternatePhone);
		} else {
			test_steps.add("Reservation Guest Info AlternatePhone field not found : " + AlternatePhone);
			reportLogger.info("Reservation Guest Info AlternatePhone field not found : " + AlternatePhone);
		}

		String mail = res.CP_GuestInfo_Email.getText().trim();
		reportLogger.info(mail);
		if (mail.equalsIgnoreCase(Email.trim())) {
			test_steps.add("Reservation Guest Info Email field verified : " + Email);
			reportLogger.info("Reservation Guest Info Email field verified : " + Email);
		} else {
			test_steps.add("Reservation Guest Info Email field not found : " + Email);
			reportLogger.info("Reservation Guest Info Email field not found : " + Email);
		}

		String account = driver
				.findElement(By.xpath(
						"//guest-info//span[contains(text(),'Gues')]/../..//label[text()='Account']/following::span"))
				.getText().trim();
		// res.CP_GuestInfo_Account.getText().trim();
		if (account.equalsIgnoreCase("-") && (Account.equalsIgnoreCase("") || Account.isEmpty())) {
			test_steps.add("Reservation Guest Info Account field verified");
			reportLogger.info("Reservation Guest Info Account field verified");
		} else if (!(account.equalsIgnoreCase("-")) && !(Account.equalsIgnoreCase("") || Account.isEmpty())) {
			if (account.contentEquals(Account.trim())) {
				test_steps.add("Reservation Guest Info Account field verified : " + Account);
				reportLogger.info("Reservation Guest Info Account field verified  : " + Account);
			} else {
				test_steps.add("Reservation Guest Info Account field not found : " + Account);
				reportLogger.info("Reservation Guest Info Account field not found : " + Account);
			}
		} else {
			test_steps.add("Reservation Guest Info Account field not found : " + Account);
			reportLogger.info("Reservation Guest Info Account field not found : " + Account);
		}

		String address1 = res.CP_GuestInfo_Address1.getText().trim();
		reportLogger.info(address1);
		if (address1.equalsIgnoreCase(Address1.trim())) {
			test_steps.add("Reservation Guest Info Address1 field verified : " + Address1);
			reportLogger.info("Reservation Guest Info Address1 field verified : " + Address1);
		} else {
			test_steps.add("Reservation Guest Info Address1 field not found : " + Address1);
			reportLogger.info("Reservation Guest Info Address1 field not found : " + Address1);
		}

		String address2 = res.CP_GuestInfo_Address2.getText().trim();
		reportLogger.info(address2);
		if (address2.equalsIgnoreCase(Address2.trim())) {
			test_steps.add("Reservation Guest Info Address2 field verified : " + Address2);
			reportLogger.info("Reservation Guest Info Address2 field verified : " + Address2);
		} else {
			test_steps.add("Reservation Guest Info Address2 field not found : " + Address2);
			reportLogger.info("Reservation Guest Info Address2 field not found : " + Address2);
		}

		String address3 = res.CP_GuestInfo_Address3.getText().trim();
		reportLogger.info(address3);
		if (address3.equalsIgnoreCase(Address3.trim())) {
			test_steps.add("Reservation Guest Info Address3 field verified : " + Address3);
			reportLogger.info("Reservation Guest Info Address3 field verified : " + Address3);
		} else {
			test_steps.add("Reservation Guest Info Address3 field not found : " + Address3);
			reportLogger.info("Reservation Guest Info Address3 field not found : " + Address3);
		}

		String city = res.CP_GuestInfo_City.getText().trim();
		reportLogger.info(city);
		if (city.equalsIgnoreCase(City.trim())) {
			test_steps.add("Reservation Guest Info City field verified : " + City);
			reportLogger.info("Reservation Guest Info City field verified : " + City);
		} else {
			test_steps.add("Reservation Guest Info City field not found : " + City);
			reportLogger.info("Reservation Guest Info City field not found : " + City);
		}

		String postalcode = res.CP_GuestInfo_PostalCode.getText().trim();
		reportLogger.info(postalcode);
		if (postalcode.equalsIgnoreCase(PostalCode.trim())) {
			test_steps.add("Reservation Guest Info PostalCode field verified : " + PostalCode);
			reportLogger.info("Reservation Guest Info PostalCode field verified : " + PostalCode);
		} else {
			test_steps.add("Reservation Guest Info PostalCode field not found : " + PostalCode);
			reportLogger.info("Reservation Guest Info PostalCode field not found : " + PostalCode);
		}

		String country = res.CP_GuestInfo_Country.getText().trim();
		reportLogger.info(country);
		if (country.equalsIgnoreCase(Country.trim())) {
			test_steps.add("Reservation Guest Info Country field verified : " + Country);
			reportLogger.info("Reservation Guest Info Country field verified : " + Country);
		} else {
			test_steps.add("Reservation Guest Info Country field not found : " + Country);
			reportLogger.info("Reservation Guest Info Country field not found : " + Country);
		}

		String state = res.CP_GuestInfo_State.getText().trim();
		reportLogger.info(state);

		if (!(state.equalsIgnoreCase("") || state.isEmpty())) {
			if (state.equalsIgnoreCase(State.trim())) {
				test_steps.add("Reservation Guest Info State field verified : " + State);
				reportLogger.info("Reservation Guest Info State field verified : " + State);
			} else {
				test_steps.add("Reservation Guest Info State field not found : " + State);
				reportLogger.info("Reservation Guest Info State field not found : " + State);
			}
		}
	}
	// **********************//

	public ArrayList<String> selectRoom(WebDriver driver, ArrayList<String> test_steps, String RoomClass,
			String IsAssign, String Account) throws InterruptedException {
		String room1 = "(//section[@class='ir-roomClassDetails manual-override']//span[contains(text(),'" + RoomClass
				+ "')]//..//..//div[2]//span)[1]";
		String room = "//section[@class='ir-roomClassDetails manual-override']//span[contains(text(),'" + RoomClass
				+ "')]//..//..//div[2]//span";
		System.out.println("IsAssign: " + IsAssign);

		String rooms;
		try {
			Wait.waitForElementToBeVisibile(By.xpath(room1), driver, 20); // Wait.explicit_wait_xpath(driver, room1);
			rooms = driver.findElement(By.xpath(room1)).getText();
		} catch (Exception e) {
			Wait.waitForElementToBeVisibile(By.xpath(room), driver, 20); // Wait.WaitForElement(driver, room);
			rooms = driver.findElement(By.xpath(room)).getText();
		}

		reportLogger.info(rooms);
		String[] roomsCount = rooms.split(" ");
		int count = Integer.parseInt(roomsCount[0].trim());
		if (count > 0) {
			String sel = "//section[@class='ir-roomClassDetails manual-override']//span[text()='" + RoomClass
					+ "']//..//..//..//following-sibling::div//div//select";

			String rulessize = "//section[@class='ir-roomClassDetails manual-override']//span[text()='"

					+ RoomClass.trim() + "']/following-sibling::span";
			reportLogger.info(rulessize);

			int ruleCount = driver.findElements(By.xpath(rulessize)).size();
			WebElement ele = driver.findElement(By.xpath(sel));
			test_steps.add("Selected room class : " + RoomClass);
			reportLogger.info("Selected room class : " + RoomClass);
			if (IsAssign.equalsIgnoreCase("No")) {
				String expand = "//section[@class='ir-roomClassDetails manual-override']//span[text()='" + RoomClass
						+ "']//..//..//..//following-sibling::div//div//select//following-sibling::div//button";
				Wait.WaitForElement(driver, expand);
				driver.findElement(By.xpath(expand)).click();

				String unAssign = "(//section[@class='ir-roomClassDetails manual-override']//span[contains(text(),'"
						+ RoomClass
						+ "')]//..//..//..//following-sibling::div//div//select//following-sibling::div//ul//span[text()='Unassigned'])";
				Wait.WaitForElement(driver, unAssign);
				driver.findElement(By.xpath(unAssign)).click();
				test_steps.add("Selected room number : Unassigned");
				reportLogger.info("Selected room number : Unassigned");
			} else if (IsAssign.equalsIgnoreCase("Yes")) {

				String expand = "//section[@class='ir-roomClassDetails manual-override']//span[contains(text(),'"
						+ RoomClass
						+ "')]//..//..//..//following-sibling::div//div//select//following-sibling::div/button";
				Wait.waitForElementToBeClickable(By.xpath(expand), driver, 20);
				Wait.waitForElementToBeClickable(By.xpath(expand), driver);
				WebElement elementExpand = driver.findElement(By.xpath(expand));
				Utility.ScrollToElement_NoWait(elementExpand, driver);
				elementExpand.click();

				String roomnum = "//section[@class='ir-roomClassDetails manual-override']//span[contains(text(),'"
						+ RoomClass
						+ "')]//..//..//..//following-sibling::div//div//select//following-sibling::div//ul//li//span[@class='text']";
				reportLogger.info(roomnum);
				List<WebElement> getRoomNumber = driver.findElements(By.xpath(roomnum));
				System.out.println(getRoomNumber.size());
				String getMinimumNumber = getRoomNumber.get(1).getText();
				System.out.println("getMinimumNumber: " + getMinimumNumber);

				String getMaxmumNumber = getRoomNumber.get(getRoomNumber.size() - 1).getAttribute("textContent");
				System.out.println("getMaxmumNumber: " + getMaxmumNumber);
				getMaxmumNumber = getMaxmumNumber.trim();
				int maxNumber = Integer.parseInt(getMaxmumNumber);
				int minNumber = Integer.parseInt(getMinimumNumber);

				System.out.println("maxNumber : " + maxNumber);
				System.out.println("maxNumber : " + maxNumber);

				Random random = new Random();
				int randomNumber = random.nextInt(maxNumber - minNumber) + minNumber;
				IsAssign = String.valueOf(randomNumber);
				boolean isBreak = false;
				for (int j = 0; j < 5; j++) {
					System.out.println("randomNumber: " + randomNumber);
					for (int i = 1; i < getRoomNumber.size(); i++) {
						// System.out.println("in loop " + i);
						String getRoomNumberFromOptions = getRoomNumber.get(i).getText();
						getRoomNumberFromOptions = getRoomNumberFromOptions.trim();
						if (getRoomNumberFromOptions.equals(IsAssign)) {
							isBreak = true;
							break;
						}

					}
					if (isBreak == false) {
						random = new Random();
						randomNumber = random.nextInt(maxNumber - minNumber) + minNumber;
						IsAssign = String.valueOf(randomNumber);
					}
					if (isBreak) {
						break;
					}

				}
				System.out.print(" Random Number is :" + randomNumber);

				String assignRoomNo = "(//section[@class='ir-roomClassDetails manual-override']//span[contains(text(),'"
						+ RoomClass
						+ "')]//..//..//..//following-sibling::div//div//select//following-sibling::div//ul//span[text()='"
						+ IsAssign + "'])";
				Wait.waitForElementToBeClickable(By.xpath(assignRoomNo), driver, 10);
				driver.findElement(By.xpath(assignRoomNo)).click();
				test_steps.add("Selecting room <b>" + IsAssign + "</b> from <b>" + RoomClass + "</b> room class");
				reportLogger.info("Selecting room <b>" + IsAssign + "</b> from <b>" + RoomClass + "</b> room class");

			} else {

				String expand = "//section[@class='ir-roomClassDetails manual-override']//span[contains(text(),'"
						+ RoomClass
						+ "')]//..//..//..//following-sibling::div//div//select//following-sibling::div//button";
				Wait.waitForElementToBeClickable(By.xpath(expand), driver, 20);
				Wait.waitForElementToBeClickable(By.xpath(expand), driver);
				WebElement elementExpand = driver.findElement(By.xpath(expand));
				Utility.ScrollToElement_NoWait(elementExpand, driver);
				elementExpand.click();

				String roomnum = "//section[@class='ir-roomClassDetails manual-override']//span[contains(text(),'"
						+ RoomClass
						+ "')]//..//..//..//following-sibling::div//div//select//following-sibling::div//ul//li//span[@class='text']";
				System.out.println(roomnum);
				List<WebElement> getRoomNumber = driver.findElements(By.xpath(roomnum));
				System.out.println(getRoomNumber.size());
				String getMinimumNumber = getRoomNumber.get(1).getText();
				System.out.println("getMinimumNumber: " + getMinimumNumber);

				String getMaxmumNumber = getRoomNumber.get(getRoomNumber.size() - 1).getAttribute("textContent");
				System.out.println("getMaxmumNumber: " + getMaxmumNumber);
				getMaxmumNumber = getMaxmumNumber.trim();
				int maxNumber = Integer.parseInt(getMaxmumNumber);
				int minNumber = Integer.parseInt(getMinimumNumber);

				System.out.println("maxNumber : " + maxNumber);
				System.out.println("maxNumber : " + maxNumber);

				Random random = new Random();
				int randomNumber = random.nextInt(maxNumber - minNumber) + minNumber;
				IsAssign = String.valueOf(randomNumber);
				boolean isBreak = false;
				for (int j = 0; j < 5; j++) {
					System.out.println("randomNumber: " + randomNumber);
					for (int i = 1; i < getRoomNumber.size(); i++) {
						System.out.println("in loop " + i);
						String getRoomNumberFromOptions = getRoomNumber.get(i).getText();
						getRoomNumberFromOptions = getRoomNumberFromOptions.trim();
						if (getRoomNumberFromOptions.equals(IsAssign)) {
							isBreak = true;
							break;
						}

					}
					if (isBreak == false) {
						random = new Random();
						randomNumber = random.nextInt(maxNumber - minNumber) + minNumber;
						IsAssign = String.valueOf(randomNumber);
					}
					if (isBreak) {
						break;
					}

				}
				System.out.print(" Random Number is :" + randomNumber);

				String assignRoomNo = "(//section[@class='ir-roomClassDetails manual-override']//span[contains(text(),'"
						+ RoomClass
						+ "')]//..//..//..//following-sibling::div//div//select//following-sibling::div//ul//span[text()='"
						+ IsAssign + "'])";
				Wait.waitForElementToBeClickable(By.xpath(assignRoomNo), driver, 10);
				driver.findElement(By.xpath(assignRoomNo)).click();
				test_steps.add("Selecting room <b>" + IsAssign + "</b> from <b>" + RoomClass + "</b> room class");
				reportLogger.info("Selecting room <b>" + IsAssign + "</b> from <b>" + RoomClass + "</b> room class");
			}

			String select = "//section[@class='ir-roomClassDetails manual-override']//span[contains(text(),'"
					+ RoomClass + "')]//..//..//..//following-sibling::div//span[contains(text(),'SELECT')]";
			Wait.WaitForElement(driver, select);
			driver.findElement(By.xpath(select)).click();

			String loading = "(//div[@class='ir-loader-in'])[2]";
			int counter = 0;
			while (true) {
				if (!driver.findElement(By.xpath(loading)).isDisplayed()) {
					break;
				} else if (counter == 10) {
					break;
				} else {
					counter++;
					Wait.wait2Second();
				}
			}

			reportLogger.info("Waited to loading symbol");

			reportLogger.info("Rule Count : " + ruleCount);

			// System.out.println("Waited to loading symbol");

			// System.out.println("Rule Count : " + ruleCount);

			/*
			 * if (ruleCount > 1) { Wait.wait5Second(); String rules =
			 * "//p[text()='Selecting this room will violate the following rules']/../..//button[text()='Yes']"
			 * ;
			 * 
			 * if (driver.findElements(By.xpath(rules)).size() > 0) { Wait.wait2Second();
			 * driver.findElement(By.xpath(rules)).click(); test_steps.add(
			 * "Selecting this room will violate the following rules : Are you sure you want to proceed? : yes"
			 * ); reslogger.info(
			 * "Selecting this room will violate the following rules : Are you sure you want to proceed? : yes"
			 * );
			 * 
			 * loading = "(//div[@class='ir-loader-in'])[2]"; counter = 0; while (true) { if
			 * (!driver.findElement(By.xpath(loading)).isDisplayed()) { break; } else if
			 * (counter == 4) { break; } else { counter++; Wait.wait2Second(); } } } }
			 */
			if (!(Account.isEmpty() || Account.equalsIgnoreCase(""))) {
				String policy = "//p[contains(text(),'Based on the changes made')]/../..//button[text()='Yes']";
				Wait.WaitForElement(driver, policy);
				driver.findElement(By.xpath(policy)).click();
				test_steps.add("Based on the changes made, new policies are applicable.? : yes");
				reportLogger.info("Based on the changes made, new policies are applicable.? : yes");

				loading = "(//div[@class='ir-loader-in'])[2]";
				counter = 0;
				while (true) {
					if (!driver.findElement(By.xpath(loading)).isDisplayed()) {
						break;
					} else if (counter == 3) {
						break;
					} else {
						counter++;
						Wait.wait2Second();
					}
				}
			}

		} else {
			test_steps.add("Rooms Count <=0 for " + RoomClass + " for specified date");
			reportLogger.info("Rooms Count <=0 for " + RoomClass + " for specified date");
		}
		return test_steps;
	}

	public boolean verify_TaskSections(WebDriver driver, ArrayList test_steps) {
		test_steps.add("******************* Verify Task section **********************");
		reportLogger.info("******************* Verify Task section **********************");
		String task = "//button[text()='ADD TASK']";
		if (driver.findElement(By.xpath(task)).isEnabled()) {
			test_steps.add("Task Section is displayed");
			reportLogger.info("Task Section is displayed");
			return true;
		} else {
			test_steps.add("Task Section is not displayed");
			reportLogger.info("Task Section is not displayed");
			return false;
		}
	}

	// Ledger Run Report

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateStandardReportHeaderExistence>
	 * Description: <This method validates existence of Standard Report Header>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateStandardReportHeaderExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			String actual = res.GRHeaderTitle.getText().trim();
			String expected = null;
			if (Utility.isElementDisplayed(driver, By.xpath(
					"//*[@class='ReportHeader_rightContent_BYZVl']/ul/li/div/div/span[@class='ant-select-selection-item']"))) {
				expected = "Ledger Balances Report -" + driver.findElement(By.xpath(
						"//*[@class='ReportHeader_rightContent_BYZVl']/ul/li/div/div/span[@class='ant-select-selection-item']"))
						.getText().trim();
			} else {
				expected = "Ledger Balances Report -" + driver
						.findElement(By.xpath(
								"//*[@class='ReportHeader_rightContent_BYZVl']/ul/li[contains(@class,'property')]/div"))
						.getText().trim();
			}
			reportLogger.info("Success - Standard Report Header existence validation");
			test_steps.add("Success - Standard Report Header existence validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Standard Report Header existence validation");
			test_steps.add("AssertionError - FAIL - Standard Report Header existence validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Standard Report Header existence validation");
			test_steps.add("AssertionError - FAIL - Standard Report Header existence validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateReportTypeCaptionExistence>
	 * Description: <This method validates existence of Report Type> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateReportTypeCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRReportTypeCaption.isDisplayed();
			reportLogger.info("Success - Report Type Caption existence validation");
			test_steps.add("Success - Report Type Caption existence validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Report Type Caption existence validation");
			test_steps.add("AssertionError - Report Type Caption existence validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Report Type Caption existence validation");
			test_steps.add("AssertionError - Report Type Caption existence validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateReportTypeValue> Description: <This
	 * method validates value of Report Type> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateReportTypeValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			String s = res.GRReportTypeValue.getText();
			if (s.equals("Ledger Balances Report")) {
				reportLogger.info("Success - Report Type value validation");
				test_steps.add("Success - Report Type value validation");
			} else {
				reportLogger.info("FAIL - Report Type value validation");
				test_steps.add("AssertionError - FAIL - Report Type value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Report Type value validation");
			test_steps.add("AssertionError - FAIL - Report Type value validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Report Type value validation");
			test_steps.add("AssertionError - FAIL - Report Type value validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateDateRangeCaptionExistence>
	 * Description: <This method validates Date Range Captino existence> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateDateRangeCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRDateRangeCaption.isDisplayed();
			reportLogger.info("Success - Date Range Caption validation");
			test_steps.add("Success - Date Range Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Date Range Caption validation");
			test_steps.add("AssertionError - FAIL - Date Range Caption validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Date Range Caption validation");
			test_steps.add("AssertionError - FAIL - Date Range Caption validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateDateRangeValue> Description: <This
	 * method validates value of Date Range in Report generated> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateDateRangeValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			
			String s1 = driver
					.findElement(By
							.xpath("//span[contains(text(),'Date Range')]//following-sibling::span"))
					.getText().trim();  ////div[contains(@class,'DateRange')]/div/span[@class='ant-select-selection-item']

			String startDate = getStartDate(driver, test_steps);
			Date date1 = new SimpleDateFormat("MMM d, yyy").parse(startDate);
			String s2 = new SimpleDateFormat("MMM dd, yyy").format(date1);

			String endDate = getEndDate(driver, test_steps);
			Date date2 = new SimpleDateFormat("MMM d, yyy").parse(startDate);
			String s3 = new SimpleDateFormat("MMM dd, yyy").format(date2);

			String expValue = s1;  // + " | " + s2 + " to " + s3
			String actValue = res.GRDateRangeValue.getText();

			reportLogger.info("Expected value: "+expValue);
			reportLogger.info("Actual value: "+actValue);
			if (expValue.equals(actValue)) {
				reportLogger.info("Success - Date Range value validation");
				test_steps.add("Success - Date Range value validation");
			} else {
				reportLogger.info("Fail - Date Range value validation");
				test_steps.add("AssertionError - Fail - Date Range value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("Fail - Date Range value validation "+ e.toString());
			test_steps.add("AssertionError - Fail - Date Range value validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("Fail - Date Range value validation "+ e.toString());
			test_steps.add("AssertionError - Fail - Date Range value validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateAccountTypeCaptionexistence>
	 * Description: <This method validates Account Type Caption existence in Report
	 * generated> Input parameters: <WebDriver driver, ArrayList<String> test_steps>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateAccountTypeCaptionexistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRAccountTypeCaption.isDisplayed();
			reportLogger.info("Success - Account Type Caption validation");
			test_steps.add("Success - Account Type Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Account Type Caption validation");
			test_steps.add("AssertionError - FAIL - Account Type Caption validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Account Type Caption validation");
			test_steps.add("AssertionError - FAIL - Account Type Caption validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateAccountTypeValue> Description: <This
	 * method validates value of Account Type in Report generated> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateAccountTypeValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			String actValue = res.GRAccountTypeValue.getText();
			int x = driver.findElements(By.xpath("//div[@id='accountTypes']/label[contains(@class,'checked')]")).size();
			if (x == 0 && actValue.equals("None")) {
				reportLogger.info("Success - Account Type value validation");
				test_steps.add("Success - Account Type value validation");
			} else if (x == 8 && actValue.equals("All")) {
				reportLogger.info("Success - Account Type value validation");
				test_steps.add("Success - Account Type value validation");
			} else if (x > 0 && x < 8) {
				List<WebElement> l = driver
						.findElements(By.xpath("//div[@id='accountTypes']/label[contains(@class,'checked')]"));
				String value = null;
				for (int i = 1; i < l.size(); i++) {
					value = l.get(0).getText() + " | " + l.get(i).getText();
					if (actValue.equals(value)) {
						reportLogger.info("Success - Account Type value validation");
						test_steps.add("Success - Account Type value validation");
					} else {
						reportLogger.info("FAIL - Account Type value validation");
						test_steps.add("AssertionError - FAIL - Account Type value validation-<Br>");
					}
				}
			} else {
				reportLogger.info("FAIL - Account Type value validation");
				test_steps.add("AssertionError - FAIL - Account Type value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Account Type value validation");
			test_steps.add("AssertionError - FAIL - Account Type value validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Account Type value validation");
			test_steps.add("AssertionError - FAIL - Account Type value validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateReservationStatusCaptionexistence>
	 * Description: <This method validates Reservation Status Caption existence in
	 * Report generated> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateReservationStatusCaptionexistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRReservationStatusCaption.isDisplayed();
			reportLogger.info("Success - Reservation Status Caption validation");
			test_steps.add("Success - Reservation Status Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Reservation Status Caption validation");
			test_steps.add("AssertionError - FAIL - Reservation Status Caption validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Reservation Status Caption validation");
			test_steps.add("AssertionError - FAIL - Reservation Status Caption validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateReservationStatusValue> Description:
	 * <This method validates value of Reservation Status in Report generated> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateReservationStatusValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			String actValue = res.GRReservationStatusValue.getText();
			int x = driver.findElements(By.xpath("//div[@id='reservationStatus']/label[contains(@class,'checked')]"))
					.size();
			if (x == 0 && actValue.equals("None")) {
				reportLogger.info("Success - Reservation Status value validation");
				test_steps.add("Success - Reservation Status value validation");
			} else if (x == 11 && actValue.equals("All")) {
				reportLogger.info("Success - Reservation Status value validation");
				test_steps.add("Success - Reservation Status value validation");
			} else if (x > 0 && x < 10) {
				List<WebElement> l = driver
						.findElements(By.xpath("//div[@id='reservationStatus']/label[contains(@class,'checked')]"));
				String value = null;
				for (int i = 1; i < l.size(); i++) {
					value = l.get(0).getText() + " | " + l.get(i).getText();
					if (actValue.equals(value)) {
						reportLogger.info("Success - Reservation Status value validation");
						test_steps.add("Success - Reservation Status value validation");
					} else {
						reportLogger.info("FAIL - Reservation Status value validation");
						test_steps.add("AssertionError - FAIL - Reservation Status value validation-<Br>");
					}
				}
			} else {
				reportLogger.info("FAIL - Reservation Status value validation");
				test_steps.add("AssertionError - FAIL - Reservation Status value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Reservation Status value validation "+ e.toString());
			test_steps.add("AssertionError - FAIL - Reservation Status value validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Reservation Status value validation "+ e.toString());
			test_steps.add("AssertionError - FAIL - Reservation Status value validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateItemStatusCaptionexistence>
	 * Description: <This method validates Item Status Caption existence in Report
	 * generated> Input parameters: <WebDriver driver, ArrayList<String> test_steps>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateItemStatusCaptionexistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRItemStatusCaption.isDisplayed();
			reportLogger.info("Success - Item Status Caption validation");
			test_steps.add("Success - Item Status Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Item Status Caption validation");
			test_steps.add("AssertionError - FAIL - Item Status Caption validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Item Status Caption validation");
			test_steps.add("AssertionError - FAIL - Item Status Caption validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateItemStatusValue> Description: <This
	 * method validates value of Item Status in Report generated> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateItemStatusValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			String actValue = res.GRItemStatusValue.getText();
			int x = driver.findElements(By.xpath("//div[@id='itemStatus']/label[contains(@class,'checked')]")).size();
			if (x == 0 && actValue.equals("None")) {
				reportLogger.info("Success - Item Status value validation");
				test_steps.add("Success - Item Status value validation");
			} else if (x == 4 && actValue.equals("All")) {
				reportLogger.info("Success - Item Status value validation");
				test_steps.add("Success - Item Status value validation");
			} else if (x > 0 && x < 4) {
				List<WebElement> l = driver
						.findElements(By.xpath("//div[@id='itemStatus']/label[contains(@class,'checked')]"));
				String value = l.get(0).getAttribute("textContent");
				for (int i = 1; i < l.size(); i++) {
					value = value + " | " + l.get(i).getAttribute("textContent");
				}
				if (actValue.equals(value)) {
					reportLogger.info("Success - Item Status value validation");
					test_steps.add("Success - Item Status value validation");
				} else {
					reportLogger.info("FAIL - Item Status value validation");
					test_steps.add("AssertionError - FAIL - Item Status value validation-<Br>");
				}

			} else {
				reportLogger.info("FAIL - Item Status value validation");
				test_steps.add("AssertionError - FAIL - Item Status value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Item Status value validation");
			test_steps.add("AssertionError - FAIL - Item Status value validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Item Status value validation");
			test_steps.add("AssertionError - FAIL - Item Status value validation-<Br>" + e.toString());
		}
	}
	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateIncludeDataFromCaptionExistence>
	 * Description: <This method validates Include Data From Caption existence>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateIncludeDataFromCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRIncludeDataFromCaption.isDisplayed();
			reportLogger.info("Success - Include Data From Caption validation");
			test_steps.add("Success - Include Data From Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Include Data From Caption validation");
			test_steps.add("AssertionError - FAIL - Include Data From Caption validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Include Data From Caption validation");
			test_steps.add("AssertionError - FAIL - Include Data From Caption validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateIncludeDataFromValue> Description:
	 * <This method validates value of Include Data From in Report generated> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateIncludeDataFromValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);

			String expValue = driver.findElement(By.xpath(
					"//div[@class='CollapseHeader_textOverflow_INIKj'][contains(text(),'All Users | 00:00 to 00:00')]"))
					.getText().trim();
			String actValue = res.GRIncludeDataFromValue.getText().replace("-", "to").trim();

			if (expValue.equals(actValue)) {
				reportLogger.info("Success - Include Data Form value validation");
				test_steps.add("Success - Include Data Form value validation");
			} else {
				reportLogger.info("FAIL - Include Data Form value validation");
				test_steps.add("AssertionError - FAIL - Include Data Form value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Include Data Form value validation");
			test_steps.add("AssertionError - FAIL - Include Data Form value validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Include Data Form value validation");
			test_steps.add("AssertionError - FAIL - Include Data Form value validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateSortReportByCaptionExistence>
	 * Description: <This method validates Sort Report By Caption existence> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateSortReportByCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRSortReportByCaption.isDisplayed();
			reportLogger.info("Success - Sort Report By Caption validation");
			test_steps.add("Success - Sort Report By Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Sort Report By Caption validation");
			test_steps.add("AssertionError - FAIL - Sort Report By Caption validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Sort Report By Caption validation");
			test_steps.add("AssertionError - FAIL - Sort Report By Caption validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateSortReportByValue> Description: <This
	 * method validates value of Sort Report By in Report generated> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateSortReportByValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);

			String expValue = driver.findElement(By.xpath(
					"//b[text()='Sort Report By']/../../following-sibling::div//span[@class='ant-select-selection-item']"))
					.getText().trim();
			String actValue = res.GRSortReportByValue.getText().trim();

			if (expValue.equals(actValue)) {
				reportLogger.info("Success - Sort Report By value validation");
				test_steps.add("Success - Sort Report By value validation");
			} else {
				reportLogger.info("FAIL - Sort Report By value validation");
				test_steps.add("AssertionError - FAIL - Sort Report By value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Sort Report By value validation");
			test_steps.add("AssertionError - FAIL - Sort Report By value validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Sort Report By value validation");
			test_steps.add("AssertionError - FAIL - Sort Report By value validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateGroupRowsByCaptionExistence>
	 * Description: <This method validates Group Rows By Caption existence> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateGroupRowstByCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRGroupRowsByCaption.isDisplayed();
			reportLogger.info("Success - Group Rows By Caption validation");
			test_steps.add("Success - Group Rows By Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Group Rows By Caption validation");
			test_steps.add("AssertionError - FAIL - Group Rows By Caption validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Group Rows By Caption validation");
			test_steps.add("AssertionError - FAIL - Group Rows By Caption validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateGroupsBytByValue> Description: <This
	 * method validates value of Sort Report By in Report generated> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateGroupsByValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);

			String expValue = driver.findElement(By.xpath(
					"//b[text()='Group Rows By']/../../following-sibling::div//span[@class='ant-select-selection-item']"))
					.getText().trim();
			String actValue = res.GRGroupRowsByValue.getText().trim();

			if (expValue.equals(actValue)) {
				reportLogger.info("Success - Group Rows By value validation");
				test_steps.add("Success - Group Rows By value validation");
			} else {
				reportLogger.info("FAIL - Group Rows By value validation");
				test_steps.add("AssertionError - FAIL - Group Rows By value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Group Rows By value validation");
			test_steps.add("AssertionError - FAIL - Group Rows By value validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Group Rows By value validation");
			test_steps.add("AssertionError - FAIL - Date Range value validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateTaxExemptCaptionExistence>
	 * Description: <This method validates Tax Exempt Caption existence> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateTaxExemptCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRTaxExemptCaption.isDisplayed();
			reportLogger.info("Success - Tax Exempt Caption validation");
			test_steps.add("Success - Tax Exempt Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Tax Exempt Caption validation");
			test_steps.add("AssertionError - FAIL - Tax Exempt Caption validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Tax Exempt Caption validation");
			test_steps.add("AssertionError - FAIL - Tax Exempt Caption validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateTaxExemptmValue> Description: <This
	 * method validates value of Tax Exempt in Report generated> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateTaxExemptmValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);

			String selectedTaxExemptOption = "//span[text()='Tax Exempt Ledger Items']/../../..//following-sibling::div[@class='ant-collapse-content ant-collapse-content-active']//span[@class='ant-select-selection-item']";
			if (!Utility.isElementDisplayed(driver, By.xpath(selectedTaxExemptOption))) {
				res.TaxExemptLedgerItems.click();
			}

			String expValue = driver.findElement(By.xpath(selectedTaxExemptOption)).getText().trim();

			String actValue = res.GRTaxExemptValue.getText().trim();

			if (expValue.equals(actValue)) {
				reportLogger.info("Success - Tax Exempt value validation");
				test_steps.add("Success - Tax Exempt value validation");
			} else {
				reportLogger.info("FAIL - Tax Exempt value validation");
				test_steps.add("AssertionError - FAIL - Tax Exempt value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Tax Exempt value validation");
			test_steps.add("AssertionError - FAIL - Tax Exempt value validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Tax Exempt value validation");
			test_steps.add("AssertionError - FAIL - Tax Exempt value validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateMarketSegmentCaptionExistence>
	 * Description: <This method validates Market Segment Caption existence> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateMarketSegmentCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRMarketSegmentCaption.isDisplayed();
			reportLogger.info("Success - Market Segment Caption validation");
			test_steps.add("Success - Market Segment Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Market Segment Caption validation");
			test_steps.add("AssertionError - FAIL - Market Segment Caption validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Market Segment Caption validation");
			test_steps.add("AssertionError - FAIL - Market Segment Caption validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateMarketSegmentValue> Description: <This
	 * method validates value of Market Segment in Report generated> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateMarketSegmentValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);

			String expValue = driver
					.findElement(By.xpath(
							"//span[text()='Market Segment']/../..//div[@class='CollapseHeader_textOverflow_INIKj']"))
					.getText().trim();
			String actValue = res.GRMarketSegmentValue.getText().trim();

			if (expValue.equals(actValue)) {
				reportLogger.info("Success - Market Segment value validation");
				test_steps.add("Success - Market Segment value validation");
			} else {
				reportLogger.info("FAIL - Market Segment value validation");
				test_steps.add("AssertionError - FAIL - Market Segment value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Market Segment value validation");
			test_steps.add("AssertionError - FAIL - Market Segment value validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Market Segment value validation");
			test_steps.add("AssertionError - FAIL - Market Segment value validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateReferralsCaptionExistence>
	 * Description: <This method validates Referrals Caption existence> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateReferralsCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRReferralsCaption.isDisplayed();
			reportLogger.info("Success - Referrals Caption validation");
			test_steps.add("Success - Referrals Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Referrals Caption validation");
			test_steps.add("AssertionError - FAIL - Referrals Caption validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Referrals Caption validation");
			test_steps.add("AssertionError - FAIL - Referrals Caption validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateReferralsValue> Description: <This
	 * method validates value of Referrals in Report generated> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateReferralsValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);

			String expValue = driver
					.findElement(By
							.xpath("//span[text()='Referrals']/../..//div[@class='CollapseHeader_textOverflow_INIKj']"))
					.getText().trim();
			String actValue = res.GRReferralsValue.getText().trim();

			if (expValue.equals(actValue)) {
				reportLogger.info("Success - Referrals value validation");
				test_steps.add("Success - Referrals value validation");
			} else {
				reportLogger.info("FAIL - Referrals value validation");
				test_steps.add("AssertionError - FAIL - Referrals value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Referrals value validation");
			test_steps.add("AssertionError - FAIL - Referrals value validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Referrals value validation");
			test_steps.add("AssertionError - FAIL - Referrals value validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateExcludeZeroBalanceLedgerAccountsCaptionExistence> Description: <This
	 * method validates Exclude Zero Balance Ledger Accounts Caption existence>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateExcludeZeroBalanceLedgerAccountsCaptionExistence(WebDriver driver,
			ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRExcludeZeroBalanceLedgerAccountsCaption.isDisplayed();
			reportLogger.info("Success - Exclude Zero Balance Ledger Accounts Caption validation");
			test_steps.add("Success - Exclude Zero Balance Ledger Accounts Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Exclude Zero Balance Ledger Accounts Caption validation");
			test_steps.add("AssertionError - FAIL - Exclude Zero Balance Ledger Accounts Caption validation-<Br>"
					+ e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Exclude Zero Balance Ledger Accounts Caption validation");
			test_steps.add("AssertionError - FAIL - Exclude Zero Balance Ledger Accounts Caption validation-<Br>"
					+ e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateExcludeZeroBalanceLedgerAccountsValue>
	 * Description: <This method validates value of Exclude Zero Balance Ledger
	 * Accounts in Report generated> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateExcludeZeroBalanceLedgerAccountsValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);

			String expValue = driver.findElement(By.xpath(
					"//b[text()='Exclude Zero Balance Ledger Accounts']/../../..//label[contains(@class,'checked')]"))
					.getText().trim();
			String actValue = res.GRExcludeZeroBalanceLedgerAccountsValue.getText().trim();

			if (expValue.equals(actValue)) {
				reportLogger.info("Success - Exclude Zero Balance Ledger Accounts value validation");
				test_steps.add("Success - Exclude Zero Balance Ledger Accounts value validation");
			} else {
				reportLogger.info("FAIL - Exclude Zero Balance Ledger Accounts value validation");
				test_steps.add("AssertionError - FAIL - Exclude Zero Balance Ledger Accounts value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Exclude Zero Balance Ledger Accounts value validation");
			test_steps.add("AssertionError - FAIL - Exclude Zero Balance Ledger Accounts value validation-<Br>"
					+ e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Exclude Zero Balance Ledger Accounts value validation");
			test_steps.add("AssertionError - FAIL - Exclude Zero Balance Ledger Accounts value validation-<Br>"
					+ e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateIncludedLedgerAccountsCaptionExistence> Description: <This method
	 * validates Included Ledger Accounts Caption existence> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateIncludedLedgerAccountsCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRIncludedLedgerAccountsCaption.isDisplayed();
			reportLogger.info("Success - Included Ledger Accounts Caption validation");
			test_steps.add("Success - Included Ledger Accounts Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Included Ledger Accounts Caption validation");
			test_steps.add("AssertionError - FAIL - Included Ledger Accounts Caption validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Included Ledger Accounts Caption validation");
			test_steps.add("AssertionError - FAIL - Included Ledger Accounts Caption validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateIncludedLedgerAccountsInStandardView>
	 * Description: <This method validates Included Ledger Accounts in StandardView
	 * in generated Report> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <09/01/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateLedgerAccountsInStandardView(WebDriver driver, ArrayList<String> test_steps) {
		try {
			// actual list
			String s = driver
					.findElement(By.xpath("//span[text()='Include Ledger Accounts: ' or contains(text(),'Include Ledger Accounts')]/following-sibling::span"))
					.getText();
			ArrayList<String> actuallist = new ArrayList<String>();
			String s1[] = s.split("[|]");
			if (s1.length>1) {
				for (int i = 0; i < s1.length; i++) {
					System.out.println(i + "=" + s1[i]);
				}
				

				for (int i = 1; i < s1.length; i = i + 1) {

					actuallist.add(s1[i].trim());
				}
				
			}else {
				actuallist.add(s);
			}


			// expected list
			ArrayList<String> expectedlist = new ArrayList<String>();
			String value = null;
			List<WebElement> l = driver.findElements(By.xpath(
					"//strong[text()='Select Inputs']/../../../following-sibling::div//div[@class='ant-col ant-col-xs-12']/div"));
			
			if (s1.length>1) {
				for (int i = 1; i <= l.size(); i++) {
					String s2 = driver.findElement(By.xpath(
							"(//strong[text()='Select Inputs']/../../../following-sibling::div//div[@class='ant-col ant-col-xs-12']/div)["
									+ i + "]"))
							.getText();
					String caption = s2.substring(0,s2.lastIndexOf("(")).trim();
					int selectedCount = Integer.parseInt((s2.substring(s2.lastIndexOf("(")+1, s2.lastIndexOf(")"))).split("/")[0].trim());
					int totalCount = Integer.parseInt((s2.substring(s2.lastIndexOf("(")+1, s2.lastIndexOf(")"))).split("/")[1].trim());
					if (selectedCount == 0) {
						System.out.println("selected count is zero, not adding to list");
					} else {
						if (selectedCount == totalCount) {
							value = "All";
							expectedlist.add(value); //caption + " - " + value
						} else if (selectedCount < totalCount) {
							value = "" + selectedCount;
							expectedlist.add(caption + " - " + value);
						}
					}
				}
			}else {
				expectedlist.add("All");
			}
			
			


			Collections.sort(actuallist);
			Collections.sort(expectedlist);
			
			System.out.println("actuallist="+actuallist);
			System.out.println("expectedlist="+expectedlist);

			if (actuallist.equals(expectedlist)) {
				reportLogger.info("Success - Included Ledger Accounts standard view validation");
				test_steps.add("Success - Included Ledger Accounts standard view validation");
			} else {
				reportLogger.info("FAIL - Included Ledger Accounts standard view validation");
				test_steps.add("AssertionError - FAIL - Included Ledger Accounts standard view validation"+ "<br>"
						+ "<a href='https://innroad.atlassian.net/browse/RPT-717'>"
						+ "Click here to open JIRA: RPT-717</a>");
			}
		}

		catch (Exception e) {
			reportLogger.info("FAIL - Included Ledger Accounts standard view validation");
			test_steps.add(
					"AssertionError - FAIL - Included Ledger Accounts standard view validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Included Ledger Accounts standard view validation");
			test_steps.add(
					"AssertionError - FAIL - Included Ledger Accounts standard view validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getLedgerAccountMainCategoryAmount>
	 * Description: <This method gets Ledger Account Category Amount from Summary
	 * view in generated Report> Input parameters: <WebDriver driver, String
	 * MainCategory> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <09/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public int getLedgerAccountMainCategoryAmount(WebDriver driver, String MainCategory) {
		String s = driver.findElement(
				By.xpath("//div[text()='Ledger Account Category']/../../../following-sibling::tbody/tr/td[text()='"
						+ MainCategory + "']/following-sibling::td/span"))
				.getText().replace("$", "").trim();
		int i = (int) Double.parseDouble(s);
		return i;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getLedgerAccountSubCategoryAmount>
	 * Description: <This method gets Ledger Account Category Amount from Summary
	 * view in generated Report> Input parameters: <WebDriver driver, String
	 * MainCategory> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <09/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public int getLedgerAccountSubCategoryAmount(WebDriver driver, String MainCategory, String subCategory) {
		String s = driver.findElement(By.xpath("//th[text()='" + MainCategory
				+ "']/../../following-sibling::tbody/tr/td[text()='" + subCategory + "']/following-sibling::td/span"))
				.getText().replace("$", "").trim();
		int i = (int) Double.parseDouble(s);
		return i;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getCategoryTotalAmount> Description: <This
	 * method gets Ledger Account Category Amount from Summary view in generated
	 * Report> Input parameters: <WebDriver driver, String Category> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/02/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public int getCategoryTotalAmount(WebDriver driver, String Category) {
		String s = driver.findElement(By.xpath("//td[text()='" + Category + "']/following-sibling::td/div/span"))
				.getText().replace("$", "").trim();
		int i = (int) Double.parseDouble(s);
		return i;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateSummaryViewHeaderExistence>
	 * Description: <This method validates Summary view Header existence in
	 * generated Report> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <09/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateSummaryViewHeaderExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRSummaryViewHeader.isDisplayed();
			reportLogger.info("Success - Summary view Header existence validation");
			test_steps.add("Success - Summary view Header existence validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Summary view Header existence validation");
			test_steps.add("AssertionError - FAIL - Summary view Header existence validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Summary view Header existence validation");
			test_steps.add("AssertionError - FAIL - Summary view Header existence validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateLedgerAccountCategoryExistence>
	 * Description: <This method validates Ledger Account Category existence in
	 * generated Report> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <09/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateLedgerAccountCategoryExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRLedgerAccountCategory.isDisplayed();
			reportLogger.info("Success - Ledger Account Category existence validation");
			test_steps.add("Success - Ledger Account Category existence validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Ledger Account Category existence validation");
			test_steps.add("AssertionError - FAIL - Ledger Account Category existence validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Ledger Account Category existence validation");
			test_steps.add("AssertionError - FAIL - Ledger Account Category existence validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateLedgerAccountCategoryBalanceExistence>
	 * Description: <This method validates Ledger Account Category Balance existence
	 * in generated Report> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <09/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateLedgerAccountCategoryBalanceExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRLedgerAccountCategoryBalance.isDisplayed();
			reportLogger.info("Success - Ledger Account Category Balance existence validation");
			test_steps.add("Success - Ledger Account Category Balance existence validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Ledger Account Category Balance existence validation");
			test_steps.add(
					"AssertionError - FAIL - Ledger Account Category Balance existence validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Ledger Account Category Balance existence validation");
			test_steps.add(
					"AssertionError - FAIL - Ledger Account Category Balance existence validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateLedgerAccountCategoryTotalCaptionExistence> Description: <This
	 * method validates Ledger Account Category Total Caption existence in generated
	 * Report> Input parameters: <WebDriver driver, ArrayList<String> test_steps>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <09/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateLedgerAccountCategoryTotalCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRLedgerAccountCategoryTotalCaption.isDisplayed();
			reportLogger.info("Success - Ledger Account Category Total Caption existence validation");
			test_steps.add("Success - Ledger Account Category Total Caption existence validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Ledger Account Category Total Caption existence validation");
			test_steps.add("AssertionError - FAIL - Ledger Account Category Total Caption existence validation-<Br>"
					+ e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Ledger Account Category Total Caption existence validation");
			test_steps.add("AssertionError - FAIL - Ledger Account Category Total Caption existence validation-<Br>"
					+ e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateLedgerAccountCategoryToolTip>
	 * Description: <This method validates Ledger Account Category Tool Tip in
	 * generated Report> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <09/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateLedgerAccountCategoryToolTip(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			Utility.hoverOnElement(driver, res.GRLedgerAccountCategoryToolTipIcon);
			Wait.explicit_wait_visibilityof_webelement(res.GRLedgerAccountCategoryToolTipHeader, driver);

			String act1 = res.GRLedgerAccountCategoryToolTipHeader.getText().trim();
			String act2 = res.GRLedgerAccountCategoryToolTipContent.getText().trim();

			String exp1 = "Ledger Account Category";
			String exp2 = "Each ledger account is divided into different categories. The summary section of the report displays the total amount of each ledger account category. The detailed section of the report uses the user inputs given for sorting and grouping of data and displays the total for each individual ledger account while also displaying the total revenue for that ledger account category, for the specified date range.";

			if ((exp1.equals(act1)) && (exp2.equals(act2))) {
				reportLogger.info("Success - Ledger Account Category tooltip validation");
				test_steps.add("Sucess - Ledger Account Category tooltip validation");
			} else {
				reportLogger.info("FAIL - Ledger Account Category tooltip validation");
				test_steps.add("AssertionError - FAIL - Ledger Account Category tooltip validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Ledger Account Category tooltip validation");
			test_steps.add("AssertionError - FAIL - Ledger Account Category tooltip validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Ledger Account Category tooltip validation");
			test_steps.add("AssertionError - FAIL - Ledger Account Category tooltip validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateLedgerScrollTopFunctionality>
	 * Description: <This method validates Scroll Top Functionality> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/07/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateLedgerScrollTopFunctionality(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			Utility.ScrollToEnd(driver);
			res.ScrollToTop.click();
			boolean condition1 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Edit));
			boolean condition2 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Collapse));
			if (condition1 || condition2) {
				reportLogger.info("Success - Scroll Top Functionality validation");
				test_steps.add("Success - Scroll Top Functionality validation");
			} else {
				reportLogger.info("FAIL - Scroll Top Functionality validation");
				test_steps.add("AssertionError - FAIL - Scroll Top Functionality validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Scroll Top Functionality validation");
			test_steps.add("AssertionError - FAIL - Scroll Top Functionality validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Scroll Top Functionality validation");
			test_steps.add("AssertionError - FAIL - Scroll Top Functionality validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <ValidateAllReservationstooltips> Description:
	 * <This method validates tool tips of all reservations> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <09/10/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void ValidateAllReservationstooltips(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);

			List<WebElement> l = driver
					.findElements(By.xpath("//div[text()='Reservation']/span/span[@aria-label='info-circle']"));
			for (int i = 1; i <= l.size(); i++) {

				Utility.hoverOnElement(driver, driver.findElement(
						By.xpath("(//div[text()='Reservation']/span/span[@aria-label='info-circle'])[" + i + "]")));
				Wait.explicit_wait_visibilityof_webelement(
						driver.findElement(By.xpath("(//b[text()='Reservation: '])[" + i + "]")), driver);

				String act1 = driver.findElement(By.xpath("(//b[text()='Reservation: '])[" + i + "]")).getText().trim();
				String act2 = driver
						.findElement(By.xpath("//p[contains(text(),'details of the reservation or the account')]"))
						.getAttribute("textContent").replaceAll("[\\t\\n\\r]+", " ");

				String exp1 = "Reservation: ";
				String exp2 = "Includes details of the reservation or the account on which the ledger account has been added.Res #: Reservation number of which the ledger account has been added.Guest/ Account Name: Name of the guest on the reservation or the account name on which the ledger account has been added.Arrival Date: Arrival date of the reservation.";

				if ((exp1.equals(act1)) && (exp2.replaceAll("[\\t\\n\\r]+", " ").equals(act2))) {
					reportLogger.info("Sucess - Reservations tooltips validation");
					test_steps.add("Sucess - Reservation tooltip validation" + "-" + i);
				} else {
					reportLogger.info("FAIL - Reservations tooltips validation. Expected: "+exp2+" but found: "+act2);
					test_steps.add("AssertionError - FAIL - All Reservations tooltips validation" + "-" + i+"  Expected: "+exp2+" but found: "+act2);
				}
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Reservations tooltips validation");
			test_steps.add("AssertionError - FAIL - Reservations tooltips validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Reservations tooltips validation");
			test_steps.add("AssertionError - FAIL - Reservations tooltips validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <ValidateAllTransactionstooltips> Description:
	 * <This method validates tool tips of all reservations> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <09/10/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void ValidateAllTransactionstooltips(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);

			List<WebElement> l = driver
					.findElements(By.xpath("//div[text()='Transaction']/span/span[@aria-label='info-circle']"));
			for (int i = 1; i <= l.size(); i++) {

				Utility.hoverOnElement(driver, driver.findElement(
						By.xpath("(//div[text()='Transaction']/span/span[@aria-label='info-circle'])[" + i + "]")));
				Wait.explicit_wait_visibilityof_webelement(
						driver.findElement(By.xpath("(//b[text()='Transaction: '])[" + i + "]")), driver);

				String act1 = driver.findElement(By.xpath("(//b[text()='Transaction: '])[" + i + "]")).getText().trim();
				String act2 = driver.findElement(By.xpath(
						"(//p[contains(text(),'Includes the below details related to the transaction')])[" + i + "]"))
						.getText().replaceAll("[\\t\\n\\r]+", " ").trim();

				String exp1 = "Transaction:";
				String exp2 = "Includes the below details related to the transaction. Date: Date of the ledger account added. Item Description: Description of the charges/payments added on the reservation/account folio. Tax Exempt: Indicates whether or not the reservation/ account is tax exempt. Amount: The amount of payment processed or charges added.";
				String exp3 = "Includes the below details related to the transaction. Date: Date of the ledger account added. Item Description: Description of the charges/payments added on the reservation/account folio. Tax Exempt: Indicates whether or not the reservation/ account is tax exempt. Processing Method: Indicates if the payment has been manually processed. Examples: Cash, Check, Manual Refund transaction etc. Amount: The amount of payment processed or charges added.";
				
				if ((exp1.equals(act1)) && (exp2.equals(act2)) || (exp1.equals(act1)) && (exp3.equals(act2)) ) {
					reportLogger.info("Success - All Transactions tooltips validation");
					test_steps.add("Success - Transaction tooltip validation" + "-" + i);
				} else {
					reportLogger.info("FAIL - All Transactions tooltips validation");
					test_steps.add("AssertionError - FAIL - Transaction tooltip validation" + "-" + i+"Expected: "+exp2+" But found: "+act2);
				}
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - All Transactions tooltips validation");
			test_steps.add("AssertionError - FAIL - All Transactions tooltips validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - All Transactions tooltips validation");
			test_steps.add("AssertionError - FAIL - All Transactions tooltips validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateFilterHeaderDateRangeCaptionExistence>
	 * Description: <This method validates Filter Header Date Range Caption
	 * existence> Input parameters: <WebDriver driver, ArrayList<String> test_steps>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <09/14/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateFilterHeaderDateRangeCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.FilterHeaderDateRangeCaption.isDisplayed();
			reportLogger.info("Success - Filter Header Date Range Caption existence validation");
			test_steps.add("Success - Filter Header Date Range Caption existence validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Filter Header Date Range Caption existence validation");
			test_steps.add("AssertionError - FAIL - Filter Header Date Range Caption existence validation-<Br>"
					+ e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Filter Header Date Range Caption existence validation");
			test_steps.add("AssertionError - FAIL - Filter Header Date Range Caption existence validation-<Br>"
					+ e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateFilterHeaderIncludedLedgerAccountsCaptionExistence> Description:
	 * <This method validates Filter Header Included Ledger Accounts Caption
	 * existence> Input parameters: <WebDriver driver, ArrayList<String> test_steps>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <09/14/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateFilterHeaderIncludedLedgerAccountsCaptionExistence(WebDriver driver,
			ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.FilterHeaderIncludedLedgerAccountsCaption.isDisplayed();
			reportLogger.info("Success - Filter Header Included Ledger Accounts Caption existence validation");
			test_steps.add("Success - Filter Header Included Ledger Accounts Caption existence validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Filter Header Included Ledger Accounts Caption existence validation");
			test_steps.add(
					"AssertionError - FAIL - Filter Header Included Ledger Accounts Caption existence validation-<Br>"
							+ e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Filter Header Included Ledger Accounts Caption existence validation");
			test_steps.add(
					"AssertionError - FAIL - Filter Header Included Ledger Accounts Caption existence validation-<Br>"
							+ e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateFilterHeaderTaxExemptCaptionExistence>
	 * Description: <This method validates Filter Header Tax Exempt Caption
	 * existence> Input parameters: <WebDriver driver, ArrayList<String> test_steps>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <09/14/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateFilterHeaderTaxExemptCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.FilterHeaderTaxExemptCaption.isDisplayed();
			reportLogger.info("Success - Filter Header Tax Exempt Caption existence validation");
			test_steps.add("Success - Filter Header Tax Exempt Caption existence validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Filter Header Tax Exempt Caption existence validation");
			test_steps.add("AssertionError - FAIL - Filter Header Tax Exempt Caption existence validation-<Br>"
					+ e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Filter Header Tax Exempt Caption existence validation");
			test_steps.add("AssertionError - FAIL - Filter Header Tax Exempt Caption existence validation-<Br>"
					+ e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name:
	 * <validateFilterHeaderSortReportByCaptionExistence> Description: <This method
	 * validates Filter Header Sort Report By Caption existence> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <09/14/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateFilterHeaderSortReportByCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.FilterHeaderSortReportByCaption.isDisplayed();
			reportLogger.info("Success - Filter Header Sort Report By Caption existence validation");
			test_steps.add("Success - Filter Header Sort Report By Caption existence validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Filter Header Sort Report By Caption existence validation");
			test_steps.add("AssertionError - FAIL - Filter Header Sort Report By Caption existence validation-<Br>"
					+ e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Filter Header Sort Report By Caption existence validation");
			test_steps.add("AssertionError - FAIL - Filter Header Sort Report By Caption existence validation-<Br>"
					+ e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateFilterHeaderGroupByCaptionExistence>
	 * Description: <This method validates Filter Header Group By Caption existence>
	 * Input parameters: <WebDriver driver, ArrayList<String> test_steps> Return
	 * value: <void> Created By: <Naveen Kadthala> Created On: <09/14/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateFilterHeaderGroupByCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.FilterHeaderGroupByCaption.isDisplayed();
			reportLogger.info("Success - Filter Header Group By Caption existence validation");
			test_steps.add("Success - Filter Header Group By Caption existence validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Filter Header Group By Caption existence validation");
			test_steps.add(
					"AssertionError - FAIL - Filter Header Group By Caption existence validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Filter Header Group By Caption existence validation");
			test_steps.add(
					"AssertionError - FAIL - Filter Header Group By Caption existence validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateFilterHeader> Description: <This
	 * method validates Filter Header content> Input parameters: <WebDriver driver,
	 * ArrayList<String> test_steps> Return value: <void> Created By: <Naveen
	 * Kadthala> Created On: <09/14/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateFilterHeader(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException, ParseException {
		//try {
			Elements_Reports res = new Elements_Reports(driver);
			boolean condition1 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.FilterHeaderDateRangeCaption));
			boolean condition2 = Utility.isElementDisplayed(driver,
					By.xpath(OR_Reports.FilterHeaderIncludedLedgerAccountsCaption));
			boolean condition3 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.FilterHeaderTaxExemptCaption));
			boolean condition4 = Utility.isElementDisplayed(driver,
					By.xpath(OR_Reports.FilterHeaderSortReportByCaption));
			boolean condition5 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.FilterHeaderGroupByCaption));

			String DateRangeActVal = res.FilterHeaderDateRangeValue.getText();
			String IncludedLedgerAccountsActVal = res.FilterHeaderIncludedLedgerAccountsValue.getText();
			String TaxExemptActVal = res.FilterHeaderTaxExemptValue.getText();
			String SortReportByActVal = res.FilterHeaderSortReportByValue.getText();
			String GroupByActVal = res.FilterHeaderGroupByValue.getText();
						

			while (!Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Collapse))) {
				//res.Edit.click();
				Utility.clickThroughAction(driver, res.Edit);
				Wait.wait2Second();
			}
			Wait.wait3Second();
//			String s1 = driver.findElement(By.xpath("//div[contains(@class,'DatePicker')]/div/span[@class='ant-select-selection-item']")).getText().trim();
			String s1 = res.dayCurrentSelected.getText().trim();
			// Date Range
			
			
			String startDate = getStartDate(driver, test_steps);
			Date date1 = new SimpleDateFormat("MMM d, yyy").parse(startDate);
			String s2 = new SimpleDateFormat("MMM dd, yyy").format(date1);

			String endDate = getEndDate(driver, test_steps);
			Date date2 = new SimpleDateFormat("MMM d, yyy").parse(startDate);
			String s3 = new SimpleDateFormat("MMM dd, yyy").format(date2);

			String DateRangeExpVal = s1 + " | " + s2 + " to " + s3;
			reportLogger.info("Date Range actual: "+DateRangeActVal);
			reportLogger.info("Date Range exp: "+DateRangeExpVal);
			boolean condition6 = DateRangeActVal.equals(DateRangeExpVal);

			// Included Ledger Accounts
			// expected list
			ArrayList<String> expectedlist = new ArrayList<String>();
			String value = null;
			List<WebElement> l = driver.findElements(By.xpath(
					"//strong[text()='Select Inputs']/../../../following-sibling::div//div[@class='ant-col ant-col-xs-12']/div"));
			for (int i = 1; i <= l.size(); i++) {
				WebElement e = driver.findElement(By.xpath(
						"(//strong[text()='Select Inputs']/../../../following-sibling::div//div[@class='ant-col ant-col-xs-12']/div)["
								+ i + "]"));
				String s4 = e.getText();
				String caption = s4.substring(0,s4.lastIndexOf("(")).trim();
				int selectedCount = Integer.parseInt((s4.substring(s4.lastIndexOf("(")+1, s4.lastIndexOf(")"))).split("/")[0].trim());
				int totalCount = Integer.parseInt((s4.substring(s4.lastIndexOf("(")+1, s4.lastIndexOf(")"))).split("/")[1].trim());
				if (selectedCount != 0) {
					expectedlist.add(s4.replaceAll("[(/)0-9]", " ").trim());
				}
			}
			String LedgerAccountsCount = null;
			int count = expectedlist.size();
			if (count <= 3) {
				LedgerAccountsCount = null;
			} else {
				LedgerAccountsCount = Integer.toString((count - 3));
			}

			// actual val

			ArrayList<String> actuallist = new ArrayList<String>();
			boolean conditiony = false;
			boolean b = IncludedLedgerAccountsActVal.contains("more");
			if (b) {
				conditiony = IncludedLedgerAccountsActVal.contains("+ " + LedgerAccountsCount + " more");
				String s6[] = IncludedLedgerAccountsActVal.split("[+]")[0].split("[|]");

				for (int i = 0; i < s6.length; i++) {
					if(!s6[i].trim().equals("")) {
					actuallist.add(s6[i].trim());
					}
				}
			} else {
				if (IncludedLedgerAccountsActVal.contains("[|]")) {
					conditiony = true;
					String s6[] = IncludedLedgerAccountsActVal.split("[|]");
					for (int i = 0; i < s6.length; i++) {
						actuallist.add(s6[i].trim());
					}
				} else {
					conditiony = true;
					String s6[] = (IncludedLedgerAccountsActVal + "|").split("[|]");
					for (int i = 0; i < s6.length; i++) {
						actuallist.add(s6[i].trim());
					}

				}
			}
			boolean conditionx = expectedlist.containsAll(actuallist);

			boolean condition7 = (conditionx && conditiony);

			// Tax Exempt
			String selectedTaxExemptOption = "//span[text()='Tax Exempt Ledger Items']/../../..//following-sibling::div[@class='ant-collapse-content ant-collapse-content-active']//span[@class='ant-select-selection-item']";
			if (!Utility.isElementDisplayed(driver, By.xpath(selectedTaxExemptOption))) {
				res.TaxExemptLedgerItems.click();
			}
			String taxExemptExpValue = driver.findElement(By.xpath(selectedTaxExemptOption)).getText().trim();

			if (taxExemptExpValue.equals("Tax Exempt")) {
				taxExemptExpValue = "Yes";
			} else if (taxExemptExpValue.equals("Taxed")) {
				taxExemptExpValue = "No";
			}

			boolean condition8 = taxExemptExpValue.equals(TaxExemptActVal);

			// Sort Report By
			String sortReportByexpValue = driver.findElement(By.xpath(
					"//b[text()='Sort Report By']/../../following-sibling::div//span[@class='ant-select-selection-item']"))
					.getText().trim();

			boolean condition9 = sortReportByexpValue.equals(SortReportByActVal);

			// sort Group By
			String sortGroupByexpValue = driver.findElement(By.xpath(
					"//b[text()='Group Rows By']/../../following-sibling::div//span[@class='ant-select-selection-item']"))
					.getText().trim();

			boolean condition10 = sortGroupByexpValue.equals(GroupByActVal);
			
			
			if (condition1 && condition2 && condition3 && condition4 && condition5 && condition6 && condition7
					&& condition8 && condition9 && condition10) {
				reportLogger.info("Success - Filter Header validation");
				test_steps.add("Success - Filter Header validation");
			} else {
				reportLogger.info("FAIL - Filter Header validation");
				test_steps.add("AssertionError - FAIL - Filter Header validation-<Br>");
			}
			
//		} catch (Exception e) {
//			reportLogger.info("FAIL - Filter Header Date Range Caption existence validation");
//			test_steps.add("AssertionError - FAIL - Filter Header validation-<Br>" + e.toString());
//		} catch (Error e) {
//			reportLogger.info("FAIL - Filter Header validation");
//			test_steps.add("AssertionError - FAIL - Filter Header validation-<Br>" + e.toString());
//		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateNoReportDataMessage> Description:
	 * <This method validates No Report Data Message> Input parameters: <WebDriver
	 * driver, ArrayList<String> test_steps> Return value: <void> Created By:
	 * <Naveen Kadthala> Created On: <09/14/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 * 
	 */
	public void validateNoReportDataMessage(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.NoReportDataAvailableMessageHeading.isDisplayed();
			res.NoReportDataAvailableMessageContent.isDisplayed();
			reportLogger.info("Success - No Data toster validation");
			test_steps.add("Success - No Data toster validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - No Data toster validation");
			test_steps.add("AssertionError - FAIL - No Data toster validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - No Data toster validation");
			test_steps.add("AssertionError - FAIL - No Data toster validation-<Br>" + e.toString());
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateCancelReportFunctionality>
	 * Description: <This method validates Cancel Report functionltiy while
	 * generating Report> Input parameters: <WebDriver driver, ArrayList<String>
	 * test_steps> Return value: <void> Created By: <Naveen Kadthala> Created On:
	 * <09/15/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateCancelReportFunctionality(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);

			if (Utility.isElementDisplayed(driver, By.xpath(OR_Reports.LoadingReportMessage))) {
				res.LoadingReportCancelButton.click();
				if (Utility.isElementDisplayed(driver, By.xpath(OR_Reports.GRReportTypeCaption))) {
					reportLogger.info("Fail - Loading Report Cancel functionality validation");
					test_steps.add("Fail - Loading Report Cancel functionality validation");
				} else {
					reportLogger.info("Success - Loading Report Cancel functionality validation");
					test_steps.add("Success - Loading Report Cancel functionality validation");
				}
			} else {
				reportLogger.info("Fail - Loading Report Cancel functionality validation");
				test_steps.add("Fail - Loading Report Cancel functionality validation");
			}

		} catch (Exception e) {
			reportLogger.info("FAIL - Loading Report Cancel functionality validation");
			test_steps.add("AssertionError - Loading Report Cancel functionality validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Loading Report Cancel functionality validation");
			test_steps.add("AssertionError - Loading Report Cancel functionality validation-<Br>" + e.toString());
		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateGeneratedOnCaptionExistence>
	 * Description: <This method validates Generated On Caption existence> Input
	 * parameters: <WebDriver driver, ArrayList<String> test_steps> Return value:
	 * <void> Created By: <Naveen Kadthala> Created On: <09/15/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateGeneratedOnCaptionExistence(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);
			res.GRGeneratedOnCaption.isDisplayed();
			reportLogger.info("Success - Generated On Caption validation");
			test_steps.add("Success - Generated On Caption validation");
		} catch (Exception e) {
			reportLogger.info("FAIL - Generated On Caption validation");
			test_steps.add("AssertionError - FAIL - Generated On Caption validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Generated On Caption validation");
			test_steps.add("AssertionError - FAIL - Generated On Caption validation-<Br>" + e.toString());
		}
	}

	// methods for after run report
	// This method is to get all Ledger Account Category details
	public HashMap<String, String> getLedgerCategoryDetails(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		HashMap<String, String> category = new HashMap<>();

		// List<WebElement> rows =
		// report.tableLedgerAccountCategory.findElement(By.tagName("tbody")).findElements(By.tagName("tr"));
		List<WebElement> rows = driver
				.findElements(By.xpath("//*[contains(text(),'Ledger Account Category')]//ancestor::table/tbody/tr"));
		// reportLogger.info("Rows: "+rows.size());

		for (int i = 0; i < rows.size(); i++) {

			List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
			// reportLogger.info("Cells: "+cells.size());
			// reportLogger.info("Data: "+cells.get(0).getText());
			//category.put(cells.get(0).getText(), cells.get(1).findElement(By.tagName("span")).getText());
			category.put(cells.get(0).getText(), cells.get(1).getText());
		}

		// List<WebElement> foot =
		// report.tableLedgerAccountCategory.findElement(By.tagName("tfoot")).findElements(By.tagName("td"));
		// category.put(foot.get(0).getText(),
		// foot.get(1).findElement(By.tagName("span")).getText());

		reportLogger.info("Details " + category);

		return category;
	}

	// This method is to get all Ledger Account Category details
	public HashMap<String, String> getDetailsOfGivenCategory(WebDriver driver, String category,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		HashMap<String, String> details = new HashMap<>();

		String ledger = "//th[contains(@title,'" + category + "')]//ancestor::table";

		List<WebElement> rows = driver.findElements(By.xpath(ledger + "/tbody/tr"));
		// reportLogger.info("Rows: "+rows.size());

		for (int i = 0; i < rows.size(); i++) {

			List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
			// reportLogger.info("Cells: "+cells.size());
			reportLogger.info("Data: " + cells.get(0).getText());
			details.put(cells.get(0).getText(), cells.get(1).getAttribute("title"));
		}

		List<WebElement> foot = driver.findElements(By.xpath(ledger + "/tfoot/tr/td"));
		details.put(foot.get(0).getText(), foot.get(1).findElement(By.tagName("span")).getText());

		reportLogger.info("Details " + details);
		return details;

	}

	// This method is to get all Ledger Account Category details
	public HashMap<String, String> getDetailsOfAllLedgerCategories(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		HashMap<String, String> details = new HashMap<>();

		HashMap<String, String> category = getLedgerCategoryDetails(driver, test_steps);
		reportLogger.info("Ledger Categories: " + category.size());
		reportLogger.info("Ledger Categories: " + category);

		Set<String> ledgers = category.keySet();

		for (String ledger : ledgers) {
			String strLedger = "(//th/span[contains(text(),'" + ledger + "')]//ancestor::table)[1]";

			List<WebElement> rows = driver.findElements(By.xpath(strLedger + "/tbody/tr"));
			reportLogger.info("Rows: " + rows.size());

			for (int i = 0; i < rows.size(); i++) {

				List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
				reportLogger.info("Cells: " + cells.size());
				reportLogger.info("Data: " + cells.get(0).getText());
				//details.put(cells.get(0).getText(), cells.get(1).findElement(By.tagName("span")).getText());
				details.put(cells.get(0).getText(), cells.get(1).getText());
			}

		}

		reportLogger.info("Details: " + details);
		return details;

	}

	// This method is to get all Ledger Account Category details - Detailed view
	public HashMap<String, ArrayList<String>> getDetailedViewDetails(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		HashMap<String, String> details = new HashMap<>();
		// ArrayList<ArrayList<String>> ledgerDetails = new ArrayList<>();
		HashMap<String, ArrayList<String>> ledgerDetails = new HashMap<>();
		ArrayList<String> accounts = new ArrayList<>();

		HashMap<String, String> category = getDetailsOfAllLedgerCategories(driver, test_steps);

		Set<String> ledgers = category.keySet();

		for (String ledger : ledgers) {
			accounts.clear();
			// String strLedger = "//h1[contains(text(),'Detailed View | Ledger Balances
			// Report')]//following::div[contains(text(),'"+ledger+"')]//parent::div//following::table";
			String strLedger = "(//h1[contains(text(),'Detailed View | Ledger Balances Report')]//following::div[contains(text(),'"
					+ ledger + "')]//parent::div//following::table)[1]";

			List<WebElement> rows = driver.findElements(By.xpath(strLedger + "/tbody/tr"));
			for (int i = 0; i < rows.size(); i++) {
				List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));

				for (int j = 0; j < cells.size(); j++) {
					accounts.add(cells.get(j).getText());
				}
			}
			reportLogger.info("Accounts: " + accounts);
			ledgerDetails.put(ledger, accounts);

		}
		return ledgerDetails;

	}

	// This method is to get all Ledger Account Category details - Latest Data -
	// Detailed view
	public HashMap<String, ArrayList<String>> getDetailedViewDetailsLatest(WebDriver driver,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		HashMap<String, String> details = new HashMap<>();
		// ArrayList<ArrayList<String>> ledgerDetails = new ArrayList<>();
		HashMap<String, ArrayList<String>> ledgerDetails = new HashMap<>();
		ArrayList<String> accounts = new ArrayList<>();

		HashMap<String, String> category = getDetailsOfAllLedgerCategories(driver, test_steps);

		Set<String> ledgers = category.keySet();

		for (String ledger : ledgers) {
			accounts.clear();
			// String strLedger = "//h1[contains(text(),'Detailed View | Ledger Balances
			// Report')]//following::div[contains(text(),'"+ledger+"')]//parent::div//following::table";
			String strLedger = "(//*[contains(text(),'Detailed View | Ledger Balances Report')]//following::div[contains(text(),'"
					+ ledger + "')]//parent::div//following::table)[1]";

			List<WebElement> rows = driver.findElements(By.xpath(strLedger + "/tbody/tr"));
			reportLogger.info("Rows             " + rows.size());
			// for (int i = 0; i < rows.size(); i++) {
			List<WebElement> cells = rows.get(0).findElements(By.tagName("td"));
			reportLogger.info("Cell Size                 " + cells.size());

			for (int j = 0; j < cells.size(); j++) {
				accounts.add(cells.get(j).getText());
			}
			// }
			reportLogger.info("Accounts: " + accounts);
			ledgerDetails.put(ledger, accounts);

		}
		return ledgerDetails;

	}

	// This method is to get all Ledger Account Category details With headers -
	// Latest Data - Detailed view
	public HashMap<String, HashMap<String, String>> getDetailedViewDetailsLatestWithHeaders(WebDriver driver,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		HashMap<String, String> details = new HashMap<>();
		// ArrayList<ArrayList<String>> ledgerDetails = new ArrayList<>();
		HashMap<String, HashMap<String, String>> ledgerDetails = new HashMap<>();
		// ArrayList<String> accounts = new ArrayList<>();
		HashMap<String, String> accounts = new HashMap<>();

		HashMap<String, String> category = getDetailsOfAllLedgerCategories(driver, test_steps);

		Set<String> ledgers = category.keySet();

		for (String ledger : ledgers) {
			accounts.clear();

//			String strLedger = "(//*[contains(text(),'Detailed View | Ledger Balances Report')]//following::div[contains(text(),'"
//					+ ledger + "')]//parent::div//following::table)[1]";
			String strLedger = "(//*[contains(text(),'Detailed View | Ledger Balances Report')]//following::div[contains(text(),'"
					+ ledger + "')]/../..//table)[1]";

			List<WebElement> rows = driver.findElements(By.xpath(strLedger + "/tbody/tr"));
			// reportLogger.info("Rows: "+rows.size());
			List<WebElement> header = driver.findElements(By.xpath(strLedger + "/thead/tr"));
			// reportLogger.info("Header rows: "+header.size());
			List<WebElement> headerCells = header.get(2).findElements(By.tagName("th"));
			// reportLogger.info("Header cells: "+headerCells.size());
			// for (int i = 0; i < rows.size(); i++) {
			List<WebElement> cells = rows.get(0).findElements(By.tagName("td"));
			// reportLogger.info("Cells: "+cells.size());

			for (int j = 0; j < cells.size(); j++) {
				accounts.put(headerCells.get(j).getText(), cells.get(j).getText());
				// accounts.add(cells.get(j).getText());
			}
			// }
			reportLogger.info("Accounts: " + accounts);
			ledgerDetails.put(ledger, accounts);

		}
		return ledgerDetails;

	}

	// This method is to get all Ledger Account Category details With headers -
	// Latest Data - Detailed view
	public HashMap<String, HashMap<String, String>> getDetailedViewDetailsLatestOfGivenInput(WebDriver driver,
			String input, ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		HashMap<String, String> details = new HashMap<>();
		// ArrayList<ArrayList<String>> ledgerDetails = new ArrayList<>();
		HashMap<String, HashMap<String, String>> ledgerDetails = new HashMap<>();
		// ArrayList<String> accounts = new ArrayList<>();
		HashMap<String, String> accounts = new HashMap<>();

		HashMap<String, String> category = getDetailsOfAllLedgerCategories(driver, test_steps);

		Set<String> ledgers = category.keySet();

		for (String ledger : ledgers) {

			if (ledger.equalsIgnoreCase("input")) {

				accounts.clear();
				// String strLedger = "//h1[contains(text(),'Detailed View | Ledger Balances
				// Report')]//following::div[contains(text(),'"+ledger+"')]//parent::div//following::table";
				String strLedger = "(//h1[contains(text(),'Detailed View | Ledger Balances Report')]//following::div[contains(text(),'"
						+ ledger + "')]//parent::div//following::table)[1]";

				List<WebElement> rows = driver.findElements(By.xpath(strLedger + "/tbody/tr"));
				// reportLogger.info("Rows: "+rows.size());
				List<WebElement> header = driver.findElements(By.xpath(strLedger + "/thead/tr"));
				// reportLogger.info("Header rows: "+header.size());
				List<WebElement> headerCells = header.get(1).findElements(By.tagName("th"));
				// reportLogger.info("Header cells: "+headerCells.size());
				// for (int i = 0; i < rows.size(); i++) {
				List<WebElement> cells = rows.get(0).findElements(By.tagName("td"));
				// reportLogger.info("Cells: "+cells.size());

				for (int j = 0; j < cells.size(); j++) {
					accounts.put(headerCells.get(j).getText(), cells.get(j).getText());
					// accounts.add(cells.get(j).getText());
				}
				// }
				reportLogger.info("Accounts: " + accounts);
				ledgerDetails.put(ledger, accounts);

				break;

			}

		}
		return ledgerDetails;

	}

	// This method is to validate given reservation number availability
	public void validateGivenReservationNumberAvailability(WebDriver driver, String input, String reservation,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		String strInput = "((//div[contains(text(),'" + input + "')])[1]//following::table[1]//td[contains(text(),'"
				+ reservation + "')])[1]";

		try {
			Wait.explicit_wait_10sec(driver.findElement(By.xpath(strInput)), driver);
		} catch (Exception e) {
			reportLogger
					.info("AssertionError - Given reservation number " + reservation + " is not avilable in Report");
			test_steps.add("AssertionError - Given reservation number " + reservation + " is not avilable in Report");
		} catch (Error e) {
			reportLogger
					.info("AssertionError - Given reservation number " + reservation + " is not avilable in Report");
			test_steps.add("AssertionError - Given reservation number " + reservation + " is not avilable in Report");
		}

	}

	// This method is to check given reservation number availability
	public boolean checkGivenReservationNumberAvailability(WebDriver driver, String input, String reservation,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		String strInput = "((//div[contains(text(),'" + input + "')])[1]//following::table[1]//td[contains(text(),'"
				+ reservation + "')])[1]";
		boolean flag = false;

		try {
			Wait.explicit_wait_10sec(driver.findElement(By.xpath(strInput)), driver);
			flag = true;
		} catch (Exception e) {
			flag = false;
		}
		return flag;
	}

	// This method is to get transaction details of given reservation number -
	// HashMap<String, String>
	public HashMap<String, String> getTransactionDetails(WebDriver driver, String input, String reservation,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		HashMap<String, String> details = new HashMap<>();

		String strLedger = "(//*[contains(text(),'Detailed View | Ledger Balances Report')]//following::div[contains(text(),'"
				+ input + "')]//parent::div//following::table)[1]";
		List<WebElement> header = driver.findElements(By.xpath(strLedger + "/thead/tr[2]/th"));
		// List<WebElement> header =
		// driver.findElements(By.xpath("(//h1[contains(text(),'Detailed View | Ledger
		// Balances
		// Report')]//following::div[contains(text(),'"+input+"')]//parent::div//following::table)[1]/thead/tr[2]/th"));
		reportLogger.info("header Size " + header.size());

		String strInput = "((//div[contains(text(),'" + input + "')])[1]//following::table[1]//td[contains(text(),'"
				+ reservation + "')])[1]";
		String strItemTable = "(//div[contains(text(),'" + input + "')])[1]//following::table[1]//tr";

		List<WebElement> strRows = driver.findElements(By.xpath(strItemTable));
		reportLogger.info("Transaction rows: " + strRows.size());

		for (int i = 2; i < strRows.size(); i++) {
			List<WebElement> cells = strRows.get(i).findElements(By.tagName("td"));
			reportLogger.info("Cells: " + cells.size());
			reportLogger.info("Reservation number: " + cells.get(0).getText());

			if (cells.get(0).getText().equalsIgnoreCase(reservation)) {
				reportLogger.info("Entered into loop");
				for (int j = 0; j < cells.size(); j++) {
					reportLogger.info("Header: " + header.get(j).getText());
					reportLogger.info("Cell: " + cells.get(j).getText());
					details.put(header.get(j).getText(), cells.get(j).getText());
				}
				break;
			}

		}

		return details;

	}

	// This method is to get transaction details of given reservation number -
	// HashMap<String, ArrayList<String>>
	public HashMap<String, ArrayList<String>> getTransactionDetailsList(WebDriver driver, String input,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		HashMap<String, ArrayList<String>> details = new HashMap<>();
		// ArrayList<String> data = new ArrayList<>();

//		String strLedger = "(//*[contains(text(),'Detailed View | Ledger Balances Report')]//following::div[contains(text(),'"
//				+ input + "')]//parent::div//following::table)[1]";
		String strLedger = "(//*[contains(text(),'Detailed View | Ledger Balances Report')]//following::div[contains(text(),'"
				+ input + "')]/../..//table)[1]";
		List<WebElement> header = driver.findElements(By.xpath(strLedger + "/thead/tr[3]/th"));
		reportLogger.info("header Size " + header.size());
//		String strItemTable = "(//div[contains(text(),'" + input + "')])[1]//following::table[1]//tr";
		String strItemTable = "(//div[contains(text(),'" + input + "')])[1]/../../../../..//tr";

		List<WebElement> rowData = driver.findElements(By.xpath(strItemTable));
		reportLogger.info("Transaction rows: " + rowData.size());

		try {
			List<WebElement> cellData = rowData.get(3).findElements(By.tagName("td"));
			reportLogger.info("Cell Data size: " + cellData.size());

			for (int i = 0; i < cellData.size(); i++) {
				// data.clear();
				ArrayList<String> data = new ArrayList<>();
				for (int j = 3; j < rowData.size(); j++) {
					List<WebElement> cells = rowData.get(j).findElements(By.tagName("td"));
					data.add(cells.get(i).getText());
				}
				reportLogger.info("Data All: " + data);
				details.put(header.get(i).getText(), data);
			}
		} catch (Exception e) {
			reportLogger.info("No data found for " + input);
			test_steps.add("AssertionError - No data found for " + input);
		}

		return details;

	}

	// This method is to get all details by given Sort option
	public ArrayList<String> getDetailsByGivenSortOption(WebDriver driver, String input, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		String strHeaders = "//div[text()='Reservation']//following::tr[1]/th";
		ArrayList<String> itemsList = new ArrayList<>();

		List<WebElement> headers = driver.findElements(By.xpath(strHeaders));
		int count = 0;
		for (int i = 0; i < headers.size(); i++) {
			if (headers.get(i).getText().equalsIgnoreCase(input)) {
				// String data = "//th[contains(text(),'"+input+"')][1]//ancestor::table//tr";
				String data = "(//th[contains(text(),'" + input + "')][1]//ancestor::table/tbody)[1]/tr";

				List<WebElement> dataList = driver.findElements(By.xpath(data));

				for (int j = 1; j < dataList.size(); j++) {
					List<WebElement> cells = dataList.get(j).findElements(By.tagName("td"));
					reportLogger.info("Sort Cell size: " + cells.size() + "  " + cells.get(count).getText());
					itemsList.add(cells.get(count).getText());
				}
				break;
			}
			count++;
		}

		return itemsList;

	}

	// This method is to validate sort Report Sort functionality
	public void validateReportSortFunctionality(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		String strHeaders = "//div[text()='Reservation']//following::tr[1]/th";
		ArrayList<String> itemsList = new ArrayList<>();
		ArrayList<String> itemsListAfterSort = new ArrayList<>();

		String[] sortOptions = { "Reservation Number", "Guest/Account Name", "Arrival Date", "Date", "Item Description", "Tax Exempt",
				"Amount" };
		String[] sort = { "Reservation #", "Guest/Account Name", "Arrival Date", "Date", "Item Description", "Tax Exempt", "Amount" };

		selectAllInputsUsingSeeAll(driver, test_steps);

		try {

			for (int i = 0; i < sort.length; i++) {

				if (sort[i].equalsIgnoreCase("Reservation #")) {
					selectGivenSortReportByOption(driver, "Reservation Number", test_steps);
				} else {
					selectGivenSortReportByOption(driver, sort[i], test_steps);
				}

				clickOnRunReport(driver);

				itemsList = getDetailsByGivenSortOption(driver, sort[i], test_steps);

				itemsListAfterSort = itemsList;

				Collections.sort(itemsListAfterSort);

				if (itemsList.equals(itemsListAfterSort)) {
					reportLogger.info(sort[i] + " - Report sort functionality validated Successfully");
					test_steps.add(sort[i] + " - Report sort functionality validated Successfully");

				} else {
					reportLogger.info(sort[i] + " - Report sort functionality validation failed");
					Assert.assertTrue(false, "Failed - " + sort[i] + " - Report sort functionality validation failed");
				}

				Utility.clickThroughAction(driver, driver.findElement(By.xpath("//span[contains(text(),'Edit')]")));
				Wait.wait1Second();

			}
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

	}

	// Tax
	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <navigateToTaxesAndFees> Description: <This
	 * method navigates to Taxes and fees tab> Input parameters: <WebDriver driver>
	 * Return value: <void> Created By: <Naveen Kadthala> Created On: <09/23/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void navigateToTaxesAndFees(WebDriver driver) {
		Elements_SetUp_Properties res = new Elements_SetUp_Properties(driver);
		driver.findElement(By.xpath("//a[@data-id='/setup/taxes']")).click();
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <checkIfTaxRowExists> Description: <This method
	 * checks if Tax Row exists in Taxes and Fees> Input parameters: <WebDriver
	 * driver> Return value: <boolean> Created By: <Naveen Kadthala> Created On:
	 * <09/23/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public boolean checkIfTaxRowExists(WebDriver driver) {
		int count = 0;
		List<WebElement> l = driver.findElements(By.xpath("//tbody[@class='ant-table-tbody']/tr"));
		for (int i = 1; i <= l.size(); i++) {
			String s = driver.findElement(By.xpath("//tbody[@class='ant-table-tbody']/tr[" + i + "]/td[2]"))
					.getAttribute("textContent");
			if (s.equalsIgnoreCase("Tax")) {
				count = count + 1;
			}
		}
		if (count >= 1) {
			return true;
		} else {
			return false;
		}
	}

	public boolean checkIfTaxExists(WebDriver driver) {
		boolean flag = false;
		List<WebElement> l = driver.findElements(By.xpath("//tbody[@class='ant-table-tbody']/tr"));

		if (l.size() > 1) {
			flag = true;
		} else {
			flag = false;
		}
		return flag;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getTaxLedgerAccounts> Description: <This
	 * method gets list of Tax ledger accounts> Input parameters: <WebDriver driver>
	 * Return value: <ArrayList<String>> Created By: <Naveen Kadthala> Created On:
	 * <09/23/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public ArrayList<String> getTaxLedgerAccounts(WebDriver driver) {
		ArrayList<String> al = new ArrayList<String>();
		List<WebElement> l = driver.findElements(By.xpath("//tbody[@class='ant-table-tbody']/tr"));
		for (int i = 1; i <= l.size(); i++) {
			String s = driver.findElement(By.xpath("//tbody[@class='ant-table-tbody']/tr[" + i + "]/td[2]"))
					.getAttribute("textContent");
			if (s.equalsIgnoreCase("Tax")) {
				driver.findElement(By.xpath(
						"//tbody[@class='ant-table-tbody']/tr[" + i + "]/td[6]/div/button[contains(@class,'edit')]"))
						.click();
				List<WebElement> ls = driver.findElements(By.xpath(
						"//h2[text()='Apply to the following ledger accounts ']/..//div[@class='panel-data-fill']/div/span"));
				for (WebElement e : ls) {
					al.add(e.getText());
				}
				break;
			}
		}
		return al;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getTaxAmountFromTaxLedgerAccount> Description:
	 * <This method gets Tax Amount from Tax Ledger Account> Input parameters:
	 * <WebDriver driver> Return value: <String> Created By: <Naveen Kadthala>
	 * Created On: <09/23/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public String getTaxAmountFromTaxLedgerAccount(WebDriver driver) {
		String amount = driver.findElement(By.xpath("//input[@name='amount']")).getAttribute("value");
		String caption = driver.findElement(By.xpath(
				"//label[text()='Flat/Percent']/following-sibling::div//div[@class='ant-select-selection-selected-value']"))
				.getAttribute("textContent");
		String TaxAmount = amount + "|" + caption;
		return TaxAmount;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getTaxLedgerAccountSelectedOption>
	 * Description: <This method gets selected Ledger Account> Input parameters:
	 * <WebDriver driver> Return value: <String> Created By: <Naveen Kadthala>
	 * Created On: <09/23/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public String getTaxLedgerAccountSelectedOption(WebDriver driver) {
		String selectedLedgerAccount = driver.findElement(By.xpath(
				"//label[text()='Ledger Account']/following-sibling::div//div[@class='ant-select-selection-selected-value']"))
				.getAttribute("textContent");
		return selectedLedgerAccount;
	}
	
	public ArrayList<String> getTaxDetailsFromSetupTaxes(WebDriver driver) throws InterruptedException {
		ArrayList<String> taxDetails = new ArrayList<String>();
		String taxValues = "";
		String ledgerAccountApplyTo = "";
		List<WebElement> l = driver.findElements(By.xpath("//tbody[@class='ant-table-tbody']/tr"));
		for (int i = 1; i <= l.size(); i++) {
			String s = driver.findElement(By.xpath("//tbody[@class='ant-table-tbody']/tr[" + i + "]/td[2]"))
					.getAttribute("textContent");
			if (s.equalsIgnoreCase("Tax")) {
				driver.findElement(By.xpath(
						"//tbody[@class='ant-table-tbody']/tr[" + i + "]/td[6]/div/button[contains(@class,'edit')]"))
						.click();
				List<WebElement> ls = driver.findElements(By.xpath(
						"//h2[text()='Apply to the following ledger accounts ']/..//div[@class='panel-data-fill']/div/span"));
				for (WebElement e : ls) {
					//al.add(e.getText());
					ledgerAccountApplyTo = ledgerAccountApplyTo + "," + e.getText();
				}
				
				String amount = driver.findElement(By.xpath("//input[@name='amount']")).getAttribute("value");
				String caption = driver.findElement(By.xpath(
						"//label[text()='Flat/Percent' or text() = 'Tax Type']/following-sibling::div//div[@class='ant-select-selection-selected-value']"))
						.getAttribute("textContent");
				
				String selectedLedgerAccount = driver.findElement(By.xpath(
						"//label[text()='Ledger Account']/following-sibling::div//div[@class='ant-select-selection-selected-value']"))
						.getAttribute("textContent");
				
				taxValues = caption +"|" + amount + "|" + selectedLedgerAccount + ledgerAccountApplyTo;
				
				taxDetails.add(taxValues);
				
				driver.findElement(By.xpath("//span[contains(text(),'Back')]")).click();
				Wait.wait5Second();
				
			}
		}
		return taxDetails;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <createTaxItem> Description: <This method
	 * creates Tax Item> Input parameters: <WebDriver driver> Return value: <void>
	 * Created By: <Naveen Kadthala> Created On: <09/23/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void createTaxItem(WebDriver driver, String taxname, String displayname, String description,
			String ledgerAccount, String USDorPercentage, String amount, String addLedgerAccount)
			throws InterruptedException {
		Utility.clickThroughAction(driver, driver.findElement(By.xpath("//span[text()='Create ']")));
		driver.findElement(By.xpath("//a[text()='Tax']")).click();
		driver.findElement(By.xpath("//input[@name='name']")).sendKeys(taxname);
		driver.findElement(By.xpath("//input[@name='displayName']")).sendKeys(displayname);
		driver.findElement(By.xpath("//textarea[@name='description']")).sendKeys(description);
		driver.findElement(By.xpath("//label[text()='Ledger Account']/following-sibling::div//i")).click();
		driver.findElement(By.xpath("//li[text()='" + ledgerAccount + "']")).click();
		Utility.clickThroughAction(driver,
				driver.findElement(By.xpath("//label[text()='Flat/Percent or text() = 'Tax Type']/following-sibling::div//i")));
		List<WebElement> l1 = driver.findElements(By.xpath("//div[@id='eef3bda8-2c51-4ed1-c3b6-51e7c206395a']/ul/li"));
		for (WebElement e : l1) {
			if (e.getAttribute("textContent").equalsIgnoreCase(USDorPercentage)) {
				driver.findElement(By.xpath(
						"//div[@id='eef3bda8-2c51-4ed1-c3b6-51e7c206395a']/ul/li[text()='" + USDorPercentage + "']"))
						.click();
				break;
			}
		}
		driver.findElement(By.xpath("//input[@name='amount']")).sendKeys(amount);
		driver.findElement(By.xpath("//span[text()='Exclude when tax exempt']/../span/input[@type='checkbox']"))
				.click();
		driver.findElement(By.xpath("//button[text()='Add ledger accounts']")).click();
		Utility.clickThroughJavaScript(driver, driver
				.findElement(By.xpath("//label[text()='Select ledger account(s)']/..//div[text()='--Select--']")));
		// driver.findElement(By.xpath("//label[text()='Select ledger
		// account(s)']/..//div[text()='--Select--']")).click();
		Utility.clickThroughAction(driver, driver.findElement(By.xpath("//li[@label='" + addLedgerAccount + "']")));
		Wait.wait2Second();
		Utility.clickThroughJavaScript(driver, driver.findElement(By.xpath("//button/span[text()='Add']")));
		Wait.wait2Second();
		Utility.clickThroughAction(driver, driver.findElement(By.xpath("//button/span[text()=' Save ']")));
	}

	// Fees

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <checkIfFeesRowExists> Description: <This
	 * method checks if Fees Row exists in Taxes and Fees> Input parameters:
	 * <WebDriver driver> Return value: <boolean> Created By: <Naveen Kadthala>
	 * Created On: <09/23/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public boolean checkIfFeesRowExists(WebDriver driver) {
		int count = 0;
		List<WebElement> l = driver.findElements(By.xpath("//tbody[@class='ant-table-tbody']/tr"));
		for (int i = 1; i <= l.size(); i++) {
			String s = driver.findElement(By.xpath("//tbody[@class='ant-table-tbody']/tr[" + i + "]/td[2]"))
					.getAttribute("textContent");
			if (s.equalsIgnoreCase("Fee")) {
				count = count + 1;
			}
		}
		if (count >= 1) {
			return true;
		} else {
			return false;
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getFeeAmountFromFeeLedgerAccount> Description:
	 * <This method gets Fee Amount from Fee Ledger Account> Input parameters:
	 * <WebDriver driver> Return value: <String> Created By: <Naveen Kadthala>
	 * Created On: <09/23/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public String getFeeAmountFromFeeLedgerAccount(WebDriver driver) {
		List<WebElement> l = driver.findElements(By.xpath("//tbody[@class='ant-table-tbody']/tr"));
		for (int i = 1; i <= l.size(); i++) {
			String s = driver.findElement(By.xpath("//tbody[@class='ant-table-tbody']/tr[" + i + "]/td[2]"))
					.getAttribute("textContent");
			if (s.equalsIgnoreCase("Fee")) {
				driver.findElement(By.xpath(
						"//tbody[@class='ant-table-tbody']/tr[" + i + "]/td[6]/div/button[contains(@class,'edit')]"))
						.click();
				break;
			}
		}
		String amount = driver.findElement(By.xpath("//input[@name='amount']")).getAttribute("value");
		String caption = driver.findElement(By.xpath(
				"//label[text()='Flat/Percent of Room Charge']/following-sibling::div//div[@class='ant-select-selection-selected-value']"))
				.getAttribute("textContent");
		String perValue = driver.findElement(By.xpath("(//div[text()='--Select--']/following-sibling::div)[3]"))
				.getAttribute("textContent");
		String FeeAmount = caption + "|" + amount + "|" + perValue;
		return FeeAmount;
	}
	
	public ArrayList<String> getFeeDetailsFromSetupFees(WebDriver driver) throws InterruptedException {
		ArrayList<String> fees = new ArrayList<>();
		List<WebElement> l = driver.findElements(By.xpath("//tbody[@class='ant-table-tbody']/tr"));
		for (int i = 1; i <= l.size(); i++) {
			String s = driver.findElement(By.xpath("//tbody[@class='ant-table-tbody']/tr[" + i + "]/td[2]"))
					.getAttribute("textContent");
			if (s.equalsIgnoreCase("Fee")) {
				driver.findElement(By.xpath(
						"//tbody[@class='ant-table-tbody']/tr[" + i + "]/td[6]/div/button[contains(@class,'edit')]"))
						.click();
				String amount = driver.findElement(By.xpath("//input[@name='amount']")).getAttribute("value");
				String caption = driver.findElement(By.xpath(
						"//label[text()='Flat/Percent of Room Charge']/following-sibling::div//div[@class='ant-select-selection-selected-value']"))
						.getAttribute("textContent");
				String perValue = driver.findElement(By.xpath("(//div[text()='--Select--']/following-sibling::div)[3]"))
						.getAttribute("textContent");
				String selectedLedgerAccount = driver.findElement(By.xpath(
						"//label[text()='Ledger Account']/following-sibling::div//div[@class='ant-select-selection-selected-value']"))
						.getAttribute("textContent");
				String FeeAmount = caption + "|" + amount + "|" + perValue + "|" + selectedLedgerAccount;
				fees.add(FeeAmount);
				
				driver.findElement(By.xpath("//span[contains(text(),'Back')]")).click();
				Wait.wait5Second();
			}
		}

		return fees;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <getFeeLedgerAccountSelectedOption>
	 * Description: <This method gets selected Ledger Account> Input parameters:
	 * <WebDriver driver> Return value: <String> Created By: <Naveen Kadthala>
	 * Created On: <09/23/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public String getFeeLedgerAccountSelectedOption(WebDriver driver) {
		String selectedLedgerAccount = driver.findElement(By.xpath(
				"//label[text()='Ledger Account']/following-sibling::div//div[@class='ant-select-selection-selected-value']"))
				.getAttribute("textContent");
		return selectedLedgerAccount;
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <createFeeItem> Description: <This method
	 * creates Tax Item> Input parameters: <WebDriver driver> Return value: <void>
	 * Created By: <Naveen Kadthala> Created On: <09/23/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void createFeeItem(WebDriver driver, String feename, String displayname, String description, String feeLedger,
			String USDorPercentage, String amount, String perstaynight) {
		Utility.clickThroughAction(driver, driver.findElement(By.xpath("//span[text()='Create ']")));
		driver.findElement(By.xpath("//a[text()='Fee']")).click();
		driver.findElement(By.xpath("//input[@name='name']")).sendKeys(feename);
		driver.findElement(By.xpath("//input[@name='displayName']")).sendKeys(displayname);
		driver.findElement(By.xpath("//textarea[@name='description']")).sendKeys(description);
		driver.findElement(By.xpath("//label[text()='Ledger Account']/following-sibling::div//i")).click();
		driver.findElement(By.xpath("//li[text()='"+feeLedger+"']")).click();
		Utility.clickThroughAction(driver, driver
				.findElement(By.xpath("//label[text()='Flat/Percent of Room Charge']/following-sibling::div//i")));
		List<WebElement> l1 = driver.findElements(By.xpath("//div[@id='2caf2a77-481b-410c-81ac-3e2e0f1989a8']/ul/li"));
		for (WebElement e : l1) {
			if (e.getAttribute("textContent").equalsIgnoreCase(USDorPercentage)) {
				driver.findElement(By.xpath(
						"//div[@id='2caf2a77-481b-410c-81ac-3e2e0f1989a8']/ul/li[text()='" + USDorPercentage + "']"))
						.click();
				break;
			}
		}
		driver.findElement(By.xpath("//input[@name='amount']")).sendKeys(amount);

		Utility.clickThroughAction(driver, driver.findElement(By.xpath(
				"(//label[text()='Flat/Percent of Room Charge']/../../../..//i[@class='anticon anticon-down ant-select-arrow-icon'])[2]")));
		List<WebElement> l2 = driver.findElements(By.xpath("//div[@id='97dc590f-7116-47aa-a2ef-8db8d660a6c8']/ul/li"));
		for (WebElement e : l2) {
			if (e.getAttribute("textContent").equalsIgnoreCase(perstaynight)) {
				driver.findElement(By.xpath(
						"//div[@id='97dc590f-7116-47aa-a2ef-8db8d660a6c8']/ul/li[text()='" + perstaynight + "']"))
						.click();
				break;
			}
		}
		Utility.clickThroughAction(driver, driver.findElement(By.xpath("//button/span[text()=' Save ']")));
	}

	public double getFolioAmountExcludingCurrency(WebDriver driver, String amount) {

		double money;
		money = Double.parseDouble(amount.substring(2).replaceAll(",", ""));

		return money;
	}

	// This method is to validate "No Report Data Available" message when there is
	// no data or Running Report without selecting any Inputs
	public void validateNoReportData(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		clickReturnToDefault(driver, test_steps);
		clickOnRunReport(driver);

		String toast = "//div[contains(text(),'No Report Data Available')]";

		try {
			Wait.WaitForElement(driver, toast);
			reportLogger.info("Sccess: validated 'No Report Data Available' toas message");
			test_steps.add("Sccess: validated 'No Report Data Available' toas message");

		} catch (Exception e) {
			reportLogger.info("Failed: failed to validate 'No Report Data Available' toas message");
			test_steps.add("Failed: failed to validate 'No Report Data Available' toas message");
		}
	}

	// This method is to validate "No Report Data Available" message when there is
	// no data or Running Report without selecting any Inputs
	public boolean checkNoReportDataAvailable(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {
		boolean flag = false;
		String toast = "//div[contains(text(),'No Report Data Available')]";
		try {
			Wait.WaitForElement(driver, toast, 20);
			//Wait.explicit_wait_10sec(driver.findElement(By.xpath(toast)), driver);
			reportLogger.info("Got 'No Report Data Available' toast message");
			test_steps.add("Got 'No Report Data Available' toast message");
			flag = true;
		} catch (Exception e) {
			reportLogger.info("Report generated");
		}
		return flag;
	}

	// This method is to read the values from excel
	public HashMap<String, String> getLedgerInputsAndValues(WebDriver driver, String Ledger, String Value) {
		HashMap<String, String> selectinputs = new HashMap<String, String>();
		for (int i = 0; i < Ledger.split("[|]").length; i++) {
			selectinputs.put(Ledger.split("[|]")[i], Value.split("[|]")[i]);
		}
		return selectinputs;
	}

	public void validateLedgerReportSummaryView(WebDriver driver, HashMap<String, String> beforeLedgerCategoryDetails,
			HashMap<String, String> beforeDetailsOfAllLedgerCategories,
			HashMap<String, String> afterLedgerCategoryDetails,
			HashMap<String, String> afterDetailsOfAllLedgerCategories, HashMap<String, String> ledgerAccounts,
			HashMap<String, Double> ledgerAmounts, HashMap<String, String> folioItemValues, int numberOfRooms,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Set<String> ledgers = ledgerAccounts.keySet();
		
		String resStatus;

		ArrayList<String> accounts = new ArrayList<>();
		accounts.add("Room Charge");
		accounts.add("Incidental");
		accounts.add("Tax");
		accounts.add("Fee");
		accounts.add("Payment Method");
		accounts.add("Gift Certificate Redeemed");
		accounts.add("Account (Advanced Deposit)");
		
		if (ledgerAmounts.containsKey("Taxes")) {
			ledgerAmounts.put("Tax", ledgerAmounts.get("Taxes"));
		}
		
		if (ledgerAmounts.containsKey("Fees")) {
			ledgerAmounts.put("Fee", ledgerAmounts.get("Fees"));
		}

		for (String ledger : ledgers) {

			// Summary view
			if (!accounts.contains(ledger)) {
				if (beforeLedgerCategoryDetails.containsKey(ledger)) {
					double totalAmount = Double.parseDouble(afterLedgerCategoryDetails.get(ledger).substring(1).replaceAll(",", ""))
							- Double.parseDouble(beforeLedgerCategoryDetails.get(ledger).substring(1).replaceAll(",", ""));
					totalAmount = Utility.getRoundOffValueAfterDecimal(totalAmount);
					reportLogger.info(ledger + ": " + totalAmount);
					reportLogger.info(ledger + ": "
							+ (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms));

					if (totalAmount == (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger)).replaceAll(",", ""))
							* numberOfRooms)) {
						reportLogger.info(ledger + " amount validated successfully in Summary View");
						test_steps.add(ledger + " amount validated successfully in Summary View");
					} else {
						reportLogger.info("Failed - " + ledger + " amount in Summary View validation failed");
						test_steps.add("AssertionError : Failed - " + ledger
								+ " amount in Summary View validation failed. Expected: "
								+ (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms)
								+ " But found: " + totalAmount);
					}

				} else {
					double totalAmount = Double.parseDouble(afterLedgerCategoryDetails.get(ledger).replaceAll("[$£ ]", ""));
					reportLogger.info(ledger + ": " + totalAmount);

					if (totalAmount == (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger)).replaceAll(",", ""))
							* numberOfRooms)) {
						reportLogger.info(ledger + " amount validated successfully in Summary View");
						test_steps.add(ledger + " amount validated successfully in Summary View");
					} else {
						reportLogger.info("Failed - " + ledger + " amount in Summary View validation failed");
						test_steps.add("AssertionError : Failed - " + ledger
								+ " amount in Summary View validation failed. Expected: "
								+ (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms)
								+ " But found: " + totalAmount);
					}

				}

			} else {
				if (beforeLedgerCategoryDetails.containsKey(ledger)) {
					double tm = Double.parseDouble(afterLedgerCategoryDetails.get(ledger).substring(1).replaceAll(",", ""))
							- Double.parseDouble(beforeLedgerCategoryDetails.get(ledger).substring(1).replaceAll(",", ""));
					
					DecimalFormat df = new DecimalFormat("###.##");
					double totalAmount = Double.parseDouble(df.format(tm));
					reportLogger.info("After round off: "+totalAmount);
					
					
					reportLogger.info(ledger + ": " + totalAmount);
					reportLogger.info(ledger + ": " + ledgerAmounts.get(ledger));

					if (totalAmount == ledgerAmounts.get(ledger)) {
						reportLogger.info(ledger + " amount validated successfully in Summary View");
						test_steps.add(ledger + " amount validated successfully in Summary View");
					} else {
						reportLogger.info("Failed - " + ledger + " amount in Summary View validation failed");
						test_steps.add("AssertionError : Failed - " + ledger
								+ " amount in Summary View validation failed. Expected: " + ledgerAmounts.get(ledger)
								+ " But found: " + totalAmount);
					}

				} else {
					double totalAmount = Double.parseDouble(afterLedgerCategoryDetails.get(ledger).substring(1).replaceAll(",", ""));
					reportLogger.info(ledger + ": " + totalAmount);

					if (totalAmount == ledgerAmounts.get(ledger)) {
						reportLogger.info(ledger + " amount validated successfully in Summary View");
						test_steps.add(ledger + " amount validated successfully in Summary View");
					} else {
						reportLogger.info("Failed - " + ledger + " amount in Summary View validation failed");
						test_steps.add("AssertionError : Failed - " + ledger
								+ " amount in Summary View validation failed. Expected: " + ledgerAmounts.get(ledger)
								+ " But found: " + totalAmount);
					}

				}
			}

			String[] strLedger = ledgerAccounts.get(ledger).split(",");

			if (strLedger.length == 1) {
				if (beforeDetailsOfAllLedgerCategories.containsKey(ledgerAccounts.get(ledger))) {
					double amt = Double
							.parseDouble(afterDetailsOfAllLedgerCategories.get(ledgerAccounts.get(ledger)).substring(1).replaceAll(",", ""))
							- Double.parseDouble(
									beforeDetailsOfAllLedgerCategories.get(ledgerAccounts.get(ledger)).substring(1).replaceAll(",", ""));
					reportLogger.info(ledgerAccounts.get(ledger) + " - " + ledgerAccounts.get(ledger) + ": " + amt);
					
					
					DecimalFormat df = new DecimalFormat("###.##");
					double amount = Double.parseDouble(df.format(amt));
					reportLogger.info("After round off: "+amount);
					double expAmount;
					if (ledger.equalsIgnoreCase("Gift Certificate Redeemed")) {
						expAmount = Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger)).replaceAll("[$£ ]", ""));
					}else {
						expAmount = (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger)).replaceAll("[$£ ]", ""))
								* numberOfRooms);
					}
					if (amount == expAmount) {
						reportLogger.info(ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount validated successfully in Summary View");
						test_steps.add(ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount validated successfully in Summary View");
					} else {
						reportLogger.info("Failed - " + ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount in Summary View validation failed");
						test_steps.add("AssertionError : Failed - " + ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount in Summary View validation failed. Expected: "
								+ expAmount
								+ " But found: " + amount);
					}

				} else {
					double amount = Double.parseDouble(
							afterDetailsOfAllLedgerCategories.get(ledgerAccounts.get(ledger)).substring(1).replaceAll(",", ""));
					reportLogger.info(ledger + " - " + ledgerAccounts.get(ledger) + ": " + amount);

					if (amount == (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger)).replaceAll("[$£ ]", ""))
							* numberOfRooms)) {
						reportLogger.info(ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount validated successfully in Summary View");
						test_steps.add(ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount validated successfully in Summary View");
					} else {
						reportLogger.info("Failed - " + ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount in Summary View validation failed");
						test_steps.add("AssertionError : Failed - " + ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount in Summary View validation failed. Expected: "
								+ (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger)).replaceAll("[$£ ]", "")) * numberOfRooms)
								+ " But found: " + amount);
					}

				}
			} else {
				for (int i = 0; i < strLedger.length; i++) {
					if (beforeDetailsOfAllLedgerCategories.containsKey(strLedger[i])) {
						double amount = Double
								.parseDouble(afterDetailsOfAllLedgerCategories.get(strLedger[i]).substring(1).replaceAll(",", ""))
								- Double.parseDouble(beforeDetailsOfAllLedgerCategories.get(strLedger[i]).substring(1).replaceAll(",", ""));
						reportLogger.info("Incidentals - " + strLedger[i] + ": " + amount);

						if (amount == (Double.parseDouble(folioItemValues.get(strLedger[i]).replaceAll("[$£ ]", "")) * numberOfRooms)) {
							reportLogger.info(
									ledger + " - " + strLedger[i] + " amount validated successfully in Summary View");
							test_steps.add(
									ledger + " - " + strLedger[i] + " amount validated successfully in Summary View");
						} else {
							reportLogger.info("Failed - " + ledger + " - " + strLedger[i]
									+ " amount in Summary View validation failed");
							test_steps.add("AssertionError : Failed - " + ledger + " - " + strLedger[i]
									+ " amount in Summary View validation failed. Expected: "
									+ (Double.parseDouble(folioItemValues.get(strLedger[i]).replaceAll("[$£ ]", "")) * numberOfRooms)
									+ " But found: " + amount);
						}

					} else {
						double amount = Double
								.parseDouble(afterDetailsOfAllLedgerCategories.get(strLedger[i]).substring(1).replaceAll(",", ""));
						reportLogger.info(ledger + " - " + strLedger[i] + ": " + amount);

						if (amount == (Double.parseDouble(folioItemValues.get(strLedger[i]).replaceAll("[$£ ]", "")) * numberOfRooms)) {
							reportLogger.info(
									ledger + " - " + strLedger[i] + " amount validated successfully in Summary View");
							test_steps.add(
									ledger + " - " + strLedger[i] + " amount validated successfully in Summary View");
						} else {
							reportLogger.info("Failed - " + ledger + " - " + strLedger[i]
									+ " amount in Summary View validation failed");
							test_steps.add("AssertionError : Failed - " + ledger + " - " + strLedger[i]
									+ " amount in Summary View validation failed. Expected: "
									+ (Double.parseDouble(folioItemValues.get(strLedger[i]).replaceAll("[$£ ]", "")) * numberOfRooms)
									+ " But found: " + amount);
						}

					}
				}
			}

		}

	}

	public void validateLedgerReportDetailedView(WebDriver driver, HashMap<String, String> ledgerAccounts,
			HashMap<String, String> folioItemValues, int numberOfRooms, ArrayList<String> reservationNumbers,
			ArrayList<String> guestNames, String accountName, ArrayList<String> arrivalDates, HashMap<String, String> itemDescription,
			double roomChargeAmount, String currencySymbal, String TaxExempt, String dateFormat, String processingMethod, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Set<String> ledgers = ledgerAccounts.keySet();
		HashMap<String, ArrayList<String>> TransactionDetails = new HashMap<>();

		for (String ledger : ledgers) {

			TransactionDetails.clear();
			String[] allLedgers = ledgerAccounts.get(ledger).split(",");

			if (allLedgers.length == 1) {
				TransactionDetails = getTransactionDetailsList(driver, ledgerAccounts.get(ledger), test_steps);
				reportLogger.info(ledgerAccounts.get(ledger) + " - Transaction Details: " + TransactionDetails);

				if (ledger.equalsIgnoreCase("Travel Agent Commission") || ledger.equalsIgnoreCase("Gift Certificate Redeemed")) {
					
				}else {
					if (TransactionDetails.get("Reservation #").containsAll(reservationNumbers)) {
						reportLogger.info("Reservation number " + reservationNumbers + " is available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
						test_steps.add("Reservation number " + reservationNumbers + " is available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
					} else {
						reportLogger.info("Failed, Reservation number " + reservationNumbers + " is not available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
						test_steps.add("AssertionError - Failed, Reservation number " + reservationNumbers
								+ " is not available under " + ledgerAccounts.get(ledger) + " in Detailed View");
					}
				}

				if (ledger.equalsIgnoreCase("Travel Agent Commission")) {
					if (TransactionDetails.get("Guest/Account Name").contains(accountName)) {
						reportLogger.info("Account Name " + accountName + " is available under " + ledgerAccounts.get(ledger)
								+ " in Detailed View");
						test_steps.add("Account Name " + accountName + " is available under " + ledgerAccounts.get(ledger)
								+ " in Detailed View");
					} else {
						reportLogger.info("Failed, Account Name " + accountName + " is not available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
						test_steps.add("AssertionError - Failed, Account Name " + accountName + " is not available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
					}
				}else {
					if (TransactionDetails.get("Guest/Account Name").containsAll(guestNames)) {
						reportLogger.info("Guest Name " + guestNames + " is available under " + ledgerAccounts.get(ledger)
								+ " in Detailed View");
						test_steps.add("Guest Name " + guestNames + " is available under " + ledgerAccounts.get(ledger)
								+ " in Detailed View");
					} else {
						reportLogger.info("Failed, Guest Name " + guestNames + " is not available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
						test_steps.add("AssertionError - Failed, Guest Name " + guestNames + " is not available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
					}
				}
				
				if (ledger.equalsIgnoreCase("Travel Agent Commission") || ledger.equalsIgnoreCase("Gift Certificate Redeemed") 
						|| ledger.equalsIgnoreCase("Transfer")) {
					
				}else {
					if (TransactionDetails.get("Arrival Date").containsAll(arrivalDates)) {
						reportLogger.info("Arrival Date " + arrivalDates + " is available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
						test_steps.add("Arrival Date " + arrivalDates + " is available under " + ledgerAccounts.get(ledger)
								+ " in Detailed View");
					} else {
						reportLogger.info("Failed, Arrival Date " + arrivalDates + " is not available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
						test_steps.add("AssertionError - Failed, Arrival Date " + arrivalDates + " is not available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
					}
				}


				if (TransactionDetails.get("Date").contains(Utility.getCurrentDate(dateFormat))) {
					reportLogger.info("Date " + Utility.getCurrentDate(dateFormat) + " is available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("Date " + Utility.getCurrentDate(dateFormat) + " is available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
				} else {
					reportLogger.info("Failed, Date " + Utility.getCurrentDate(dateFormat)
							+ " is not available under " + ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("AssertionError - Failed, Date " + Utility.getCurrentDate(dateFormat)
							+ " is not available under " + ledgerAccounts.get(ledger) + " in Detailed View");
				}

				if (TransactionDetails.get("Item Description")
						.contains(itemDescription.get(ledgerAccounts.get(ledger)))) {
					reportLogger.info("Item Description " + itemDescription.get(ledgerAccounts.get(ledger))
							+ " is available under " + ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("Item Description " + itemDescription.get(ledgerAccounts.get(ledger))
							+ " is available under " + ledgerAccounts.get(ledger) + " in Detailed View");
				} else {
					reportLogger.info("Failed, Item Description " + itemDescription.get(ledgerAccounts.get(ledger))
							+ " is not available under " + ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("AssertionError - Failed, Item Description "
							+ itemDescription.get(ledgerAccounts.get(ledger)) + " is not available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
				}

				if (TransactionDetails.get("Tax Exempt").contains(TaxExempt)) {
					reportLogger.info("Tax Exempt " + TaxExempt + " is available under " + ledgerAccounts.get(ledger)
							+ " in Detailed View");
					test_steps.add("Tax Exempt " + TaxExempt + " is available under " + ledgerAccounts.get(ledger)
							+ " in Detailed View");
				} else {
					reportLogger.info("Failed, Tax Exempt " + TaxExempt + " is not available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("AssertionError - Failed, Tax Exempt " + TaxExempt + " is not available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
				}
				
				if (ledger.equalsIgnoreCase("Payment Method")) {
					if (TransactionDetails.get("Processing Method").contains(processingMethod)) {
						reportLogger.info("Processing Method " + processingMethod + " is available under " + ledgerAccounts.get(ledger)
								+ " in Detailed View");
						test_steps.add("Processing Method " + processingMethod + " is available under " + ledgerAccounts.get(ledger)
								+ " in Detailed View");
					} else {
						reportLogger.info("Failed, Processing Method " + processingMethod + " is not available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
						test_steps.add("AssertionError - Failed, Processing Method " + processingMethod + " is not available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
					}
				}

				if (ledgerAccounts.get(ledger).equalsIgnoreCase("Room Charge")) {
//					String roomCost = "";
//					String[] charge = Double.toString(roomChargeAmount).split(".");
//					if (charge[1].length() == 1) {
//						roomCost = roomChargeAmount + "0";
//					}else {
//						roomCost = Double.toString(roomChargeAmount);
//					}
					if (TransactionDetails.get("Amount").contains(currencySymbal + roomChargeAmount + "0")) {
						reportLogger.info("Amount " + roomChargeAmount + " is available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
						test_steps.add("Amount " + roomChargeAmount + " is available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
					} else {
						reportLogger.info("Failed, Amount " + currencySymbal + roomChargeAmount + "0"
								+ " is not available under " + ledgerAccounts.get(ledger) + " in Detailed View");
						test_steps.add("AssertionError - Failed, Amount " + currencySymbal + roomChargeAmount + "0"
								+ " is not available under " + ledgerAccounts.get(ledger) + " in Detailed View");
					}
				} else {
//					reportLogger.info(Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))));
//					reportLogger.info(feeCalc);
//					double exp = Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) - feeCalc;
//					DecimalFormat df = new DecimalFormat("###.##");
//					double expAmount = Double.parseDouble(df.format(exp));
					double expAmount = Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger)));
					reportLogger.info("Transaction details: "+TransactionDetails.get("Amount"));
					//reportLogger.info("Fee amount exp: "+expAmount);
//					if (TransactionDetails.get("Amount")
//							.contains(currencySymbal + expAmount))) {
					if (TransactionDetails.get("Amount")
							.contains(currencySymbal
									+ folioItemValues.get(ledgerAccounts.get(ledger)))) {
						reportLogger.info("Amount " + folioItemValues.get(ledgerAccounts.get(ledger))
								+ " is available under " + ledgerAccounts.get(ledger) + " in Detailed View");
						test_steps.add("Amount " + folioItemValues.get(ledgerAccounts.get(ledger))
								+ " is available under " + ledgerAccounts.get(ledger) + " in Detailed View");
					} else {
						reportLogger.info("Failed, Amount " + currencySymbal
								+ folioItemValues.get(ledgerAccounts.get(ledger)) + " is not available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
						test_steps.add("AssertionError - Failed, Amount " + currencySymbal
								+ folioItemValues.get(ledgerAccounts.get(ledger)) + " is not available under "
								+ ledgerAccounts.get(ledger) + " in Detailed View");
					}
				}

			} else {
				for (int i = 0; i < allLedgers.length; i++) {

					TransactionDetails.clear();
					TransactionDetails = getTransactionDetailsList(driver, allLedgers[i], test_steps);

					if (TransactionDetails.get("Res #").containsAll(reservationNumbers)) {
						reportLogger.info("Reservation number " + reservationNumbers + " is available under "
								+ allLedgers[i] + " in Detailed View");
						test_steps.add("Reservation number " + reservationNumbers + " is available under "
								+ allLedgers[i] + " in Detailed View");
					} else {
						reportLogger.info("Failed, Reservation number " + reservationNumbers
								+ " is not available under " + allLedgers[i] + " in Detailed View");
						test_steps.add("AssertionError - Failed, Reservation number " + reservationNumbers
								+ " is not available under " + allLedgers[i] + " in Detailed View");
					}

					if (TransactionDetails.get("Guest/Account Name").containsAll(guestNames)) {
						reportLogger.info("Guest Name " + guestNames + " is available under " + allLedgers[i]
								+ " in Detailed View");
						test_steps.add("Guest Name " + guestNames + " is available under " + allLedgers[i]
								+ " in Detailed View");
					} else {
						reportLogger.info("Failed, Guest Name " + guestNames + " is not available under "
								+ allLedgers[i] + " in Detailed View");
						test_steps.add("AssertionError - Failed, Guest Name " + guestNames + " is not available under "
								+ allLedgers[i] + " in Detailed View");
					}

					if (TransactionDetails.get("Arrival Date").containsAll(arrivalDates)) {
						reportLogger.info("Arrival Date " + arrivalDates + " is available under " + allLedgers[i]
								+ " in Detailed View");
						test_steps.add("Arrival Date " + arrivalDates + " is available under " + allLedgers[i]
								+ " in Detailed View");
					} else {
						reportLogger.info("Failed, Arrival Date " + arrivalDates + " is not available under "
								+ allLedgers[i] + " in Detailed View");
						test_steps.add("AssertionError - Failed, Arrival Date " + arrivalDates
								+ " is not available under " + allLedgers[i] + " in Detailed View");
					}

					if (TransactionDetails.get("Date").contains(Utility.getCurrentDate(dateFormat))) {
						reportLogger.info("Date " + Utility.getCurrentDate(dateFormat) + " is available under "
								+ allLedgers[i] + " in Detailed View");
						test_steps.add("Date " + Utility.getCurrentDate(dateFormat) + " is available under "
								+ allLedgers[i] + " in Detailed View");
					} else {
						reportLogger.info("Failed, Date " + Utility.getCurrentDate(dateFormat)
								+ " is not available under " + allLedgers[i] + " in Detailed View");
						test_steps.add("AssertionError - Failed, Date " + Utility.getCurrentDate(dateFormat)
								+ " is not available under " + allLedgers[i] + " in Detailed View");
					}

					if (TransactionDetails.get("Item Description").contains(itemDescription.get(allLedgers[i]))) {
						reportLogger.info("Item Description " + itemDescription.get(allLedgers[i])
								+ " is available under " + allLedgers[i] + " in Detailed View");
						test_steps.add("Item Description " + itemDescription.get(allLedgers[i]) + " is available under "
								+ allLedgers[i] + " in Detailed View");
					} else {
						reportLogger.info("Failed, Item Description " + itemDescription.get(allLedgers[i])
								+ " is not available under " + allLedgers[i] + " in Detailed View");
						test_steps.add("AssertionError - Failed, Item Description " + itemDescription.get(allLedgers[i])
								+ " is not available under " + allLedgers[i] + " in Detailed View");
					}

					if (TransactionDetails.get("Tax Exempt").contains(TaxExempt)) {
						reportLogger.info("Tax Exempt " + TaxExempt + " is available under " + allLedgers[i]
								+ " in Detailed View");
						test_steps.add("Tax Exempt " + TaxExempt + " is available under " + allLedgers[i]
								+ " in Detailed View");
					} else {
						reportLogger.info("Failed, Tax Exempt " + TaxExempt + " is not available under " + allLedgers[i]
								+ " in Detailed View");
						test_steps.add("AssertionError - Failed, Tax Exempt " + TaxExempt + " is not available under "
								+ allLedgers[i] + " in Detailed View");
					}

					if (allLedgers[i].equalsIgnoreCase("Room Charge")) {
						if (TransactionDetails.get("Amount").contains(currencySymbal + roomChargeAmount + "0")) {
							reportLogger.info("Amount " + roomChargeAmount + " is available under " + allLedgers[i]
									+ " in Detailed View");
							test_steps.add("Amount " + roomChargeAmount + " is available under " + allLedgers[i]
									+ " in Detailed View");
						} else {
							reportLogger.info("Failed, Amount " + currencySymbal + roomChargeAmount + "0"
									+ " is not available under " + allLedgers[i] + " in Detailed View");
							test_steps.add("AssertionError - Failed, Amount " + currencySymbal + roomChargeAmount + "0"
									+ " is not available under " + allLedgers[i] + " in Detailed View");
						}
					} else {
						if (TransactionDetails.get("Amount")
								.contains(currencySymbal + folioItemValues.get(allLedgers[i]))) {
							reportLogger.info("Amount " + folioItemValues.get(allLedgers[i]) + " is available under "
									+ allLedgers[i] + " in Detailed View");
							test_steps.add("Amount " + folioItemValues.get(allLedgers[i]) + " is available under "
									+ allLedgers[i] + " in Detailed View");
						} else {
							reportLogger.info("Failed, Amount " + currencySymbal + folioItemValues.get(allLedgers[i])
									+ " is not available under " + allLedgers[i] + " in Detailed View");
							test_steps.add("AssertionError - Failed, Amount " + currencySymbal
									+ folioItemValues.get(allLedgers[i]) + " is not available under " + allLedgers[i]
									+ " in Detailed View");
						}
					}

				}
			}

		}

	}

	// This method is for Negative testing
	public void validateLedgerReportSummaryViewNegativeTesting(WebDriver driver,
			HashMap<String, String> beforeLedgerCategoryDetails,
			HashMap<String, String> beforeDetailsOfAllLedgerCategories,
			HashMap<String, String> afterLedgerCategoryDetails,
			HashMap<String, String> afterDetailsOfAllLedgerCategories, HashMap<String, String> ledgerAccounts,
			HashMap<String, Double> ledgerAmounts, HashMap<String, String> folioItemValues, int numberOfRooms,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Set<String> ledgers = ledgerAccounts.keySet();

		for (String ledger : ledgers) {

			// Summary view
			if (beforeLedgerCategoryDetails.containsKey(ledger)) {
				double totalAmount = Double.parseDouble(afterLedgerCategoryDetails.get(ledger).substring(1))
						- Double.parseDouble(beforeLedgerCategoryDetails.get(ledger).substring(1));
				reportLogger.info(ledger + ": " + totalAmount);

				if (totalAmount != ledgerAmounts.get(ledger)) {
					reportLogger.info(ledger + " amount validated successfully in Summary View");
					test_steps.add(ledger + " amount validated successfully in Summary View");
				} else {
					reportLogger.info("Failed - " + ledger + " amount in Summary View validation failed");
					test_steps.add("AssertionError : Failed - " + ledger + " amount in Summary View validation failed");
				}

			} else {
				double totalAmount = Double.parseDouble(afterLedgerCategoryDetails.get(ledger).substring(1));
				reportLogger.info(ledger + ": " + totalAmount);

				if (totalAmount != ledgerAmounts.get(ledger)) {
					reportLogger.info(ledger + " amount validated successfully in Summary View");
					test_steps.add(ledger + " amount validated successfully in Summary View");
				} else {
					reportLogger.info("Failed - " + ledger + " amount in Summary View validation failed");
					test_steps.add("AssertionError : Failed - " + ledger + " amount in Summary View validation failed");
				}

			}

			String[] strLedger = ledgerAccounts.get(ledger).split(",");

			if (strLedger.length == 1) {
				if (beforeDetailsOfAllLedgerCategories.containsKey(ledgerAccounts.get(ledger))) {
					double amount = Double
							.parseDouble(afterDetailsOfAllLedgerCategories.get(ledgerAccounts.get(ledger)).substring(1))
							- Double.parseDouble(
									beforeDetailsOfAllLedgerCategories.get(ledgerAccounts.get(ledger)).substring(1));
					reportLogger.info(ledgerAccounts.get(ledger) + " - " + ledgerAccounts.get(ledger) + ": " + amount);

					if (amount != (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger)))
							* numberOfRooms)) {
						reportLogger.info(ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount validated successfully in Summary View");
						test_steps.add(ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount validated successfully in Summary View");
					} else {
						reportLogger.info("Failed - " + ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount in Summary View validation failed");
						test_steps.add("AssertionError : Failed - " + ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount in Summary View validation failed");
					}

				} else {
					double amount = Double.parseDouble(
							afterDetailsOfAllLedgerCategories.get(ledgerAccounts.get(ledger)).substring(1));
					reportLogger.info(ledger + " - " + ledgerAccounts.get(ledger) + ": " + amount);

					if (amount != (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger)))
							* numberOfRooms)) {
						reportLogger.info(ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount validated successfully in Summary View");
						test_steps.add(ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount validated successfully in Summary View");
					} else {
						reportLogger.info("Failed - " + ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount in Summary View validation failed");
						test_steps.add("AssertionError : Failed - " + ledger + " - " + ledgerAccounts.get(ledger)
								+ " amount in Summary View validation failed.");
					}

				}
			} else {
				for (int i = 0; i < strLedger.length; i++) {
					if (beforeDetailsOfAllLedgerCategories.containsKey(strLedger[i])) {
						double amount = Double
								.parseDouble(afterDetailsOfAllLedgerCategories.get(strLedger[i]).substring(1))
								- Double.parseDouble(beforeDetailsOfAllLedgerCategories.get(strLedger[i]).substring(1));
						reportLogger.info("Incidentals - " + strLedger[i] + ": " + amount);

						if (amount != (Double.parseDouble(folioItemValues.get(strLedger[i])) * numberOfRooms)) {
							reportLogger.info(
									ledger + " - " + strLedger[i] + " amount validated successfully in Summary View");
							test_steps.add(
									ledger + " - " + strLedger[i] + " amount validated successfully in Summary View");
						} else {
							reportLogger.info("Failed - " + ledger + " - " + strLedger[i]
									+ " amount in Summary View validation failed");
							test_steps.add("AssertionError : Failed - " + ledger + " - " + strLedger[i]
									+ " amount in Summary View validation failed");
						}

					} else {
						double amount = Double
								.parseDouble(afterDetailsOfAllLedgerCategories.get(strLedger[i]).substring(1));
						reportLogger.info(ledger + " - " + strLedger[i] + ": " + amount);

						if (amount != (Double.parseDouble(folioItemValues.get(strLedger[i])) * numberOfRooms)) {
							reportLogger.info(
									ledger + " - " + strLedger[i] + " amount validated successfully in Summary View");
							test_steps.add(
									ledger + " - " + strLedger[i] + " amount validated successfully in Summary View");
						} else {
							reportLogger.info("Failed - " + ledger + " - " + strLedger[i]
									+ " amount in Summary View validation failed");
							test_steps.add("AssertionError : Failed - " + ledger + " - " + strLedger[i]
									+ " amount in Summary View validation failed");
						}

					}
				}
			}

		}

	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ Method Name: <validateGeneratedOnValue> Description: <This
	 * method validates value of Generated On in Report generated> Input parameters:
	 * <WebDriver driver, ArrayList<String> test_steps> Return value: <void> Created
	 * By: <Naveen Kadthala> Created On: <09/15/2020>
	 * 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void validateGeneratedOnValue(WebDriver driver, ArrayList<String> test_steps) {
		try {
			Elements_Reports res = new Elements_Reports(driver);

			DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MMM dd, yyyy | hh:mm a");
			LocalDateTime now = LocalDateTime.now();

			String expValue = dtf.format(now);
			String actValue = res.GRGeneratedOnValue.getText().trim();

			System.out.println("expValue="+expValue);
			System.out.println("actValue="+actValue);
			
			if (expValue.equals(actValue)) {
				reportLogger.info("Success - Generated On value validation");
				test_steps.add("Success - Generated On value validation");
			} else {
				reportLogger.info("FAIL - Generated On value validation");
				test_steps.add("AssertionError - FAIL - Generated On value validation-<Br>");
			}
		} catch (Exception e) {
			reportLogger.info("FAIL - Generated On value validation");
			test_steps.add("AssertionError - FAIL - Generated On value validation-<Br>" + e.toString());
		} catch (Error e) {
			reportLogger.info("FAIL - Generated On value validation");
			test_steps.add("AssertionError - FAIL - Generated On value validation-<Br>" + e.toString());
		}
	}
	
	//This method is to add Folio line items
	public void addFolioLineItems(WebDriver driver, String Incidentals, String AmountIncidentals, String RoomCharges, String AmountRoomCharges, 
			String Taxes, String AmountTaxes, String Fees, String AmountFees, String itemStatuOptions, ArrayList<String> test_steps) throws InterruptedException {
		
		
		Folio folio = new Folio();
		CPReservationPage reservationPage = new CPReservationPage();
		
		if (!Incidentals.isEmpty()) {
			if (Incidentals.split(",").length == 1) {
				folio.clickAddLineItemButton(driver);
				folio.AddFolioLineItem(driver, Incidentals, AmountIncidentals);
				reportLogger.info("Incidentals - " + Incidentals + " - " + AmountIncidentals + " added");
				test_steps.add("Incidentals - " + Incidentals + " - " + AmountIncidentals + " added");

				if (itemStatuOptions.equalsIgnoreCase("void")) {
					//folio.VoidLineItem(driver, Incidentals);
					folio.voidLineItem(driver, Incidentals, "test");
				}
				if (itemStatuOptions.equalsIgnoreCase("Posted")) {
					// folio.clickAddLineItemButton(driver);
					// folio.AddFolioLineItem(driver, "Spa", "70");
					Wait.wait2Second();
					driver.findElement(By.xpath("//span[text()='"+Incidentals+"']/../../td[contains(@class,'changestatus')]")).click();
				}
				
				//folio.ClickSaveFolioButton(driver);
				folio.ClickSaveFolioItemsButton(driver);

			} else {
				String[] inc = Incidentals.split(",");
				for (int i = 0; i < inc.length; i++) {
					folio.clickAddLineItemButton(driver);
					folio.AddFolioLineItem(driver, inc[i], AmountIncidentals);
					reportLogger.info("Incidentals - " + inc[i] + " - " + AmountIncidentals + " added");
					test_steps.add("Incidentals - " + inc[i] + " - " + AmountIncidentals + " added");

					if (itemStatuOptions.equalsIgnoreCase("void")) {
						folio.VoidLineItem(driver, inc[i]);
					}
					if (itemStatuOptions.equalsIgnoreCase("Posted")) {
						// folio.clickAddLineItemButton(driver);
						// folio.AddFolioLineItem(driver, "Spa", "70");
						Wait.wait2Second();
						driver.findElement(By.xpath("//span[text()='"+inc[i]+"']/../../td[contains(@class,'changestatus')]")).click();
					}
				}
				//folio.ClickSaveFolioButton(driver);
				folio.ClickSaveFolioItemsButton(driver);
			}
		}

		if (!RoomCharges.isEmpty()) {

			if (RoomCharges.split(",").length == 1) {
				if (!RoomCharges.equalsIgnoreCase("Room Charge")) {
					folio.clickAddLineItemButton(driver);
					folio.AddFolioLineItem(driver, RoomCharges, AmountRoomCharges);
					// driver.findElement(By.xpath("//span[text()='"+RoomCharges+"']/../../td[contains(@class,'changestatus')]")).click();
					reportLogger.info(
							"Room Charge - " + RoomCharges + " - " + AmountRoomCharges + " added");
					test_steps
							.add("Room Charge - " + RoomCharges + " - " + AmountRoomCharges + " added");

					if (itemStatuOptions.equalsIgnoreCase("void")) {
						//folio.VoidLineItem(driver, RoomCharges);
						folio.voidLineItem(driver, RoomCharges, "test");
						reportLogger.info(RoomCharges+"Folio item void");
					}
					if (itemStatuOptions.equalsIgnoreCase("Posted")) {
						Wait.wait2Second();
						driver.findElement(By.xpath("//span[text()='"+RoomCharges+"']/../../td[contains(@class,'changestatus')]")).click();
						reportLogger.info(RoomCharges+"Folio item posted");
					}
					//folio.ClickSaveFolioButton(driver);
					folio.ClickSaveFolioItemsButton(driver);
				}else {
					if (itemStatuOptions.equalsIgnoreCase("void")) {
						//folio.VoidLineItem(driver, RoomCharges);
						folio.voidLineItem(driver, RoomCharges, "test");
						reportLogger.info(RoomCharges+"Folio item void");
						folio.ClickSaveFolioItemsButton(driver);
					}
					if (itemStatuOptions.equalsIgnoreCase("Posted")) {
						Wait.wait2Second();
						try {
							driver.findElement(By.xpath("(//span[text()='"+RoomCharges+"']/../../td[contains(@class,'changestatus')])[2]")).click();
						}catch(Exception e) {
							driver.findElement(By.xpath("//span[text()='"+RoomCharges+"']/../../td[contains(@class,'changestatus')]")).click();
						}
						reportLogger.info(RoomCharges+"Folio item posted");
						folio.ClickSaveFolioItemsButton(driver);
					}
					//folio.ClickSaveFolioButton(driver);
					
				}

			} else {
				String[] rc = RoomCharges.split(",");
				for (int i = 0; i < rc.length; i++) {

					if (!rc[i].equalsIgnoreCase("Room Charge")) {
						folio.clickAddLineItemButton(driver);
						folio.AddFolioLineItem(driver, rc[i], AmountRoomCharges);
						// driver.findElement(By.xpath("//span[text()='"+rc[i]+"']/../../td[contains(@class,'changestatus')]")).click();
						reportLogger.info("Room Charge - " + rc[i] + " - " + AmountRoomCharges + " added");
						test_steps.add("Room Charge - " + rc[i] + " - " + AmountRoomCharges + " added");

						if (itemStatuOptions.equalsIgnoreCase("void")) {
							//folio.VoidLineItem(driver, rc[i]);
							folio.voidLineItem(driver, rc[i], "test");
							reportLogger.info(rc[i]+"Folio item void");
						}
						if (itemStatuOptions.equalsIgnoreCase("Posted")) {
							Wait.wait2Second();
							driver.findElement(By.xpath("//span[text()='"+rc[i]+"']/../../td[contains(@class,'changestatus')]")).click();
							reportLogger.info(rc[i]+"Folio item posted");
						}
						//folio.ClickSaveFolioButton(driver);
						folio.ClickSaveFolioItemsButton(driver);
						
					}else {
						if (itemStatuOptions.equalsIgnoreCase("void")) {
							//folio.VoidLineItem(driver, rc[i]);
							folio.voidLineItem(driver, rc[i], "test");
							reportLogger.info(rc[i]+"Folio item void");
						}
						if (itemStatuOptions.equalsIgnoreCase("Posted")) {
							Wait.wait2Second();
							try {
								driver.findElement(By.xpath("(//span[text()='"+rc[i]+"']/../../td[contains(@class,'changestatus')])[2]")).click();
							}catch(Exception e) {
								driver.findElement(By.xpath("//span[text()='"+rc[i]+"']/../../td[contains(@class,'changestatus')]")).click();
							}
							reportLogger.info(rc[i]+"Folio item posted");
						}
					}

				}
				//folio.ClickSaveFolioButton(driver);
				folio.ClickSaveFolioItemsButton(driver);
			}
		}

/*		if (!Taxes.isEmpty()) {
			if (Taxes.split(",").length == 1) {
				folio.clickAddLineItemButton(driver);
				folio.AddFolioLineItem(driver, Taxes, AmountTaxes);

				reportLogger.info("Taxes - " + Taxes + " - " + AmountTaxes + " added");
				test_steps.add("Taxes - " + Taxes + " - " + AmountTaxes + " added");

				if (itemStatuOptions.equalsIgnoreCase("void")) {
					//folio.VoidLineItem(driver, Taxes);
					folio.voidLineItem(driver, Taxes, "test");
				}
				if (itemStatuOptions.equalsIgnoreCase("Posted")) {
					Wait.wait2Second();
					driver.findElement(By.xpath("//span[text()='"+Taxes+"']/../../td[contains(@class,'changestatus')]")).click();
					reportLogger.info(Taxes+"Folio item posted");
				}
				//folio.ClickSaveFolioButton(driver);
				folio.ClickSaveFolioItemsButton(driver);

			} else {
				String[] tax = Taxes.split(",");
				for (int i = 0; i < tax.length; i++) {
					folio.clickAddLineItemButton(driver);
					folio.AddFolioLineItem(driver, tax[i], AmountTaxes);

					reportLogger.info("Taxes - " + tax[i] + " - " + AmountTaxes + " added");
					test_steps.add("Taxes - " + tax[i] + " - " + AmountTaxes + " added");

					if (itemStatuOptions.equalsIgnoreCase("void")) {
						//folio.VoidLineItem(driver, tax[i]);
						folio.voidLineItem(driver, tax[i], "test");
					}
					if (itemStatuOptions.equalsIgnoreCase("Posted")) {
						Wait.wait2Second();
						driver.findElement(By.xpath("//span[text()='"+tax[i]+"']/../../td[contains(@class,'changestatus')]")).click();
						reportLogger.info(tax[i]+"Folio item posted");
					}
					
				}
				//folio.ClickSaveFolioButton(driver);
				folio.ClickSaveFolioItemsButton(driver);
			}
		}

		if (!Fees.isEmpty()) {
			if (Fees.split(",").length == 1) {
				folio.clickAddLineItemButton(driver);
				folio.AddFolioLineItem(driver, Fees, AmountFees);

				reportLogger.info("Fees - " + Fees + " - " + AmountFees + " added");
				test_steps.add("Fees - " + Fees + " - " + AmountFees + " added");

				if (itemStatuOptions.equalsIgnoreCase("void")) {
					//folio.VoidLineItem(driver, Fees);
					folio.voidLineItem(driver, Fees, "test");
				}
				if (itemStatuOptions.equalsIgnoreCase("Posted")) {
					Wait.wait2Second();
					driver.findElement(By.xpath("//span[text()='"+Fees+"']/../../td[contains(@class,'changestatus')]")).click();
					reportLogger.info(Fees+"Folio item posted");
				}
				//folio.ClickSaveFolioButton(driver);
				folio.ClickSaveFolioItemsButton(driver);
			} else {
				String[] fee = Fees.split(",");
				for (int i = 0; i < fee.length; i++) {
					folio.clickAddLineItemButton(driver);
					folio.AddFolioLineItem(driver, fee[i], AmountFees);

					reportLogger.info("Fees - " + fee[i] + " - " + AmountFees + " added");
					test_steps.add("Fees - " + fee[i] + " - " + AmountFees + " added");

					if (itemStatuOptions.equalsIgnoreCase("void")) {
						//folio.VoidLineItem(driver, fee[i]);
						folio.voidLineItem(driver, fee[i], "test");
					}
					if (itemStatuOptions.equalsIgnoreCase("Posted")) {
						Wait.wait2Second();
						driver.findElement(By.xpath("//span[text()='"+fee[i]+"']/../../td[contains(@class,'changestatus')]")).click();
						reportLogger.info(fee[i]+"Folio item posted");
					}
				}
				//folio.ClickSaveFolioButton(driver);
				folio.ClickSaveFolioItemsButton(driver);
			}
		} */
	}
	
	public void addAccountFolioLineItems(WebDriver driver, String Incidentals, String AmountIncidentals, String RoomCharges, String AmountRoomCharges, 
			String Taxes, String AmountTaxes, String Fees, String AmountFees, String itemStatuOptions, ArrayList<Double> allAmounts, ArrayList<String> test_steps) throws InterruptedException {
		
		Account accountPage = new Account();
		Double amountAllIncidentals=0.0, amountAllRoomCharges = 0.0, amountAllTaxes = 0.0, amountAllFees = 0.0;
		
		if (!Incidentals.isEmpty()) {
			if (Incidentals.split(",").length == 1) {
				accountPage.addLineItems(driver, Incidentals, AmountIncidentals, test_steps);
				accountPage.Commit(driver);
				Wait.wait3Second();
				reportLogger.info("Incidentals - " + Incidentals + " - " + AmountIncidentals + " added");
				test_steps.add("Incidentals - " + Incidentals + " - " + AmountIncidentals + " added");

				amountAllIncidentals = Double.parseDouble(AmountIncidentals);

				if (itemStatuOptions.equalsIgnoreCase("void")) {
					accountPage.VoidLineItem(driver, Incidentals);
					// folio.VoidLineItem(driver, Incidentals);
				}else if (itemStatuOptions.equalsIgnoreCase("Posted")) {
					accountPage.postedFirstLineItemAndGetAmount(driver, test_steps);
				}
				accountPage.Save(driver);

			} else {
				String[] inc = Incidentals.split(",");
				for (int i = 0; i < inc.length; i++) {
					accountPage.addLineItems(driver, inc[i], AmountIncidentals, test_steps);
					accountPage.Commit(driver);
					Wait.wait2Second();
					// folio.clickAddLineItemButton(driver);
					// folio.AddFolioLineItem(driver, inc[i], AmountIncidentals);
					reportLogger.info("Incidentals - " + inc[i] + " - " + AmountIncidentals + " added");
					test_steps.add("Incidentals - " + inc[i] + " - " + AmountIncidentals + " added");

					amountAllIncidentals = amountAllIncidentals + Double.parseDouble(AmountIncidentals);

					if (itemStatuOptions.equalsIgnoreCase("void")) {
						accountPage.VoidLineItem(driver, inc[i]);
						// folio.VoidLineItem(driver, inc[i]);
					}else if (itemStatuOptions.equalsIgnoreCase("Posted")) {
						accountPage.postedFirstLineItemAndGetAmount(driver, test_steps);
					}
				}
				accountPage.Save(driver);
			}
		}

		if (!RoomCharges.isEmpty()) {

			if (RoomCharges.split(",").length == 1) {
				accountPage.addLineItems(driver, RoomCharges, AmountRoomCharges, test_steps);
				accountPage.Commit(driver);
				Wait.wait2Second();
				// accountPage.Commit(driver, test);
				// folio.clickAddLineItemButton(driver);
				// folio.AddFolioLineItem(driver, RoomCharges, AmountRoomCharges);
				// driver.findElement(By.xpath("//span[text()='"+RoomCharges+"']/../../td[contains(@class,'changestatus')]")).click();
				reportLogger.info("Room Charge - " + RoomCharges + " - " + AmountRoomCharges + " added");
				test_steps.add("Room Charge - " + RoomCharges + " - " + AmountRoomCharges + " added");

				amountAllRoomCharges = Double.parseDouble(AmountRoomCharges);

				if (itemStatuOptions.equalsIgnoreCase("void")) {
					accountPage.VoidLineItem(driver, RoomCharges);
					// folio.VoidLineItem(driver, RoomCharges);
				}else if (itemStatuOptions.equalsIgnoreCase("Posted")) {
					accountPage.postedFirstLineItemAndGetAmount(driver, test_steps);
				}
				accountPage.Save(driver);

			} else {
				String[] rc = RoomCharges.split(",");
				for (int i = 0; i < rc.length; i++) {

					accountPage.addLineItems(driver, rc[i], AmountRoomCharges, test_steps);
					accountPage.Commit(driver);
					Wait.wait2Second();
					// folio.clickAddLineItemButton(driver);
					// folio.AddFolioLineItem(driver, rc[i], AmountRoomCharges);
					// driver.findElement(By.xpath("//span[text()='"+rc[i]+"']/../../td[contains(@class,'changestatus')]")).click();
					reportLogger.info("Room Charge - " + rc[i] + " - " + AmountRoomCharges + " added");
					test_steps.add("Room Charge - " + rc[i] + " - " + AmountRoomCharges + " added");

					amountAllRoomCharges = amountAllRoomCharges + Double.parseDouble(AmountRoomCharges);

					if (itemStatuOptions.equalsIgnoreCase("void")) {
						accountPage.VoidLineItem(driver, rc[i]);
						// folio.VoidLineItem(driver, rc[i]);
					}else if (itemStatuOptions.equalsIgnoreCase("Posted")) {
						accountPage.postedFirstLineItemAndGetAmount(driver, test_steps);
					}

				}
				accountPage.Save(driver);
			}
		}

		if (!Taxes.isEmpty()) {
			if (Taxes.split(",").length == 1) {

				accountPage.addLineItems(driver, Taxes, AmountTaxes, test_steps);
				accountPage.Commit(driver);
				Wait.wait2Second();
				reportLogger.info("Taxes - " + Taxes + " - " + AmountTaxes + " added");
				test_steps.add("Taxes - " + Taxes + " - " + AmountTaxes + " added");

				amountAllTaxes = Double.parseDouble(AmountTaxes);

				if (itemStatuOptions.equalsIgnoreCase("void")) {
					//folio.VoidLineItem(driver, Taxes);
					accountPage.VoidLineItem(driver, Taxes);
				}else if (itemStatuOptions.equalsIgnoreCase("Posted")) {
					accountPage.postedFirstLineItemAndGetAmount(driver, test_steps);
				}
				accountPage.Save(driver);

			} else {
				String[] tax = Taxes.split(",");
				for (int i = 0; i < tax.length; i++) {
					accountPage.addLineItems(driver, tax[i], AmountTaxes, test_steps);
					accountPage.Commit(driver);
					Wait.wait2Second();
					reportLogger.info("Taxes - " + tax[i] + " - " + AmountTaxes + " added");
					test_steps.add("Taxes - " + tax[i] + " - " + AmountTaxes + " added");

					amountAllTaxes = amountAllTaxes + Double.parseDouble(AmountTaxes);

					if (itemStatuOptions.equalsIgnoreCase("void")) {
						//folio.VoidLineItem(driver, tax[i]);
						accountPage.VoidLineItem(driver, tax[i]);
					}else if (itemStatuOptions.equalsIgnoreCase("Posted")) {
						accountPage.postedFirstLineItemAndGetAmount(driver, test_steps);
					}
				}
				accountPage.Save(driver);
			}
		}

		if (!Fees.isEmpty()) {
			if (Fees.split(",").length == 1) {
				accountPage.addLineItems(driver, Fees, AmountFees, test_steps);
				accountPage.Commit(driver);
				Wait.wait2Second();
				reportLogger.info("Fees - " + Fees + " - " + AmountFees + " added");
				test_steps.add("Fees - " + Fees + " - " + AmountFees + " added");

				amountAllFees = Double.parseDouble(AmountFees);

				if (itemStatuOptions.equalsIgnoreCase("void")) {
					//folio.VoidLineItem(driver, Fees);
					accountPage.VoidLineItem(driver, Fees);
				}else if (itemStatuOptions.equalsIgnoreCase("Posted")) {
					accountPage.postedFirstLineItemAndGetAmount(driver, test_steps);
				}
				accountPage.Save(driver);
			} else {
				String[] fee = Fees.split(",");
				for (int i = 0; i < fee.length; i++) {
					accountPage.addLineItems(driver, fee[i], AmountFees, test_steps);
					accountPage.Commit(driver);
					Wait.wait2Second();
					reportLogger.info("Fees - " + fee[i] + " - " + AmountFees + " added");
					test_steps.add("Fees - " + fee[i] + " - " + AmountFees + " added");

					amountAllFees = amountAllFees + Double.parseDouble(AmountFees);

					if (itemStatuOptions.equalsIgnoreCase("void")) {
						//folio.VoidLineItem(driver, fee[i]);
						accountPage.VoidLineItem(driver, fee[i]);
					}else if (itemStatuOptions.equalsIgnoreCase("Posted")) {
						accountPage.postedFirstLineItemAndGetAmount(driver, test_steps);
					}
				}
				accountPage.Save(driver);
			}
		}
		allAmounts.add(amountAllIncidentals);
		allAmounts.add(amountAllRoomCharges);
		allAmounts.add(amountAllTaxes);
		allAmounts.add(amountAllFees);
		
	}
	
	
	public void addGroupFolioLineItems(WebDriver driver, String Incidentals, String AmountIncidentals, String RoomCharges, String AmountRoomCharges, 
			String Taxes, String AmountTaxes, String Fees, String AmountFees, String itemStatuOptions, ArrayList<Double> allAmounts, ArrayList<String> test_steps) throws InterruptedException {
		
		Account accountPage = new Account();
		Groups group = new Groups();
		Double amountAllIncidentals=0.0, amountAllRoomCharges = 0.0, amountAllTaxes = 0.0, amountAllFees = 0.0;
		
		if (!Incidentals.isEmpty()) {
			if (Incidentals.split(",").length == 1) {
				group.addLineItems(driver, Incidentals, AmountIncidentals);
				group.commit(driver, null);
				Wait.wait3Second();
				reportLogger.info("Incidentals - " + Incidentals + " - " + AmountIncidentals + " added");
				test_steps.add("Incidentals - " + Incidentals + " - " + AmountIncidentals + " added");

				amountAllIncidentals = Double.parseDouble(AmountIncidentals);

				if (itemStatuOptions.equalsIgnoreCase("void")) {
					group.voidLineItem(driver, Incidentals);
					// folio.VoidLineItem(driver, Incidentals);
				}
				group.Save(driver, test_steps);

			} else {
				String[] inc = Incidentals.split(",");
				for (int i = 0; i < inc.length; i++) {
					group.addLineItems(driver, inc[i], AmountIncidentals);
					group.commit(driver, null);
					Wait.wait2Second();
					// folio.clickAddLineItemButton(driver);
					// folio.AddFolioLineItem(driver, inc[i], AmountIncidentals);
					reportLogger.info("Incidentals - " + inc[i] + " - " + AmountIncidentals + " added");
					test_steps.add("Incidentals - " + inc[i] + " - " + AmountIncidentals + " added");

					amountAllIncidentals = amountAllIncidentals + Double.parseDouble(AmountIncidentals);

					if (itemStatuOptions.equalsIgnoreCase("void")) {
						group.voidLineItem(driver, inc[i]);
						// folio.VoidLineItem(driver, inc[i]);
					}
				}
				group.Save(driver, test_steps);
			}
		}

		if (!RoomCharges.isEmpty()) {

			if (RoomCharges.split(",").length == 1) {
				group.addLineItems(driver, RoomCharges, AmountRoomCharges);
				group.commit(driver, null);
				
				Wait.wait2Second();
				reportLogger.info("Room Charge - " + RoomCharges + " - " + AmountRoomCharges + " added");
				test_steps.add("Room Charge - " + RoomCharges + " - " + AmountRoomCharges + " added");

				amountAllRoomCharges = Double.parseDouble(AmountRoomCharges);

				if (itemStatuOptions.equalsIgnoreCase("void")) {
					group.voidLineItem(driver, RoomCharges);
					// folio.VoidLineItem(driver, RoomCharges);
				}
				group.Save(driver, test_steps);

			} else {
				String[] rc = RoomCharges.split(",");
				for (int i = 0; i < rc.length; i++) {
					group.addLineItems(driver, rc[i], AmountRoomCharges);
					group.commit(driver, null);
					Wait.wait2Second();
					// folio.clickAddLineItemButton(driver);
					// folio.AddFolioLineItem(driver, rc[i], AmountRoomCharges);
					// driver.findElement(By.xpath("//span[text()='"+rc[i]+"']/../../td[contains(@class,'changestatus')]")).click();
					reportLogger.info("Room Charge - " + rc[i] + " - " + AmountRoomCharges + " added");
					test_steps.add("Room Charge - " + rc[i] + " - " + AmountRoomCharges + " added");

					amountAllRoomCharges = amountAllRoomCharges + Double.parseDouble(AmountRoomCharges);

					if (itemStatuOptions.equalsIgnoreCase("void")) {
						group.voidLineItem(driver, rc[i]);
						// folio.VoidLineItem(driver, rc[i]);
					}

				}
				group.Save(driver, test_steps);
			}
		}

//		if (!Taxes.isEmpty()) {
//			if (Taxes.split(",").length == 1) {
//				group.addLineItems(driver, Taxes, Taxes);
//				group.commit(driver, null);
//				Wait.wait2Second();
//				reportLogger.info("Taxes - " + Taxes + " - " + AmountTaxes + " added");
//				test_steps.add("Taxes - " + Taxes + " - " + AmountTaxes + " added");
//
//				amountAllTaxes = Double.parseDouble(AmountTaxes);
//
//				if (itemStatuOptions.equalsIgnoreCase("void")) {
//					group.voidLineItem(driver, Taxes);
//				}
//				group.Save(driver, test_steps);
//
//			} else {
//				String[] tax = Taxes.split(",");
//				for (int i = 0; i < tax.length; i++) {
//					group.addLineItems(driver, tax[i], AmountTaxes);
//					group.commit(driver, null);
//					Wait.wait2Second();
//					reportLogger.info("Taxes - " + tax[i] + " - " + AmountTaxes + " added");
//					test_steps.add("Taxes - " + tax[i] + " - " + AmountTaxes + " added");
//
//					amountAllTaxes = amountAllTaxes + Double.parseDouble(AmountTaxes);
//
//					if (itemStatuOptions.equalsIgnoreCase("void")) {
//						group.voidLineItem(driver, tax[i]);
//					}
//				}
//				group.Save(driver, test_steps);
//			}
//		}

		if (!Fees.isEmpty()) {
			if (Fees.split(",").length == 1) {
				group.addLineItems(driver, Fees, AmountFees);
				group.commit(driver, null);
				Wait.wait2Second();
				reportLogger.info("Fees - " + Fees + " - " + AmountFees + " added");
				test_steps.add("Fees - " + Fees + " - " + AmountFees + " added");

				amountAllFees = Double.parseDouble(AmountFees);

				if (itemStatuOptions.equalsIgnoreCase("void")) {
					group.voidLineItem(driver, Fees);
				}
				group.Save(driver, test_steps);
			} else {
				String[] fee = Fees.split(",");
				for (int i = 0; i < fee.length; i++) {
					group.addLineItems(driver, fee[i], AmountFees);
					group.commit(driver, null);
					Wait.wait2Second();
					reportLogger.info("Fees - " + fee[i] + " - " + AmountFees + " added");
					test_steps.add("Fees - " + fee[i] + " - " + AmountFees + " added");

					amountAllFees = amountAllFees + Double.parseDouble(AmountFees);

					if (itemStatuOptions.equalsIgnoreCase("void")) {
						group.voidLineItem(driver, fee[i]);
					}
				}
				group.Save(driver, test_steps);
			}
		}
		allAmounts.add(amountAllIncidentals);
		allAmounts.add(amountAllRoomCharges);
		allAmounts.add(amountAllTaxes);
		allAmounts.add(amountAllFees);
		
	}

	// This method is to validate Detailed view for account Folio
	public void validateLedgerReportDetailedViewAccounts(WebDriver driver, HashMap<String, String> ledgerAccounts,
			HashMap<String, String> folioItemValues, ArrayList<String> guestNames,
			HashMap<String, String> itemDescription, String currencySymbal, String TaxExempt,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Set<String> ledgers = ledgerAccounts.keySet();
		HashMap<String, ArrayList<String>> TransactionDetails = new HashMap<>();

		for (String ledger : ledgers) {

			TransactionDetails.clear();
			String[] allLedgers = ledgerAccounts.get(ledger).split(",");

			if (allLedgers.length == 1) {
				TransactionDetails = getTransactionDetailsList(driver, ledgerAccounts.get(ledger), test_steps);
				reportLogger.info(ledgerAccounts.get(ledger) + " - Transaction Details: " + TransactionDetails);

				if (TransactionDetails.get("Guest/Account Name").containsAll(guestNames)) {
					reportLogger.info("Guest Name " + guestNames + " is available under " + ledgerAccounts.get(ledger)
							+ " in Detailed View");
					test_steps.add("Guest Name " + guestNames + " is available under " + ledgerAccounts.get(ledger)
							+ " in Detailed View");
				} else {
					reportLogger.info("Failed, Guest Name " + guestNames + " is not available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("AssertionError - Failed, Guest Name " + guestNames + " is not available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
				}

				if (TransactionDetails.get("Date").contains(Utility.getCurrentDate("MMM dd, yyyy"))) {
					reportLogger.info("Date " + Utility.getCurrentDate("MMM dd,yyyy") + " is available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("Date " + Utility.getCurrentDate("MMM dd,yyyy") + " is available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
				} else {
					reportLogger.info("Failed, Date " + Utility.getCurrentDate("MMM dd, yyyy")
							+ " is not available under " + ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("AssertionError - Failed, Date " + Utility.getCurrentDate("MMM dd, yyyy")
							+ " is not available under " + ledgerAccounts.get(ledger) + " in Detailed View");
				}

				if (TransactionDetails.get("Item Description")
						.contains(itemDescription.get(ledgerAccounts.get(ledger)))) {
					reportLogger.info("Item Description " + itemDescription.get(ledgerAccounts.get(ledger))
							+ " is available under " + ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("Item Description " + itemDescription.get(ledgerAccounts.get(ledger))
							+ " is available under " + ledgerAccounts.get(ledger) + " in Detailed View");
				} else {
					reportLogger.info("Failed, Item Description " + itemDescription.get(ledgerAccounts.get(ledger))
							+ " is not available under " + ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("AssertionError - Failed, Item Description "
							+ itemDescription.get(ledgerAccounts.get(ledger)) + " is not available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
				}

				if (TransactionDetails.get("Tax Exempt").contains(TaxExempt)) {
					reportLogger.info("Tax Exempt " + TaxExempt + " is available under " + ledgerAccounts.get(ledger)
							+ " in Detailed View");
					test_steps.add("Tax Exempt " + TaxExempt + " is available under " + ledgerAccounts.get(ledger)
							+ " in Detailed View");
				} else {
					reportLogger.info("Failed, Tax Exempt " + TaxExempt + " is not available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("AssertionError - Failed, Tax Exempt " + TaxExempt + " is not available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
				}

				if (TransactionDetails.get("Amount")
						.contains(currencySymbal + folioItemValues.get(ledgerAccounts.get(ledger)))) {
					reportLogger.info("Amount " + folioItemValues.get(ledgerAccounts.get(ledger))
							+ " is available under " + ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("Amount " + folioItemValues.get(ledgerAccounts.get(ledger)) + " is available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
				} else {
					reportLogger
							.info("Failed, Amount " + currencySymbal + folioItemValues.get(ledgerAccounts.get(ledger))
									+ " is not available under " + ledgerAccounts.get(ledger) + " in Detailed View");
					test_steps.add("AssertionError - Failed, Amount " + currencySymbal
							+ folioItemValues.get(ledgerAccounts.get(ledger)) + " is not available under "
							+ ledgerAccounts.get(ledger) + " in Detailed View");
				}

			} else {
				for (int i = 0; i < allLedgers.length; i++) {

					TransactionDetails.clear();
					TransactionDetails = getTransactionDetailsList(driver, allLedgers[i], test_steps);

					if (TransactionDetails.get("Guest/Account Name").containsAll(guestNames)) {
						reportLogger.info("Guest Name " + guestNames + " is available under " + allLedgers[i]
								+ " in Detailed View");
						test_steps.add("Guest Name " + guestNames + " is available under " + allLedgers[i]
								+ " in Detailed View");
					} else {
						reportLogger.info("Failed, Guest Name " + guestNames + " is not available under "
								+ allLedgers[i] + " in Detailed View");
						test_steps.add("AssertionError - Failed, Guest Name " + guestNames + " is not available under "
								+ allLedgers[i] + " in Detailed View");
					}

					if (TransactionDetails.get("Date").contains(Utility.getCurrentDate("MMM dd, yyyy"))) {
						reportLogger.info("Date " + Utility.getCurrentDate("MMM dd, yyyy") + " is available under "
								+ allLedgers[i] + " in Detailed View");
						test_steps.add("Date " + Utility.getCurrentDate("MMM dd, yyyy") + " is available under "
								+ allLedgers[i] + " in Detailed View");
					} else {
						reportLogger.info("Failed, Date " + Utility.getCurrentDate("MMM dd, yyyy")
								+ " is not available under " + allLedgers[i] + " in Detailed View");
						test_steps.add("AssertionError - Failed, Date " + Utility.getCurrentDate("MMM dd, yyyy")
								+ " is not available under " + allLedgers[i] + " in Detailed View");
					}

					if (TransactionDetails.get("Item Description").contains(itemDescription.get(allLedgers[i]))) {
						reportLogger.info("Item Description " + itemDescription.get(allLedgers[i])
								+ " is available under " + allLedgers[i] + " in Detailed View");
						test_steps.add("Item Description " + itemDescription.get(allLedgers[i]) + " is available under "
								+ allLedgers[i] + " in Detailed View");
					} else {
						reportLogger.info("Failed, Item Description " + itemDescription.get(allLedgers[i])
								+ " is not available under " + allLedgers[i] + " in Detailed View");
						test_steps.add("AssertionError - Failed, Item Description " + itemDescription.get(allLedgers[i])
								+ " is not available under " + allLedgers[i] + " in Detailed View");
					}

					if (TransactionDetails.get("Tax Exempt").contains(TaxExempt)) {
						reportLogger.info("Tax Exempt " + TaxExempt + " is available under " + allLedgers[i]
								+ " in Detailed View");
						test_steps.add("Tax Exempt " + TaxExempt + " is available under " + allLedgers[i]
								+ " in Detailed View");
					} else {
						reportLogger.info("Failed, Tax Exempt " + TaxExempt + " is not available under " + allLedgers[i]
								+ " in Detailed View");
						test_steps.add("AssertionError - Failed, Tax Exempt " + TaxExempt + " is not available under "
								+ allLedgers[i] + " in Detailed View");
					}

					if (TransactionDetails.get("Amount")
							.contains(currencySymbal + folioItemValues.get(allLedgers[i]))) {
						reportLogger.info("Amount " + folioItemValues.get(allLedgers[i]) + " is available under "
								+ allLedgers[i] + " in Detailed View");
						test_steps.add("Amount " + folioItemValues.get(allLedgers[i]) + " is available under "
								+ allLedgers[i] + " in Detailed View");
					} else {
						reportLogger.info("Failed, Amount " + currencySymbal + folioItemValues.get(allLedgers[i])
								+ " is not available under " + allLedgers[i] + " in Detailed View");
						test_steps.add(
								"AssertionError - Failed, Amount " + currencySymbal + folioItemValues.get(allLedgers[i])
										+ " is not available under " + allLedgers[i] + " in Detailed View");
					}

				}
			}

		}

	}

	// Thsi method is to create MRB Reervation
	public void mrbReservation(WebDriver driver, String CheckInDate, String CheckOutDate, String mrbAdults,
			String mrbChildren, String mrbRateplan, String PromoCode, String IsSplitRes, String mrbRoomClass,
			String account, String mrbSalutation, String mrbGuestFirstName, String mrbGuestLastName,
			String mrbPhoneNumber, String alternativePhone, String mrbEmail, String accountType, String address1,
			String address2, String address3, String city, String country, String state, String postalCode,
			ArrayList<String> getRoomClasses, String PaymentType, String CardNumber, String NameOnCard,
			String CardExpDate, String accountName, String resNumberPayment, String IsTaxExempt, String TaxExemptID,
			String TravelAgent, String marketSegment, String referral, String reservationNumber, int numberOfRooms,
			ArrayList<String> reservationNumbers, ArrayList<String> arrivalDates, String status,
			ArrayList<String> roomCost, ArrayList<String> test_steps) throws Exception {

		CPReservationPage reservationPage = new CPReservationPage();

		reservationPage.select_Dates(driver, test_steps, CheckInDate, CheckOutDate, mrbAdults, mrbChildren, mrbRateplan,
				PromoCode, IsSplitRes);

		if (IsSplitRes.equalsIgnoreCase("Yes")) {

			reservationPage.enter_Adults(driver, test_steps, mrbAdults.split("|")[0]);
			reservationPage.enter_Children(driver, test_steps, mrbChildren.split("|")[0]);
			reservationPage.select_Rateplan(driver, test_steps, mrbRateplan.split("|")[0], PromoCode);

		}

		reservationPage.clickOnFindRooms(driver, test_steps);

		// reservationPage.select_MRBRoomsRatePlan(driver, test_steps, mrbRoomClass,
		// IsAssign, account, mrbAdults);
		roomCost = reservationPage.select_MRBRooms(driver, test_steps, mrbRoomClass, "Yes", account);
		// RoomCharges = reservationPage.select_MRBRooms(driver, test_steps, RoomClass,
		// IsAssign, account);
		reservationPage.deposit(driver, test_steps, "No", "");
		// reservationPage.deposit(driver, test_steps, IsDepositOverride,
		// DepositOverrideAmount);
		reservationPage.clickNext(driver, test_steps);
		try {
			Utility.clickThroughAction(driver, driver.findElement(By.xpath("(//button[text()='No'])[17]")));
		} catch (Exception e) {
			Wait.wait1Second();
		}
		// reservationPage.enter_MRB_MailingAddress(driver, test_steps, salutation,
		// guestFirstName, guestLastName, phoneNumber, alternativePhone, email, account,
		// accountType, address1, address2, address3, city, country, state, postalCode,
		// isGuesProfile, isAddMoreGuestInfo, isSplitRes,getRoomClasses);
		reservationPage.enter_MRB_MailingAddress(driver, test_steps, mrbSalutation, mrbGuestFirstName, mrbGuestLastName,
				mrbPhoneNumber, alternativePhone, mrbEmail, account, accountType, address1, address2, address3, city,
				country, state, postalCode, "No", "No", IsSplitRes, getRoomClasses);

		if ((account.equalsIgnoreCase("") || account.isEmpty())) {
			// reservationPage.enter_PaymentDetails(driver, test_steps, PaymentType,
			// CardNumber, NameOnCard, CardExpDate);

			if (PaymentType.equalsIgnoreCase("Reservation")) {
				reservationPage.selectReservationPaymentType(driver, resNumberPayment, test_steps);
				// reservationPage.selectReservationPaymentType(driver, resNumberPayment,
				// test_steps);
			} else if (PaymentType.equalsIgnoreCase("MC") || PaymentType.equalsIgnoreCase("Visa")
					|| PaymentType.equalsIgnoreCase("Amex") || PaymentType.equalsIgnoreCase("Discover")) {

				reservationPage.enter_PaymentDetails(driver, test_steps, PaymentType, CardNumber, NameOnCard,
						CardExpDate);
			} else if (PaymentType.equalsIgnoreCase("Account (House Account)")) {
				reservationPage.select_HouseAccoutAsPayment(driver, test_steps, accountName);
			} else if (PaymentType.equalsIgnoreCase("Gift Certificate")) {
				reservationPage.select_GiftCertificateAsPayment(driver, test_steps, accountName);
			} else {
				reservationPage.clickonPaymentMetod(driver, test_steps);
				reservationPage.selectPaymentMethod(driver, PaymentType, test_steps);
			}
		}

		if (IsTaxExempt.equalsIgnoreCase("Yes")) {
			reservationPage.clickTaxExcemptCheckbox(driver, test_steps);
			reservationPage.enterTaxExceptId(driver, TaxExemptID, test_steps);
		}

		System.out.println(getRoomClasses);

		reservationPage.enter_MarketSegmentDetails(driver, test_steps, TravelAgent, marketSegment, referral);
		reservationPage.clickBookNow(driver, test_steps);
		reservationNumber = reservationPage.get_ReservationConfirmationNumber(driver, test_steps);

		reservationNumbers.clear();
		arrivalDates.clear();
		for (int i = 1; i <= numberOfRooms; i++) {
			reservationNumbers.add(reservationNumber);
			arrivalDates.add(Utility.parseDate(CheckInDate, "dd/MM/yyyy", "MMM dd, yyyy"));
		}

		status = reservationPage.get_ReservationStatus(driver, test_steps);

		reservationPage.clickCloseReservationSavePopup(driver, test_steps);

		reportLogger.info("MRB Reservation created Successfully");
		test_steps.add("MRB Reservation created Successfully");

		// ArrayList<String> roomAbr = new ArrayList<>();
		// roomAbr.add("GBR");
		// roomAbr.add("GBR");

		// folio.folioTab(driver);
		// reservationPage.getMRBFolioBalance(driver, test_steps, roomAbr, IsAssign,
		// getRoomClasses);

		// reservationPage.close_FirstOpenedReservation(driver, test_steps);
		// reservationSearch.basicSearch_WithReservationNumber(driver,
		// reservationNumber);
		// reservationPage.verify_MR_ToolTip(driver, test_steps, reservationNumber);

	}

	// Thsi method is to create Single Reervation
	public void singleReservation(WebDriver driver, String CheckInDate, String CheckOutDate, String Adults,
			String Children, String Rateplan, String PromoCode, String RoomClass, double depositAmount,
			String salutation, String guestFirstName, String guestLastName, String phoneNumber, String alternativePhone,
			String email, String account, String accountType, String address1, String address2, String address3,
			String city, String country, String state, String postalCode, String IsGuesProfile, String resNumberPayment,
			String PaymentType, String CardNumber, String NameOnCard, String CardExpDate, String accountName,
			String IsTaxExempt, String TaxExemptID, String marketSegment, String referral, String reservationNumber,
			ArrayList<String> reservationNumbers, String status, String resStatus, String roomNumber, ArrayList<String> test_steps)
			throws Exception {

		CPReservationPage reservationPage = new CPReservationPage();

		reservationPage.select_CheckInDate(driver, test_steps, CheckInDate);
		reservationPage.select_CheckoutDate(driver, test_steps, CheckOutDate);
		reservationPage.enter_Adults(driver, test_steps, Adults);
		reservationPage.enter_Children(driver, test_steps, Children);
		reservationPage.select_Rateplan(driver, test_steps, Rateplan, PromoCode);
		reservationPage.clickOnFindRooms(driver, test_steps);
		// report.selectRoom(driver, test_steps, RoomClass, "Yes", account);
		reservationPage.clickSelectRoomButtton(driver, RoomClass);
		depositAmount = deposit(driver, test_steps, "No", "");

		String s = "//p[contains(text(),'update the reservation to the new policies')]/../following-sibling::div[@class='modal-footer']/div/div/button[text()='Yes']";
		// WebElement e = driver.findElement(By.xpath(s));
		boolean value = Utility.isElementDisplayed(driver, By.xpath(s));
		if (value)
			driver.findElement(By.xpath(s)).click();

		reservationPage.clickNext(driver, test_steps);
		try {
			List<WebElement> element = driver.findElements(By.xpath("//button[text()='No']"));
			Utility.clickThroughAction(driver, element.get(element.size() - 1));
			// Utility.clickThroughAction(driver,
			// driver.findElement(By.xpath("(//button[text()='No'])[17]")));
		} catch (Exception e) {
			Wait.wait1Second();
		}
		//reservationPage.enter_GuestName(driver, test_steps, salutation, guestFirstName, guestLastName);
		reservationPage.enter_GuestName(driver, guestFirstName, guestLastName);
		
		reservationPage.uncheck_CreateGuestProfile(driver, test_steps, IsGuesProfile);
//		reservationPage.enter_Phone(driver, test_steps, phoneNumber, alternativePhone);
		reservationPage.enter_Email(driver, test_steps, email);
//		reservationPage.enter_MailingAddress(driver, test_steps, salutation, guestFirstName, guestLastName, phoneNumber,
//				alternativePhone, email, account, accountType, address1, address2, address3, city, country, state,
//				postalCode, IsGuesProfile);
		if ((account.equalsIgnoreCase("") || account.isEmpty())) {

			if (PaymentType.equalsIgnoreCase("Reservation")) {
				reservationPage.selectReservationPaymentType(driver, resNumberPayment, test_steps);
				// reservationPage.selectReservationPaymentType(driver, resNumberPayment,
				// test_steps);
			} else if (PaymentType.equalsIgnoreCase("MC") || PaymentType.equalsIgnoreCase("Visa")
					|| PaymentType.equalsIgnoreCase("Amex") || PaymentType.equalsIgnoreCase("Discover")) {

				reservationPage.enter_PaymentDetails(driver, test_steps, PaymentType, CardNumber, NameOnCard,
						CardExpDate);
			} else if (PaymentType.equalsIgnoreCase("Account (House Account)")) {
				reservationPage.select_HouseAccoutAsPayment(driver, test_steps, accountName);
			} else if (PaymentType.equalsIgnoreCase("Gift Certificate")) {
				reservationPage.select_GiftCertificateAsPayment(driver, test_steps, accountName);
			} else {
				reservationPage.clickonPaymentMetod(driver, test_steps);
				reservationPage.selectPaymentMethod(driver, PaymentType, test_steps);
			}

		}

		if (IsTaxExempt.equalsIgnoreCase("Yes")) {
			reservationPage.clickTaxExcemptCheckbox(driver, test_steps);
			reservationPage.enterTaxExceptId(driver, TaxExemptID, test_steps);
		}
//		reservationPage.enter_MarketSegmentDetails(driver, test_steps, account, marketSegment, referral);

		if (resStatus.equalsIgnoreCase("Quote")) {
			reservationPage.clickSaveAsQuoteButton(driver);
			
		}else {
			reservationPage.clickBookNow(driver, test_steps);
		}
		
		
		
		// reservationPage.pay_DepositAmount(driver, test_steps);
		reservationNumber = reservationPage.get_ReservationConfirmationNumber(driver, test_steps);
		reservationNumbers.clear();
		reservationNumbers.add(reservationNumber);
		reportLogger.info("Reservation Number: " + reservationNumber);
		test_steps.add("<b>Reservation Number: " + reservationNumber);
		status = reservationPage.get_ReservationStatus(driver, test_steps);
		try {
			Wait.wait2Second();
			List<WebElement> elements = driver.findElements(By.xpath("//button[contains(text(),'Cancel')]"));
			reportLogger.info("Before Cancel; Size:" + elements.size());
			Utility.clickThroughAction(driver, elements.get(elements.size() - 1));
			reportLogger.info("After Cancel ");
			// Utility.clickThroughAction(driver,
			// driver.findElement(By.xpath("(//button[contains(text(),'Cancel')])[60]")));
			Wait.wait1Second();
		} catch (Exception e) {

		}
		reservationPage.clickCloseReservationSavePopup(driver, test_steps);
		roomNumber = reservationPage.get_RoomNumber(driver, test_steps, "Yes");

		// reservationPage.get_RoomNumber(driver, test_steps, IsAssign);

		reportLogger.info("Reservation created Successfully");
		test_steps.add("Reservation created Successfully");

	}
	
	// This method is to create Single room Reservation
	public void singleRoomReservation(WebDriver driver, String CheckInDate, String CheckOutDate, String Adults,
			String Children, String Rateplan, String RoomClass,
			String salutation, String guestFirstName, String guestLastName, String phoneNumber, String alternativePhone,
			String email, String accountType, String accountName, String address1,
			String city, String country, String state, String postalCode, String IsGuesProfile, String resNumberPayment,
			String PaymentType, String CardNumber, String NameOnCard, String CardExpDate,
			String IsTaxExempt, String TaxExemptID, String marketSegment, String referral, String resStatus, ArrayList<String> test_steps)
			throws Exception {

		CPReservationPage reservationPage = new CPReservationPage();

		reservationPage.select_CheckInDate(driver, test_steps, CheckInDate);
		reservationPage.select_CheckoutDate(driver, test_steps, CheckOutDate);
		reservationPage.enter_Adults(driver, test_steps, Adults);
		reservationPage.enter_Children(driver, test_steps, Children);
		reservationPage.select_Rateplan(driver, test_steps, Rateplan, "");
		reservationPage.clickOnFindRooms(driver, test_steps);
		// report.selectRoom(driver, test_steps, RoomClass, "Yes", account);
		reservationPage.clickSelectRoomButtton(driver, RoomClass);

		String s = "//p[contains(text(),'update the reservation to the new policies')]/../following-sibling::div[@class='modal-footer']/div/div/button[text()='Yes']";
		// WebElement e = driver.findElement(By.xpath(s));
		boolean value = Utility.isElementDisplayed(driver, By.xpath(s));
		if (value)
			driver.findElement(By.xpath(s)).click();

		reservationPage.clickNext(driver, test_steps);
		try {
			List<WebElement> element = driver.findElements(By.xpath("//button[text()='No']"));
			Utility.clickThroughAction(driver, element.get(element.size() - 1));
			// Utility.clickThroughAction(driver,
			// driver.findElement(By.xpath("(//button[text()='No'])[17]")));
		} catch (Exception e) {
			Wait.wait1Second();
		}
		reservationPage.enter_GuestName(driver, test_steps, salutation, guestFirstName, guestLastName);
//		reservationPage.enter_GuestName(driver, test_steps, guestFirstName, guestLastName);
		
		reservationPage.uncheck_CreateGuestProfile(driver, test_steps, IsGuesProfile);
//		reservationPage.enter_Phone(driver, test_steps, phoneNumber, alternativePhone);
		reservationPage.enter_Email(driver, test_steps, email);
//		reservationPage.enter_MailingAddress(driver, test_steps, salutation, guestFirstName, guestLastName, phoneNumber,
//				alternativePhone, email, account, accountType, address1, address2, address3, city, country, state,
//				postalCode, IsGuesProfile);
		if ((accountName.equalsIgnoreCase("") || accountName.isEmpty())) {

			if (PaymentType.equalsIgnoreCase("Reservation")) {
				reservationPage.selectReservationPaymentType(driver, resNumberPayment, test_steps);
				// reservationPage.selectReservationPaymentType(driver, resNumberPayment,
				// test_steps);
			} else if (PaymentType.equalsIgnoreCase("MC") || PaymentType.equalsIgnoreCase("Visa")
					|| PaymentType.equalsIgnoreCase("Amex") || PaymentType.equalsIgnoreCase("Discover")) {

				reservationPage.enter_PaymentDetails(driver, test_steps, PaymentType, CardNumber, NameOnCard,
						CardExpDate);
			} else if (PaymentType.equalsIgnoreCase("Account (House Account)")) {
				reservationPage.select_HouseAccoutAsPayment(driver, test_steps, accountName);
			} else if (PaymentType.equalsIgnoreCase("Gift Certificate")) {
				reservationPage.select_GiftCertificateAsPayment(driver, test_steps, accountName);
			} else {
				reservationPage.clickonPaymentMetod(driver, test_steps);
				reservationPage.selectPaymentMethod(driver, PaymentType, test_steps);
			}

		}

		if (IsTaxExempt.equalsIgnoreCase("Yes")) {
			reservationPage.clickTaxExcemptCheckbox(driver, test_steps);
			reservationPage.enterTaxExceptId(driver, TaxExemptID, test_steps);
		}
		reservationPage.enter_MarketSegmentDetails(driver, test_steps, accountName, marketSegment, referral);

		if (resStatus.equalsIgnoreCase("Quote")) {
			reservationPage.clickSaveAsQuoteButton(driver);
			
		}else {
			reservationPage.clickBookNow(driver, test_steps);
		}
		String reservationNumber = reservationPage.get_ReservationConfirmationNumber(driver, test_steps);
		reportLogger.info("Reservation Number: " + reservationNumber);
		test_steps.add("<b>Reservation Number: " + reservationNumber);
		String status = reservationPage.get_ReservationStatus(driver, test_steps);
		try {
			Wait.wait2Second();
			List<WebElement> elements = driver.findElements(By.xpath("//button[contains(text(),'Cancel')]"));
			reportLogger.info("Before Cancel; Size:" + elements.size());
			Utility.clickThroughAction(driver, elements.get(elements.size() - 1));
			reportLogger.info("After Cancel ");
			// Utility.clickThroughAction(driver,
			// driver.findElement(By.xpath("(//button[contains(text(),'Cancel')])[60]")));
			Wait.wait1Second();
		} catch (Exception e) {

		}
		reservationPage.clickCloseReservationSavePopup(driver, test_steps);
		String roomNumber = reservationPage.get_RoomNumber(driver, test_steps, "Yes");

		reportLogger.info("Reservation created Successfully");
		test_steps.add("Reservation created Successfully");

	}
	
	public void enterDataForTapeChartReservation(WebDriver driver, 
			String salutation, String guestFirstName, String guestLastName, String phoneNumber, String alternativePhone,
			String email, String account, String accountType, String address1, String address2, String address3,
			String city, String country, String state, String postalCode, String IsGuesProfile, String resNumberPayment,
			String PaymentType, String CardNumber, String NameOnCard, String CardExpDate, String accountName,
			String IsTaxExempt, String TaxExemptID, String marketSegment, String referral, String reservationNumber,
			ArrayList<String> reservationNumbers, String status, String resStatus, String roomNumber, ArrayList<String> test_steps)
			throws Exception {

		CPReservationPage reservationPage = new CPReservationPage();

		reservationPage.enter_MailingAddress(driver, test_steps, salutation, guestFirstName, guestLastName, phoneNumber,
				alternativePhone, email, account, accountType, address1, address2, address3, city, country, state,
				postalCode, IsGuesProfile);
		if ((account.equalsIgnoreCase("") || account.isEmpty())) {

			if (PaymentType.equalsIgnoreCase("Reservation")) {
				reservationPage.selectReservationPaymentType(driver, resNumberPayment, test_steps);
				// reservationPage.selectReservationPaymentType(driver, resNumberPayment,
				// test_steps);
			} else if (PaymentType.equalsIgnoreCase("MC") || PaymentType.equalsIgnoreCase("Visa")
					|| PaymentType.equalsIgnoreCase("Amex") || PaymentType.equalsIgnoreCase("Discover")) {

				reservationPage.enter_PaymentDetails(driver, test_steps, PaymentType, CardNumber, NameOnCard,
						CardExpDate);
			} else if (PaymentType.equalsIgnoreCase("Account (House Account)")) {
				reservationPage.select_HouseAccoutAsPayment(driver, test_steps, accountName);
			} else if (PaymentType.equalsIgnoreCase("Gift Certificate")) {
				reservationPage.select_GiftCertificateAsPayment(driver, test_steps, accountName);
			} else {
				reservationPage.clickonPaymentMetod(driver, test_steps);
				reservationPage.selectPaymentMethod(driver, PaymentType, test_steps);
			}

		}

		if (IsTaxExempt.equalsIgnoreCase("Yes")) {
			reservationPage.clickTaxExcemptCheckbox(driver, test_steps);
			reservationPage.enterTaxExceptId(driver, TaxExemptID, test_steps);
		}
		reservationPage.enter_MarketSegmentDetails(driver, test_steps, account, marketSegment, referral);

		if (resStatus.equalsIgnoreCase("Quote")) {
			reservationPage.clickSaveAsQuoteButton(driver);
			
		}else {
			reservationPage.clickBookNow(driver, test_steps);
		}
		
		
		
		// reservationPage.pay_DepositAmount(driver, test_steps);
		reservationNumber = reservationPage.get_ReservationConfirmationNumber(driver, test_steps);
		reservationNumbers.clear();
		reservationNumbers.add(reservationNumber);
		reportLogger.info("Reservation Number: " + reservationNumber);
		test_steps.add("<b>Reservation Number: " + reservationNumber);
		status = reservationPage.get_ReservationStatus(driver, test_steps);
		try {
			Wait.wait2Second();
			List<WebElement> elements = driver.findElements(By.xpath("//button[contains(text(),'Cancel')]"));
			reportLogger.info("Before Cancel; Size:" + elements.size());
			Utility.clickThroughAction(driver, elements.get(elements.size() - 1));
			reportLogger.info("After Cancel ");
			// Utility.clickThroughAction(driver,
			// driver.findElement(By.xpath("(//button[contains(text(),'Cancel')])[60]")));
			Wait.wait1Second();
		} catch (Exception e) {

		}
		reservationPage.clickCloseReservationSavePopup(driver, test_steps);
		roomNumber = reservationPage.get_RoomNumber(driver, test_steps, "Yes");

		// reservationPage.get_RoomNumber(driver, test_steps, IsAssign);

		reportLogger.info("Reservation created Successfully");
		test_steps.add("Reservation created Successfully");


	}
	

	// *************
	// *************
	// *************
	// Daily Flash
	
	public String getDailyFlashDate(WebDriver driver) {
		Elements_Reports report = new Elements_Reports(driver);
		String date = report.dateDailyFlash.getAttribute("value");
		return date;
	}
	
	public String getDailyFlashDay(WebDriver driver) {
		Elements_Reports report = new Elements_Reports(driver);
		String day = report.dayCurrentSelected.getText();
		return day;
	}

	// This method is to validate Daily Flash default date selection (Today)
	public void validateDailyFlashDefaultDateSelection(WebDriver driver, String timeZone, String dateFormat, ArrayList<String> test_steps) {

		Elements_Reports report = new Elements_Reports(driver);
		//String dateFormat = "dd MMM, YYYY EEEE";
		String actual = report.dayCurrentSelected.getText();

		if (actual.equalsIgnoreCase("Today")) {
			reportLogger.info("Today is selected by default in date Dropdown");
			test_steps.add("Today is selected by default in date Dropdown");

		} else {
			reportLogger.info(
					"Failed, Today is not selected by default in date Dropdown. Expected: Today, but Found: " + actual);
			test_steps.add(
					"AssertionError - Failed, Today is not selected by default in date Dropdown. Expected: Today, but Found: "
							+ actual);
		}

		String actualDate = report.dateDailyFlash.getAttribute("value");
		// String expectedDate = new SimpleDateFormat("MMM dd, YYYY, EEEE").format(new
		// Date(Utility.getCurrentDate("MM/dd/YYYY")));
		String expectedDate = Utility.getCurrentDate(dateFormat, timeZone);
		reportLogger.info("Today date: "+expectedDate);

		if (actualDate.equalsIgnoreCase(expectedDate)) {
			reportLogger.info("Current date " + expectedDate + " selected by default in date Selection");
			test_steps.add("Current date " + expectedDate + " selected by default in date Selection");

		} else {
			reportLogger.info("Failed, Current date not selected by default in date Selection. Expected: "
					+ expectedDate + " , but Found: " + actualDate);
			test_steps.add("AssertionError - Failed, Current date not selected by default in date Selection. Expected: "
					+ expectedDate + " , but Found: " + actualDate);
		}

	}

	// This method is to validate Daily Flash Report Tomorrow date selection
	// (Tomorrow)
	public void validateDailyFlashTomorrowDateSelection(WebDriver driver, String timeZone, String dateFormat, ArrayList<String> test_steps) throws ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		//String dateFormat = "dd MMM, YYYY EEEE";
		
		try {
			selectDateRange(driver, "Tomorrow", test_steps);
			
			String actual = report.dayCurrentSelected.getText();

			if (actual.equalsIgnoreCase("Tomorrow")) {
				reportLogger.info("Tomorrow is selected in date Dropdown after clicking on Tomorrow");
				test_steps.add("Tomorrow is selected in date Dropdown after clicking on Tomorrow");

			} else {
				reportLogger.info(
						"Failed, Tomorrow is not selected in date Dropdown after clicking on Tomorrow. Expected: Tomorrow, but Found: "
								+ actual);
				test_steps.add(
						"AssertionError - Failed, Tomorrow is not selected in date Dropdown after clicking on Tomorrow. Expected: Tomorrow, but Found: "
								+ actual);
			}
		} catch (Exception e) {

		} catch (Error e) {

		}

		try {
			String actualDate = report.dateDailyFlash.getAttribute("value");
			reportLogger.info("Actual Tomarrow date: "+actualDate);
			// String expectedDate = new SimpleDateFormat("MMM dd, YYYY, EEEE").format(new
			// Date(Utility.getCurrentDate("MM/dd/YYYY")));
			String expectedDate = Utility.parseDate(Utility.getDatePast_FutureDate(1, timeZone), "MM/dd/yyyy", dateFormat);
			reportLogger.info("Expected Tomarrow date: "+expectedDate);
			

			if (actualDate.equalsIgnoreCase(expectedDate)) {
				reportLogger.info(
						"Tomorrow date " + expectedDate + " selected in date Selection after clicking on Tomorrow");
				test_steps.add(
						"Tomorrow date " + expectedDate + " selected in date Selection after clicking on Tomorrow");

			} else {
				reportLogger.info("Failed, Tomorrow date " + expectedDate
						+ " not selected in date Selection after clicking on Tomorrow. Expected: " + expectedDate
						+ " , but Found: " + actualDate);
				test_steps.add("AssertionError - Failed, Tomorrow date " + expectedDate
						+ " not selected in date Selection after clicking on Tomorrow. Expected: " + expectedDate
						+ " , but Found: " + actualDate);
			}
		} catch (Exception e) {

		} catch (Error e) {

		}

	}

	// This method is to validate Daily Flash Report Yesterday date selection
	// (Yesterday)
	public void validateDailyFlashYesterdayDateSelection(WebDriver driver, String timeZone, String dateFormat, ArrayList<String> test_steps) throws ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		//String dateFormat = "dd MMM, YYYY EEEE";
		
		try {
			selectDateRange(driver, "Yesterday", test_steps);

			String actual = report.dayCurrentSelected.getText();

			if (actual.equalsIgnoreCase("Yesterday")) {
				reportLogger.info("Yesterday is selected in date Dropdown after clicking on Yesterday");
				test_steps.add("Yesterday is selected in date Dropdown after clicking on Yesterday");

			} else {
				reportLogger.info(
						"Failed, Yesterday is not selected in date Dropdown after clicking on Yesterday. Expected: Yesterday, but Found: "
								+ actual);
				test_steps.add(
						"AssertionError - Failed, Yesterday is not selected in date Dropdown after clicking on Yesterday. Expected: Yesterday, but Found: "
								+ actual);
			}
		} catch (Exception e) {

		} catch (Error e) {

		}

		try {
			String actualDate = report.dateDailyFlash.getAttribute("value");
			reportLogger.info("Actual Ysterday date: "+actualDate);
			// String expectedDate = new SimpleDateFormat("MMM dd, YYYY, EEEE").format(new
			// Date(Utility.getCurrentDate("MM/dd/YYYY")));
			String expectedDate = Utility.parseDate(Utility.getDatePast_FutureDate(-1, timeZone), "MM/dd/yyyy", dateFormat);
			reportLogger.info("Expected Yesterday date: "+expectedDate);
			
			reportLogger.info("Expected date: " + expectedDate);
			reportLogger.info("Actual date: " + actualDate);

			if (actualDate.equalsIgnoreCase(expectedDate)) {
				reportLogger.info(
						"Yesterday date " + expectedDate + " selected in date Selection after clicking on Yesterday");
				test_steps.add(
						"Yesterday date " + expectedDate + " selected in date Selection after clicking on Yesterday");

			} else {
				reportLogger.info("Failed, Yesterday date " + expectedDate
						+ " not selected in date Selection after clicking on Yesterday. Expected: " + expectedDate
						+ " , but Found: " + actualDate);
				test_steps.add("AssertionError - Failed, Yesterday date " + expectedDate
						+ " not selected in date Selection after clicking on Yesterday. Expected: " + expectedDate
						+ " , but Found: " + actualDate);
			}
		} catch (Exception e) {

		} catch (Error e) {

		}

	}

	public void selectDateDailyFlash(WebDriver driver, String dateStart, ArrayList<String> test_steps)
			throws InterruptedException {
		String year = Utility.get_Year(dateStart);
		String month = Utility.get_Month(dateStart);
		String day = Utility.getDay(dateStart);

		reportLogger.info("Year: " + year);
		reportLogger.info("Month: " + month);
		reportLogger.info("Day: " + day);

		String years = "//div[@class='ant-picker-cell-inner']";
		String months = "//div[@class='ant-picker-cell-inner']";
		String date = "//td[contains(@title,'" + day + "')]";

		Elements_Reports report = new Elements_Reports(driver);

		report.dateSelectDailyFlash.click();
		Wait.wait2Second();
		// Wait.WaitForElement(driver, OR_Reports.dateTab);
		Utility.clickThroughJavaScript(driver, report.buttonYear);
		List<WebElement> yearsAll = driver.findElements(By.xpath(years));

		for (int i = 0; i < yearsAll.size(); i++) {
			if (yearsAll.get(i).getText().equalsIgnoreCase(year)) {
				Utility.clickThroughJavaScript(driver, yearsAll.get(i));
				//yearsAll.get(i).click();
				break;
			}
		}
		Wait.wait5Second();
		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.buttonYear), driver);
		Utility.clickThroughJavaScript(driver, report.buttonMonth);
		List<WebElement> monthsAll = driver.findElements(By.xpath(months));

		for (int i = 0; i < monthsAll.size(); i++) {
			if (monthsAll.get(i).getText().equalsIgnoreCase(month)) {
				// monthsAll.get(i).click();
				reportLogger.info("Month Selecting: " + monthsAll.get(i).getText());
				Wait.wait2Second();
				Utility.clickThroughJavaScript(driver, monthsAll.get(i + 1));
				break;
			}
		}
		Wait.wait5Second();
		List<WebElement> dates = driver.findElements(By.xpath(date));

		for (int i = 0; i < dates.size(); i++) {
			if (!dates.get(i).getAttribute("class").contains("disabled")) {
				dates.get(i).click();
				break;
			}
		}
		// driver.findElement(By.xpath(date)).click();
		reportLogger.info("Daily Flash date selected " + dateStart);
	}

	public void validateDailyFlashCustomDateSelection(WebDriver driver, String dateStart, String dateFormat, ArrayList<String> test_steps)
			throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);
		selectDateDailyFlash(driver, dateStart, test_steps);

		String actualDate = report.dateSelectDailyFlash.getAttribute("value");
		reportLogger.info("Actual date: " + actualDate);
		String expecteddate = Utility.parseDate(dateStart, "dd/MM/yyyy", dateFormat);
		reportLogger.info("Expected date: " + expecteddate);

		if (expecteddate.equalsIgnoreCase(actualDate)) {
			reportLogger.info("Daily Flash Custom date selection Validated Successfully");
			test_steps.add("Daily Flash Custom date selection Validated Successfully");
		} else {
			reportLogger.info("Failed - Daily Flash Custom date selection Validation failed. Expected: " + expecteddate
					+ " But found: " + actualDate);
			test_steps.add("AssertionError Failed - Daily Flash Custom date selection Validation failed. Expected: "
					+ expecteddate + " But found: " + actualDate);
		}
	}

	// This method is to validate Daily Flash Effective date availability
	public void validateDailyFlashEffectiveDateAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.txtDailyFlashDate);
			reportLogger.info("Success - Effective date is available in Daily Flash Report page");
			test_steps.add("Success - Effective date is available in Daily Flash Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Effective date is not available in Daily Flash Report page");
			test_steps.add("AssertionError Failed - Effective date is not available in Daily Flash Report page");
		}

	}

	// This method is to validate Daily Flash Advanced Inputs availability
	public void validateDailyFlashAdvancedInputsAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.txtDailyAdvancedInputs);
			reportLogger.info("Success - Advanced Inputs is available in Daily Flash Report page");
			test_steps.add("Success - Advanced Inputs is available in Daily Flash Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Advanced Inputs is not available in Daily Flash Report page");
			test_steps.add("AssertionError Failed - Advanced Inputs is not available in Daily Flash Report page");
		}

	}

	// This method is to validate Effective Date Tooltip
	public void validateDailyFlashEffectiveDateToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.txtDailyFlashDate);
		WebElement e = driver
				.findElement(By.xpath("//*[text()='Effective date']/../span/span"));
		Utility.hoverOnElement(driver, e);
		Wait.waitForElementToBeVisibile(
				By.xpath("//*[contains(text(),'Effective date')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//*[contains(text(),'Effective date')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'Select a pre-defined date or enter a custom date.')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String exp1 = "Effective date";
		String exp2 = "Select a pre-defined date or enter a custom date.";
		

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Effective date tooltip validation");
			test_steps.add("Sucess - Effective date tooltip validation");
		} else {
			reportLogger.info("Failed - Effective date tooltip validation");
			test_steps.add("AssertionError Failed - Effective date tooltip validation");
		}

	}

	// This method is to validate Advanced Inputs Tooltip
	public void validateDailyFlashAdvancedInputsToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.txtDailyAdvancedInputs);
		WebElement e = driver
				.findElement(By.xpath("//*[text()='Advanced Inputs']/../span/span"));
		Utility.hoverOnElement(driver, e);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Advanced Inputs')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Advanced Inputs')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'Expand this section to view the')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String exp1 = "Advanced Inputs";
		String exp2 = "Expand this section to view the list of advanced inputs you can choose from, to narrow down your search and filter the report data further.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Advanced Inputs tooltip validation");
			test_steps.add("Sucess - Advanced Inputs tooltip validation");
		} else {
			reportLogger.info("Failed - Advanced Inputs tooltip validation. Expected: "+exp2+" But found: "+act2);
			test_steps.add("AssertionError Failed - Advanced Inputs tooltip validation. Expected: "+exp2+" But found: "+act2);
		}
	}

	// This method is to validate Advanced Inputs - Break Out Tax-Exempt Revenue
	// Tooltip
	public void validateDailyFlashBreakOutTaxExemptRevenueToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.txtBreakOutTaxExemptRevenue);
		WebElement e = driver
				.findElement(By.xpath("//*[text()='Break Out Tax-Exempt Revenue']//following-sibling::span"));
		Utility.hoverOnElement(driver, e);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Break Out Tax-Exempt Revenue')]"),
				driver);
		String act1 = driver
				.findElement(By
						.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Break Out Tax-Exempt Revenue')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'Choose this option to display the')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String exp1 = "Break Out Tax-Exempt Revenue";
		String exp2 = "Choose this option to display the taxable and non-taxable room revenue for the selected date, Month To Date and Year To Date.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Break Out Tax-Exempt Revenue tooltip validation");
			test_steps.add("Sucess - Break Out Tax-Exempt Revenue tooltip validation");
		} else {
			reportLogger.info("Failed - Break Out Tax-Exempt Revenue tooltip validation");
			test_steps.add("AssertionError Failed - Break Out Tax-Exempt Revenue tooltip validation");
		}
	}

	// This method is to validate Expand All Advanced Inputs - Daily Flash
	public void validateDailyFlashExpandAllAdvancedOptions(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);

		try {
			Wait.explicit_wait_elementToBeClickable(res.ExpandAll, driver);
			Utility.clickThroughAction(driver, res.ExpandAll);
			Wait.WaitForElement(driver, "//span[contains(text(),'Yes')]");
			boolean condition1 = Utility.isElementDisplayed(driver, By.xpath("//span[contains(text(),'Yes')]"));
			boolean condition2 = Utility.isElementDisplayed(driver, By.xpath("//span[contains(text(),'No')]"));

			if (condition1 && condition2) {
				reportLogger.info("Success - Validaion of Expand All Advanced Inputs functionlity");
				test_steps.add("Sucess - Validaion of Expand All Advanced Inputs functionlity");
			} else {
				reportLogger.info("Failed - Validaion of Expand All Advanced Inputs functionlity");
				test_steps.add("AssertionError Failed - Validaion of Expand All Advanced Inputs functionlity");
			}
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}
	}

	// This method is to validate Daily Flash Break Out Tax-Exempt Revenue
	// availability
	public void validateDailyFlashBreakOutTaxExemptRevenueAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.txtBreakOutTaxExemptRevenue);
			reportLogger.info(
					"Success - Advanced Inputs - Break Out Tax-Exempt Revenue is available in Daily Flash Report page");
			test_steps.add(
					"Success - Advanced Inputs - Break Out Tax-Exempt Revenue is available in Daily Flash Report page");
		} catch (Exception e) {
			reportLogger.info(
					"Failed - Advanced Inputs - Break Out Tax-Exempt Revenue is not available in Daily Flash Report page");
			test_steps.add(
					"AssertionError Failed - Advanced Inputs - Break Out Tax-Exempt Revenue is not available in Daily Flash Report page");
		}

	}
	

	public void clickBreakOutTaxExemptRevenueDailyFlash(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);
		try {
			Wait.WaitForElement(driver, OR_Reports.txtBreakOutTaxExemptRevenue);
			report.txtBreakOutTaxExemptRevenue.click();
		} catch (Exception e) {
			reportLogger.info(e.toString());
		}

	}

	// This method is to Click Yes Daily Flash Break Out Tax-Exempt Revenue
	public void clickYesBreakOutTaxExemptRevenue(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		if (!report.rdoYesBreakOutTaxExemptRevenue.isSelected()) {
			try {
				Utility.clickThroughAction(driver, report.rdoYesBreakOutTaxExemptRevenue);
				reportLogger.info("Clicked on Yes - Break Out Tax-Exempt Revenue");
			} catch (Exception e) {
				report.rdoYesBreakOutTaxExemptRevenue.click();
				reportLogger.info("Clicked on Yes - Break Out Tax-Exempt Revenue");
			}
		} else {
			reportLogger.info("Already Clicked on Yes - Break Out Tax-Exempt Revenue");
		}
	}

	// This method is to Click No Daily Flash Break Out Tax-Exempt Revenue
	public void clickNoBreakOutTaxExemptRevenue(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		if (!report.rdoNoBreakOutTaxExemptRevenue.isSelected()) {
			try {
				Utility.clickThroughAction(driver, report.rdoNoBreakOutTaxExemptRevenue);
				reportLogger.info("Clicked on No - Break Out Tax-Exempt Revenue");
			} catch (Exception e) {
				report.rdoNoBreakOutTaxExemptRevenue.click();
				reportLogger.info("Clicked on No - Break Out Tax-Exempt Revenue");
			}
		} else {
			reportLogger.info("Already Clicked on No - Break Out Tax-Exempt Revenue");
		}
	}

	// This method is to validate Daily Flash Report Header avilability
	public void validateDailyFlashReportInMainHeader(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		String strName = "//div[contains(text(),'Daily Flash Report')]";

		try {
			Wait.waitForElementToBeVisibile(By.xpath(strName), driver);
			reportLogger.info("Success - Daily Flash Report is available in Main header");
			test_steps.add("Success - Daily Flash Report is available in Main header");
		} catch (Exception e) {
			reportLogger.info("Failed - Daily Flash Report is available in Main header");
			test_steps.add("AssertionError Failed - Daily Flash Report is available in Main header");
		}

	}

	// This method is to validate Daily Flash Report default values
	public void validateDefaultValuesDailyFlashReport(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		if (report.dayCurrentSelected.getText().equalsIgnoreCase("Today")) {
			reportLogger.info("Success - Today is selected by default in date selection");
			test_steps.add("Success - Today is selected by default in date selection");
		} else {
			reportLogger.info("Failed - Today is not selected by default in date selection");
			test_steps.add("AssertionError Failed - Today is not selected by default in date selection");
		}

		//String strText = "//div[contains(@class,'textOverflow')]";
		String actual = report.textOverflowBreakOutTaxExemptRevenue.getText();

		if (actual.equalsIgnoreCase("No")) {
			reportLogger.info("Success - No is selected by default in Breakout Tax Exempt Revenue");
			test_steps.add("Success - No is selected by default in Breakout Tax Exempt Revenue");
		} else {
			reportLogger.info("Failed - No is not selected by default in Breakout Tax Exempt Revenue");
			test_steps.add("AssertionError Failed - No is not selected by default in Breakout Tax Exempt Revenue");
		}

	}

	// This method is to validate Return to Default availability in Daily Flash
	// Report
	public void validateReturnToDefaultAvailabilityDailyFlash(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);

		try {
			Wait.WaitForElement(driver, OR_Reports.buttonReturnToDefault);
			reportLogger.info("Return to Default option is available in Daily Flash Report page");
			test_steps.add("Return to Default option is available in Daily Flash Report page");
		} catch (Exception e) {
			test_steps.add(
					"AssertionError Failed - Return to Default option is not available in Daily Flash Report page");
			reportLogger.info("Failed - Return to Default option is not available in Daily Flash Report page");
		}

		try {
			Wait.WaitForElement(driver, OR_Reports.symbolReturnToDefault);
			reportLogger.info("Return to Default symbol is available in Daily Flash Report page");
			test_steps.add("Return to Default symbol is available in Daily Flash Report page");
		} catch (Exception e) {
			test_steps.add(
					"AssertionError Failed - Return to Default symbol is not available in Daily Flash Report page");
			reportLogger.info("Failed - Return to Default symbol is not available in Daily Flash Report page");
		}
	}

	// This method is to validate Return to Default - Daily Flash Report
	public void validateReturnToDefaultDailyFlash(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);

		try {
			selectDateRange(driver, "Yesterday", test_steps);
			test_steps.add("Yesterday date selected");
			reportLogger.info("Yesterday date selected");

			clickReturnToDefault(driver, test_steps);
			test_steps.add("Clicked on Return to Default");
			reportLogger.info("Clicked on Return to Default");
			Wait.wait5Second();

			if (report.dayCurrentSelected.getText().equalsIgnoreCase("Today")) {
				reportLogger
						.info("Success - Return to Default - Today is selected after clicking on Return to Default");
				test_steps.add("Success - Return to Default - Today is selected after clicking on Return to Default");
			} else {
				reportLogger
						.info("Failed - Return to Default - Today is not selected after clicking on Return to Default");
				test_steps.add(
						"AssertionError Failed - Return to Default - Today is not selected after clicking on Return to Default");
			}
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

		try {
			//expandGivenAdvancedOptions(driver, "Break Out Tax-Exempt Revenue", test_steps);
			clickYesBreakOutTaxExemptRevenue(driver, test_steps);

			test_steps.add("Clicked on Yes on Break Out Tax-Exempt Revenue");
			reportLogger.info("Clicked on Yes on Break Out Tax-Exempt Revenue");

			clickReturnToDefault(driver, test_steps);
			test_steps.add("Clicked on Return to Default");
			reportLogger.info("Clicked on Return to Default");
			Wait.wait5Second();

			if (report.rdoNoBreakOutTaxExemptRevenue.isSelected()) {
				reportLogger.info("Success - Return to Default - No is selected after clicking on Return to Default");
				test_steps.add("Success - Return to Default - No is selected after clicking on Return to Default");
			} else {
				reportLogger
						.info("Failed - Return to Default - No is not selected after clicking on Return to Default");
				test_steps.add(
						"AssertionError Failed - Return to Default - No is not selected after clicking on Return to Default");
			}

		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

		try {
			selectDateRange(driver, "Yesterday", test_steps);
			test_steps.add("Yesterday date selected");
			reportLogger.info("Yesterday date selected");

			expandGivenAdvancedOptions(driver, "Break Out Tax-Exempt Revenue", test_steps);
			clickYesBreakOutTaxExemptRevenue(driver, test_steps);

			test_steps.add("Clicked on Yes on Break Out Tax-Exempt Revenue");
			reportLogger.info("Clicked on Yes on Break Out Tax-Exempt Revenue");

			clickReturnToDefault(driver, test_steps);
			test_steps.add("Clicked on Return to Default");
			reportLogger.info("Clicked on Return to Default");
			Wait.wait5Second();

			if (report.dayCurrentSelected.getText().equalsIgnoreCase("Today")) {
				reportLogger
						.info("Success - Return to Default - Today is selected after clicking on Return to Default");
				test_steps.add("Success - Return to Default - Today is selected after clicking on Return to Default");
			} else {
				reportLogger
						.info("Failed - Return to Default - Today is not selected after clicking on Return to Default");
				test_steps.add(
						"AssertionError Failed - Return to Default - Today is not selected after clicking on Return to Default");
			}

			if (report.rdoNoBreakOutTaxExemptRevenue.isSelected()) {
				reportLogger.info("Success - Return to Default - No is selected after clicking on Return to Default");
				test_steps.add("Success - Return to Default - No is selected after clicking on Return to Default");
			} else {
				reportLogger
						.info("Failed - Return to Default - No is not selected after clicking on Return to Default");
				test_steps.add(
						"AssertionError Failed - Return to Default - No is not selected after clicking on Return to Default");
			}

		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

	}
	
	// This method is to validate toast message Return to Default - Daily Flash
	public void validateToastMessageReturnToDefaultDailyFlash(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		String message = null;
		
		clickReturnToDefault(driver, test_steps);

		if (driver.findElements(By.xpath(OR_Reports.ReturnToDefaultSeccess)).size() > 0) {
			message = report.ReturnToDefaultSeccess.getText();
			reportLogger.info("Return to Defaults Success - " + message);
			test_steps.add("Return to Defaults Success - " + message);
		} else if (driver.findElements(By.xpath(OR_Reports.ReturnToDefaultFailure)).size() > 0) {
			message = report.ReturnToDefaultFailure.getText();
			reportLogger.info("Return to Defaults Failure - " + message);
			test_steps.add("Return to Defaults Failure - " + message);
		}

	}

	// This method is to validate Loading state - Daily Flash Report
	public void validateLoadingStateDailyFlash(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);

		try {
			res.RunReport.click();
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.LoadingReportMessage), driver, 10);
			reportLogger.info("Success - Loading state Daily Flash Report");
			test_steps.add("Success - Loading state Daily Flash Report");
		} catch (Exception e) {
			reportLogger.info("Failed - Loading state Daily Flash Report validation");
			test_steps.add(
					"AssertionError - Failed - Loading state Daily Flash Report validation" + "<br>" + e.toString());
		}
	}
	
	// This method is to validate Grey bar after clicking Run Report - Daily Flash
	public void validateGreyBarAfterClickingRunReportDailyFlash(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		
		String daySelected = report.dayCurrentSelected.getText();
		String dateSelected = report.dateDailyFlash.getAttribute("value");
		//expandGivenAdvancedOptions(driver, "Break Out Tax-Exempt Revenue", test_steps);
		String textBreakOutTaxExemptRevenue = report.textOverflowBreakOutTaxExemptRevenue.getText();
		
		clickOnRunReport(driver);
		
		try {
			String effectiveDate = "//*[contains(text(),'Effective Date')]";
			Wait.waitForElementToBeVisibile(By.xpath(effectiveDate), driver, 15);
			reportLogger.info("Effective Date is available in Grey bar after clicking on Run Report");
			test_steps.add("Effective Date is available in Grey bar after clicking on Run Report");
		}catch(Exception e) {
			reportLogger.info("Failed - Effective Date is not available in Grey bar after clicking on Run Report");
			test_steps.add("AssertionError Failed - Effective Date is not available in Grey bar after clicking on Run Report");
		}
		
		try {
			String BreakOutTaxExemptRevenue = "(//*[contains(text(),'Break Out Tax-Exempt Revenue')])[1]";
			Wait.waitForElementToBeVisibile(By.xpath(BreakOutTaxExemptRevenue), driver, 15);
			reportLogger.info("Break Out Tax-Exempt Revenue is available in Grey bar after clicking on Run Report");
			test_steps.add("Break Out Tax-Exempt Revenue is available in Grey bar after clicking on Run Report");
		}catch(Exception e) {
			reportLogger.info("Failed - Break Out Tax-Exempt Revenue is not available in Grey bar after clicking on Run Report");
			test_steps.add("AssertionError Failed - Break Out Tax-Exempt Revenue is not available in Grey bar after clicking on Run Report");
		}
		String effectiveDate = daySelected+" | "+dateSelected;
		String textEffectiveDate = "//*[contains(text(),'"+effectiveDate+"')]";
		try {
			Wait.waitForElementToBeVisibile(By.xpath(textEffectiveDate), driver, 15);
			reportLogger.info("Effective Date text "+effectiveDate+" is available in Grey bar after clicking on Run Report");
			test_steps.add("Effective Date text "+effectiveDate+" is available in Grey bar after clicking on Run Report");
		}catch(Exception e) {
			reportLogger.info("Failed - Effective Date text "+effectiveDate+" is not available in Grey bar after clicking on Run Report");
			test_steps.add("AssertionError Failed - Effective Date text "+effectiveDate+" is not available in Grey bar after clicking on Run Report");
		}
		
		try {
			String buttonEdit = "//span[contains(text(),'Edit')]";
			Wait.waitForElementToBeVisibile(By.xpath(buttonEdit), driver, 15);
			reportLogger.info("Edit button is available in Grey bar after clicking on Run Report");
			test_steps.add("Edit button is available in Grey bar after clicking on Run Report");
		}catch(Exception e) {
			reportLogger.info("Failed - Edit button is not available in Grey bar after clicking on Run Report");
			test_steps.add("AssertionError Failed - Edit button is not available in Grey bar after clicking on Run Report");
		}
		
	}
	
	// This method is to validate Export Loading message - Daily Flash
	public void validateExportLoadingMessageDailyFlash(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		String downloadMessage = "//*[contains(text(),'Report Download In Progress')]";
		
		String strButtonExcel = "//span[text()='Excel']/..";
		String strButtonPdf = "//span[text()='PDF']/..";
		clickOnRunReport(driver);
		Wait.WaitForElement(driver, strButtonExcel);
		WebElement buttonExcel = driver.findElement(By.xpath(strButtonExcel));
		WebElement buttonPDF = driver.findElement(By.xpath(strButtonPdf));
		if (driver.findElement(By.xpath(strButtonExcel)).isEnabled()) {
			driver.findElement(By.xpath(strButtonExcel)).click();
			try {
				Wait.waitForElementToBeVisibile(By.xpath(downloadMessage), driver, 10);			
				reportLogger.info("Success - Excel Export Loading message validated successfully");
				test_steps.add("Success - Excel Export Loading message validated successfully");
			}catch(Exception e) {
				reportLogger.info("Failed Excel Export Loading message validation");
				test_steps.add("AssertionError Failed Excel Export Loading message validation");
			}
			
		}else {
			reportLogger.info("Excel button is not enabled after clicking on Run Report");
			test_steps.add("AssertionError Excel button is not enabled after clicking on Run Report");
		}
		Wait.wait2Second();
		try {
			driver.findElement(By.xpath("//*[contains(text(),'Error')]")).click();
		}catch(Exception e) {
			
		}
		try {
			driver.findElement(By.xpath("//*[@data-icon='close']")).click();
		}catch(Exception e) {
			
		}
		if (driver.findElement(By.xpath(strButtonPdf)).isEnabled()) {
			driver.findElement(By.xpath(strButtonPdf)).click();
			try {
				Wait.waitForElementToBeVisibile(By.xpath(downloadMessage), driver, 10);			
				reportLogger.info("Success - PDF Export Loading message validated successfully");
				test_steps.add("Success - PDF Export Loading message validated successfully");
			}catch(Exception e) {
				reportLogger.info("Failed PDF Export Loading message validation");
				test_steps.add("AssertionError Failed PDF Export Loading message validation");
			}
		}else {
			reportLogger.info("PDF button is not enabled after clicking on Run Report");
			test_steps.add("AssertionError PDF button is not enabled after clicking on Run Report");
		}
		try {
			driver.findElement(By.xpath("//*[contains(text(),'Error')]")).click();
		}catch(Exception e) {
			
		}
		
		try {
			driver.findElement(By.xpath("//*[@data-icon='close']")).click();
		}catch(Exception e) {
			
		}
	}
	
	// This method is to validate Export Success/Failure Toast Messages - Daily Flash
	public void validateExportSuccessFailureMessageDailyFlash(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		String downloadSuccessMessage = "//div[contains(text(),'Success')]";
		String downloadFailureMessage = "//div[contains(text(),'Failure')]";
		
		String strButtonExcel = "//span[text()='Excel']/..";
		String strButtonPdf = "//span[text()='PDF']/..";
		clickOnRunReport(driver);
		Wait.WaitForElement(driver, strButtonExcel);
		WebElement buttonExcel = driver.findElement(By.xpath(strButtonExcel));
		WebElement buttonPDF = driver.findElement(By.xpath(strButtonPdf));
		Wait.wait2Second();
		if (driver.findElement(By.xpath(strButtonExcel)).isEnabled()) {
			driver.findElement(By.xpath(strButtonExcel)).click();
			try {
				Wait.waitForElementToBeVisibile(By.xpath(downloadSuccessMessage), driver, 10);		
				reportLogger.info("Success - Excel Export Success Toast Message validated successfully");
				test_steps.add("Success - Excel Export Success Toast Message validated successfully");
			}catch(Exception e) {
				try {
					Wait.waitForElementToBeVisibile(By.xpath(downloadFailureMessage), driver, 10);		
					reportLogger.info("Success - Excel Export Failure Toast Message validated successfully");
					test_steps.add("Success - Excel Export Failure Toast Message validated successfully");
				}catch(Exception e1) {
					reportLogger.info("Failed - Excel Export Success/Failure Toast Messages validation");
					test_steps.add("AssertionError Failed - Excel Export Success/Failure Toast Messages validation");
				}
			}
			
		}else {
			reportLogger.info("Excel button is not enabled");
			test_steps.add("AssertionError Excel button is not enabled");
		}
		Wait.wait2Second();
		try {
			driver.findElement(By.xpath("//*[contains(@data-icon,'close')]")).click();
		}catch(Exception e) {
			
		}
		if (driver.findElement(By.xpath(strButtonPdf)).isEnabled()) {
			driver.findElement(By.xpath(strButtonPdf)).click();
			try {
				Wait.waitForElementToBeVisibile(By.xpath(downloadSuccessMessage), driver, 10);		
				reportLogger.info("Success - PDF Export Success Toast Message validated successfully");
				test_steps.add("Success - PDF Export Success Toast Message validated successfully");
			}catch(Exception e) {
				try {
					Wait.waitForElementToBeVisibile(By.xpath(downloadFailureMessage), driver, 10);		
					reportLogger.info("Success - PDF Export Failure Toast Message validated successfully");
					test_steps.add("Success - PDF Export Failure Toast Message validated successfully");
				}catch(Exception e1) {
					reportLogger.info("Failed - PDF Export Success/Failure Toast Messages validation");
					test_steps.add("AssertionError Failed - PDF Export Success/Failure Toast Messages validation");
				}
			}
			
		}else {
			reportLogger.info("PDF button is not enabled");
			test_steps.add("AssertionError PDF button is not enabled");
		}	
	}
	
	public void validateCollapseFunctionalityDailyFlash(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		String strEffectiveDate = "//*[contains(text(),'Effective')]";

		while (!Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Collapse)))
			res.Edit.click();
		Wait.explicit_wait_elementToBeClickable(res.Collapse, driver);
		Utility.clickThroughAction(driver, res.Collapse);
		boolean condition1 = Utility.isElementDisplayed(driver, By.xpath(strEffectiveDate));
		boolean condition2 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.dateDailyFlash));

		if (condition1 && !condition2) {

			reportLogger.info("Success - Validaion of Collapse functionlity");
			test_steps.add("Sucess - Validaion of Collapse functionlity");
		} else {
			reportLogger.info("Failed - Validaion of Collapse functionlity");
			test_steps.add("AssertionError Failed - Validaion of Collapse functionlity");
		}
	}

	public void validateEditFunctionalityDailyFlash(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		
		String strEffectiveDate = "//p[contains(text(),'Effective')]";
		
		Wait.explicit_wait_elementToBeClickable(res.Edit, driver);
		Utility.clickThroughAction(driver, res.Edit);
		Wait.WaitForElement(driver, OR_Reports.AdvancedInputs);
		boolean condition1 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.dateDailyFlash));
		boolean condition2 = Utility.isElementDisplayed(driver, By.xpath(strEffectiveDate));

		if (condition1 && !condition2) {
			reportLogger.info("Success - Validaion of Edit functionlity");
			test_steps.add("Sucess - Validaion of Edit functionlity");
		} else {
			reportLogger.info("Failed - Validaion of Edit functionlity");
			test_steps.add("AssertionError Failed - Validaion of Edit functionlity");
		}
	}
	
	//Daily Flash Report after Run Report
	//This method is to validate Standard Header title - Daily Flash Report
	public void validateStandardHeaderTitle(WebDriver driver, String reportName, String propertyName, ArrayList<String> test_steps)
			throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);
		
		try {
			reportLogger.info("Property Name: "+propertyName);
			String expectedHeader = reportName+" - "+propertyName;
			String actualHeader = report.textStandardViewHeader.getText();
			
			if (expectedHeader.equalsIgnoreCase(actualHeader)) {
				reportLogger.info("Success - Standard view header: "+actualHeader+" validation");
				test_steps.add("Success - Standard view header: "+actualHeader+" validation");
			}else {
				reportLogger.info("Failed - Standard view header validation. Expected: "+expectedHeader+" But found: "+actualHeader);
				test_steps.add("AssertionError - Failed - Standard view header validation. Expected: "+expectedHeader+" But found: "+actualHeader);
			}
		}catch(Exception e) {
			reportLogger.info("Exception: "+e.toString());
			test_steps.add("Exception: "+e.toString());
		}		
	}
	
	public void getSelectedBreakOutTaxExemptRevenueValue(WebDriver driver){
		Elements_Reports report = new Elements_Reports(driver);
		
		String strValues = "";
	}
	
	//This method is to validate Standard Header - Daily Flash Report
	public void validateStandardHeaderDailyFlash(WebDriver driver, String dateRangeSelected, String currentDateAndTime, 
			String expBreakOutTaxExempt, ArrayList<String> test_steps)
			throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);
		
		try {			
			String reportType = "//span[contains(text(),'Report type')]";
			String reportTypeValue = driver.findElement(By.xpath("//span[contains(text(),'Report type')]//following-sibling::span")).getText();
			
			try {
				Wait.WaitForElement(driver, reportType);
				reportLogger.info("Success - Report type is available in Standard view");
				test_steps.add("Success - Report type is available in Standard view");
			}catch(Exception e) {
				reportLogger.info("Failed - Report type is not available in Standard view");
				test_steps.add("AssertionError - Failed - Report type is not available in Standard view");
			}
			
			if (reportTypeValue.equalsIgnoreCase("Daily Flash Report")) {
				reportLogger.info("Success - Report type value in Standard view is validated");
				test_steps.add("Success - Report type value in Standard view is validated");
			}else {
				reportLogger.info("Failed - Report type value in Standard view. Expected: 'Daily Flash Report' But found: "+reportTypeValue);
				test_steps.add("AssertionError - Failed - Report type value in Standard view. Expected: 'Daily Flash Report' But found: "+reportTypeValue);
			}
			
		}catch(Exception e) {
			reportLogger.info("Exception: "+e.toString());
			test_steps.add("Exception: "+e.toString());
		}		
		
		try {			
			String dateRange = "//span[contains(text(),'Date Range')]";
			String dateRangeValue = driver.findElement(By.xpath("//span[contains(text(),'Date Range')]//following-sibling::span")).getText();
			
			try {
				Wait.WaitForElement(driver, dateRange);
				reportLogger.info("Success - Date Range is available in Standard view");
				test_steps.add("Success - Date Range is available in Standard view");
			}catch(Exception e) {
				reportLogger.info("Failed - Date Range is not available in Standard view");
				test_steps.add("AssertionError - Failed - Date Range is not available in Standard view");
			}
			
			if (dateRangeValue.equalsIgnoreCase(dateRangeSelected)) {
				reportLogger.info("Success - Date Range value in Standard view is validated. "+dateRangeValue);
				test_steps.add("Success - Date Range value in Standard view is validated. "+dateRangeValue);
			}else {
				reportLogger.info("Failed - Date Range value in Standard view. Expected: "+dateRangeSelected+" But found: "+dateRangeValue);
				test_steps.add("AssertionError - Failed - Date Range value in Standard view. Expected: "+dateRangeSelected+" But found: "+dateRangeValue);
			}
			
		}catch(Exception e) {
			reportLogger.info("Exception: "+e.toString());
			test_steps.add("Exception: "+e.toString());
		}
		
		try {			
			String generatedOn = "//span[contains(text(),'Generated On')]";
			String generatedOnValue = driver.findElement(By.xpath("//span[contains(text(),'Generated On')]//following-sibling::span")).getText();
			String expGneratedOnValue = currentDateAndTime;
			
			try {
				Wait.WaitForElement(driver, generatedOn);
				reportLogger.info("Success - Generated On is available in Standard view");
				test_steps.add("Success - Generated On is available in Standard view");
			}catch(Exception e) {
				reportLogger.info("Failed - Generated On is not available in Standard view");
				test_steps.add("AssertionError - Failed - Generated On is not available in Standard view");
			}
			
			if (expGneratedOnValue.equalsIgnoreCase(generatedOnValue)) {
				reportLogger.info("Success - Generated On value in Standard view is validated. "+generatedOnValue);
				test_steps.add("Success - Generated On value in Standard view is validated. "+generatedOnValue);
			}else {
				reportLogger.info("Failed - Generated On value in Standard view. Expected: "+expGneratedOnValue+" But found: "+generatedOnValue);
				test_steps.add("AssertionError - Failed - Generated On value in Standard view. Expected: "+expGneratedOnValue+" But found: "+generatedOnValue);
			}
			
		}catch(Exception e) {
			reportLogger.info("Exception: "+e.toString());
			test_steps.add("Exception: "+e.toString());
		}
		
		try {			
			String breakOutTaxExempt = "//span[contains(text(),'Break Out Tax-Exempt Revenue')]";
			String breakOutTaxExemptValue = driver.findElement(By.xpath("//span[contains(text(),'Break Out Tax-Exempt Revenue')]//following-sibling::span")).getText();
						
			try {
				Wait.WaitForElement(driver, breakOutTaxExempt);
				reportLogger.info("Success - Break Out Tax-Exempt Revenue is available in Standard view");
				test_steps.add("Success - Break Out Tax-Exempt Revenue is available in Standard view");
			}catch(Exception e) {
				reportLogger.info("Failed - Break Out Tax-Exempt Revenue is not available in Standard view");
				test_steps.add("AssertionError - Failed - Break Out Tax-Exempt Revenue is not available in Standard view");
			}
			
			if (expBreakOutTaxExempt.equalsIgnoreCase(breakOutTaxExemptValue)) {
				reportLogger.info("Success - Break Out Tax-Exempt Revenue value in Standard view is validated. "+breakOutTaxExemptValue);
				test_steps.add("Success - Break Out Tax-Exempt Revenue value in Standard view is validated. "+breakOutTaxExemptValue);
			}else {
				reportLogger.info("Failed - Break Out Tax-Exempt Revenue value in Standard view. Expected: "+expBreakOutTaxExempt+" But found: "+breakOutTaxExemptValue);
				test_steps.add("AssertionError - Failed - Break Out Tax-Exempt Revenue value in Standard view. Expected: "+expBreakOutTaxExempt+" But found: "+breakOutTaxExemptValue);
			}
			
		}catch(Exception e) {
			reportLogger.info("Exception: "+e.toString());
			test_steps.add("Exception: "+e.toString());
		}
		
		
	}
	
	//this method is to validate Property Performance Header availability - Daily Flash report
	public void validatePropertyPerformanceHeader(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		String strPropertyPerformance = "//*[contains(text(),'Property Performance')]";
		
		try {
			Wait.WaitForElement(driver, strPropertyPerformance);
			reportLogger.info("Success - Property Performance is available in after Run Report data");
			test_steps.add("Success - Property Performance is available in after Run Report data");
		}catch(Exception e) {
			reportLogger.info("Failed - Property Performance is not available in after Run Report data");
			test_steps.add("AssertionError - Failed - Property Performance is not available in after Run Report data");
		}		
	}
	
	//This method is to validate Revenue Types table UI - Daily Flash Report
	public void validateRevenueTypesTableUI(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		
		String strTableRevenueTypes = "//th[contains(text(),'Revenue Types')]//ancestor::table";
		
		try {
			Wait.WaitForElement(driver, strTableRevenueTypes);
			reportLogger.info("Success - Revenue Types table is available in after Run Report data");
			test_steps.add("Success - Revenue Types table is available in after Run Report data");
		}catch(Exception e) {
			reportLogger.info("Failed - Revenue Types table is not available in after Run Report data");
			test_steps.add("AssertionError - Failed - Revenue Types table is not available in after Run Report data");
		}
		
		try {
			String strRows = "//th[contains(text(),'Revenue Types')]//ancestor::table//tr";
			List<WebElement> rows = driver.findElements(By.xpath(strRows));
			ArrayList<String> expRowData = new ArrayList<>();
			ArrayList<String> actRowData = new ArrayList<>();
			
			expRowData.add("Room Charges"); expRowData.add("Fees"); expRowData.add("Taxes"); expRowData.add("Incidentals");
			expRowData.add("Revenue Types Totals");
			
			for (int i = 1; i < rows.size()-1; i++) {
				List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
				actRowData.add(cells.get(0).getText());
			}
			
			String footText = driver.findElement(By.xpath("//th[contains(text(),'Revenue Types')]//ancestor::table//tfoot//td[1]")).getText();
			actRowData.add(footText);
			
			if (expRowData.equals(actRowData)) {
				reportLogger.info("Success - Revenue Type table row data validation");
				test_steps.add("Success - Revenue Type table row data validation");
			}else {
				reportLogger.info("Failed - Revenue Type row data validation. Expected: "+expRowData+" But found: "+actRowData);
				test_steps.add("AssertionError - Failed - Revenue Type table row data validation: "+expRowData+" But found: "+actRowData);
			}
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}
		
		try {
			String strCells = "//th[contains(text(),'Revenue Types')]//ancestor::table//thead/tr/th//span[1]";
			List<WebElement> cells = driver.findElements(By.xpath(strCells));
			ArrayList<String> expCellData = new ArrayList<>();
			ArrayList<String> actCellData = new ArrayList<>();
			
			expCellData.add("Selected Date"); expCellData.add("Month to Date"); expCellData.add("Year to Date");
			
			for (int i = 0; i < cells.size(); i++) {
				if (i%2==0) {
					actCellData.add(cells.get(i).getText());
				}

			}
			
			if (expCellData.equals(actCellData)) {
				reportLogger.info("Success - Revenue Type table header data validation");
				test_steps.add("Success - Revenue Type table header data validation");
			}else {
				reportLogger.info("Failed - Revenue Type table header data validation. Expected: "+expCellData+" But found: "+actCellData);
				test_steps.add("AssertionError - Failed - Revenue Type table header data validation: "+expCellData+" But found: "+actCellData);
			}
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}	
		
	}
	
	//This method is to validate Payment Method Types table UI - Daily Flash Report
	public void validatePaymentsMethodTypesTableUI(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		
		String strTablePaymentsMethodTypes = "//th[contains(text(),'Payments Method Types')]//ancestor::table";
		
		try {
			Wait.WaitForElement(driver, strTablePaymentsMethodTypes);
			reportLogger.info("Success - Payments Method Types table is available in after Run Report data");
			test_steps.add("Success - Payments Method Types table is available in after Run Report data");
		}catch(Exception e) {
			reportLogger.info("Failed - Payments Method Types table is not available in after Run Report data");
			test_steps.add("AssertionError - Failed - Payments Method Types table is not available in after Run Report data");
		}
		
		try {
			String strRows = "//th[contains(text(),'Payments Method Types')]//ancestor::table//tr";
			List<WebElement> rows = driver.findElements(By.xpath(strRows));
			ArrayList<String> expRowData = new ArrayList<>();
			ArrayList<String> actRowData = new ArrayList<>();
			
			expRowData.add("Cash"); expRowData.add("Check"); expRowData.add("Credit Cards"); expRowData.add("Other Payment Methods");
			expRowData.add("Payments Method Types Totals");
			
			for (int i = 1; i < rows.size()-1; i++) {
				List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
				actRowData.add(cells.get(0).getText());
			}
			
			String footText = driver.findElement(By.xpath("//th[contains(text(),'Payments Method Types')]//ancestor::table//tfoot//td[1]")).getText();
			actRowData.add(footText);
			
			if (expRowData.equals(actRowData)) {
				reportLogger.info("Success - Payments Method Type table row data validation");
				test_steps.add("Success - Payments Method Type table row data validation");
			}else {
				reportLogger.info("Failed - Payments Method Type table row data validation. Expected: "+expRowData+" But found: "+actRowData);
				test_steps.add("AssertionError - Failed - Payments Method Type table row data validation: "+expRowData+" But found: "+actRowData);
			}
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}
		
		try {
			String strCells = "//th[contains(text(),'Payments Method Types')]//ancestor::table//thead/tr/th//span[1]";
			List<WebElement> cells = driver.findElements(By.xpath(strCells));
			ArrayList<String> expCellData = new ArrayList<>();
			ArrayList<String> actCellData = new ArrayList<>();
			
			expCellData.add("Selected Date"); expCellData.add("Month to Date"); expCellData.add("Year to Date");
			
			for (int i = 0; i < cells.size(); i++) {
				if (i%2==0) {
					actCellData.add(cells.get(i).getText());
				}
			}
			
			if (expCellData.equals(actCellData)) {
				reportLogger.info("Success - Payments Method Type table header data validation");
				test_steps.add("Success - Payments Method Type table header data validation");
			}else {
				reportLogger.info("Failed - Payments Method Type table header data validation. Expected: "+expCellData+" But found: "+actCellData);
				test_steps.add("AssertionError - Failed - Payments Method Type table header data validation: "+expCellData+" But found: "+actCellData);
			}
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}		
	}
	
	//This method is to validate Net Changes table UI - Daily Flash Report
	public void validateNetChangesTableUI(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		
		String strTableNetChanges = "//th[contains(text(),'Net Changes')]//ancestor::table";
		
		try {
			Wait.WaitForElement(driver, strTableNetChanges);
			reportLogger.info("Success - Net Changes table is available in after Run Report data");
			test_steps.add("Success - Net Changes table is available in after Run Report data");
		}catch(Exception e) {
			reportLogger.info("Failed - Net Changes table is not available in after Run Report data");
			test_steps.add("AssertionError - Failed - Net Changes table is not available in after Run Report data");
		}
		
		try {
			String strRows = "//th[contains(text(),'Net Changes')]//ancestor::table//tr";
			List<WebElement> rows = driver.findElements(By.xpath(strRows));
			ArrayList<String> expRowData = new ArrayList<>();
			ArrayList<String> actRowData = new ArrayList<>();
			
			expRowData.add("Net Change In City Ledger"); expRowData.add("Net Change In Guest Ledger"); expRowData.add("Trial Balance");
			expRowData.add("Net Change In Advanced Deposits");
			
			for (int i = 1; i < rows.size(); i++) {
				List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
				actRowData.add(cells.get(0).getText());
			}
			
			if (expRowData.equals(actRowData)) {
				reportLogger.info("Success - Net Changes table row data validation");
				test_steps.add("Success - Net Changes table row data validation");
			}else {
				reportLogger.info("Failed - Net Changes table row data validation. Expected: "+expRowData+" But found: "+actRowData);
				test_steps.add("AssertionError - Failed - Net Changes table row data validation. Expected: "+expRowData+" But found: "+actRowData);
			}
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}
		
		try {
			String strCells = "//th[contains(text(),'Net Changes')]//ancestor::table//thead/tr/th//span[1]";
			List<WebElement> cells = driver.findElements(By.xpath(strCells));
			ArrayList<String> expCellData = new ArrayList<>();
			ArrayList<String> actCellData = new ArrayList<>();
			
			expCellData.add("Selected Date"); expCellData.add("Month to Date"); expCellData.add("Year to Date");
			
			for (int i = 0; i < cells.size(); i++) {
				if (i%2==0) {
					actCellData.add(cells.get(i).getText());
				}
			}
			
			if (expCellData.equals(actCellData)) {
				reportLogger.info("Success - Net Changes table header data validation");
				test_steps.add("Success - Net Changes table header data validation");
			}else {
				reportLogger.info("Failed - Net Changes table header data validation. Expected: "+expCellData+" But found: "+actCellData);
				test_steps.add("AssertionError - Failed - Net Changes table header data validation: "+expCellData+" But found: "+actCellData);
			}
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}		
	}
	
	//This method is to validate Property Statistics table UI - Daily Flash Report
	public void validatePropertyStatisticsTableUI(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		
		String strTablePropertyStatistics = "//th[contains(text(),'Property Statistics')]//ancestor::table";
		
		try {
			Wait.WaitForElement(driver, strTablePropertyStatistics);
			reportLogger.info("Success - Property Statistics table is available in after Run Report data");
			test_steps.add("Success - Property Statistics table is available in after Run Report data");
		}catch(Exception e) {
			reportLogger.info("Failed - Property Statistics table is not available in after Run Report data");
			test_steps.add("AssertionError - Failed - Property Statistics table is not available in after Run Report data");
		}
		
		try {
			String strRows = "//th[contains(text(),'Property Statistics')]//ancestor::table//tr";
			List<WebElement> rows = driver.findElements(By.xpath(strRows));
			ArrayList<String> expRowData = new ArrayList<>();
			ArrayList<String> actRowData = new ArrayList<>();
			
			expRowData.add("Total Room Nights"); expRowData.add("Out of Order Room Nights"); expRowData.add("Bookable Room Nights");
			expRowData.add("Sold Room Nights"); expRowData.add("Remaining Available Room Nights"); expRowData.add("Occupancy%"); 
			expRowData.add("Average Daily Rate(ADR)"); expRowData.add("Rev Per AvailRoom(RevPAR)");
			
			for (int i = 1; i < rows.size(); i++) {
				List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
				actRowData.add(cells.get(0).getText());
			}
			
			if (expRowData.equals(actRowData)) {
				reportLogger.info("Success - Property Statistics table row data validation");
				test_steps.add("Success - Property Statistics table row data validation");
			}else {
				reportLogger.info("Failed - Property Statistics table row data validation. Expected: "+expRowData+" But found: "+actRowData);
				test_steps.add("AssertionError - Failed - Property Statistics table row data validation: "+expRowData+" But found: "+actRowData);
			}
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}
		
		try {
			String strCells = "//th[contains(text(),'Property Statistics')]//ancestor::table//thead/tr/th//span[1]";
			List<WebElement> cells = driver.findElements(By.xpath(strCells));
			ArrayList<String> expCellData = new ArrayList<>();
			ArrayList<String> actCellData = new ArrayList<>();
			
			expCellData.add("Selected Date"); expCellData.add("Month to Date"); expCellData.add("Year to Date");
			
			for (int i = 0; i < cells.size(); i++) {
				if (i%2==0) {
					actCellData.add(cells.get(i).getText());
				}
			}
			
			if (expCellData.equals(actCellData)) {
				reportLogger.info("Success - Property Statistics table header data validation");
				test_steps.add("Success - Property Statistics table header data validation");
			}else {
				reportLogger.info("Failed - Property Statistics table header data validation. Expected: "+expCellData+" But found: "+actCellData);
				test_steps.add("AssertionError - Failed - Property Statistics table header data validation: "+expCellData+" But found: "+actCellData);
			}
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}		
	}
	
	//this method is to validate Guest Count Summary Header availability - Daily Flash report
	public void validateGuestCountSummaryHeader(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		String strGuestCountSummary = "//*[contains(text(),'Guest Count Summary')]";
		
		try {
			Wait.WaitForElement(driver, strGuestCountSummary);
			reportLogger.info("Success - Guest Count Summary is available in after Run Report data");
			test_steps.add("Success - Guest Count Summary is available in after Run Report data");
		}catch(Exception e) {
			reportLogger.info("Failed - Guest Count Summary is not available in after Run Report data");
			test_steps.add("AssertionError - Failed - Guest Count Summary is not available in after Run Report data");
		}		
	}
	
	//this method is to validate Guest Count Statistics table Title availability - Daily Flash report
	public void validateGuestCountStatisticsTableTitle(WebDriver driver, String dateAndTime, ArrayList<String> test_steps)
			throws InterruptedException {
		String strGuestCountStatistics = "//div[contains(@class,'table-title')]";
		String actTitle = driver.findElement(By.xpath(strGuestCountStatistics)).getText();
		
		String expTitle = "Guest Count | "+dateAndTime;
		
		if (expTitle.equalsIgnoreCase(actTitle)) {
			reportLogger.info("Success - Guest Count Statistics table title validation. Title: "+actTitle);
			test_steps.add("Success - Guest Count Statistics table title validation. Title: "+actTitle);
		}else {
			reportLogger.info("Failed - Guest Count Statistics table title validation. Expected: "+expTitle+" But found: "+actTitle);
			test_steps.add("AssertionError - Failed - Guest Count Statistics table title validation. Expected: "+expTitle+" But found: "+actTitle);
		}
	}
	
	//This method is to validate Guest Count Statistics table UI - Daily Flash Report
	public void validateGuestCountStatisticsTableUI(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		
		String strTableGuestCountStatistics = "//th[contains(text(),'Guest Count Statistics')]//ancestor::table";
		
		try {
			Wait.WaitForElement(driver, strTableGuestCountStatistics);
			reportLogger.info("Success - Guest Count Statistics table is available in after Run Report data");
			test_steps.add("Success - Guest Count Statistics table is available in after Run Report data");
		}catch(Exception e) {
			reportLogger.info("Failed - Guest Count Statistics table is not available in after Run Report data");
			test_steps.add("AssertionError - Failed - Guest Count Statistics table is not available in after Run Report data");
		}
		
		try {
			String strRows = "//th[contains(text(),'Guest Count Statistics')]//ancestor::table//tr";
			List<WebElement> rows = driver.findElements(By.xpath(strRows));
			ArrayList<String> expRowData = new ArrayList<>();
			ArrayList<String> actRowData = new ArrayList<>();
			
			expRowData.add("Current In-House"); expRowData.add("Expected Total Arrivals"); expRowData.add("Pending Arrival (To Be Checked In)");
			expRowData.add("Expected Total Departure"); expRowData.add("Pending Departure (To Be Checked Out)"); expRowData.add("Current Staying OverNight");
			
			for (int i = 1; i < rows.size(); i++) {
				List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
				actRowData.add(cells.get(0).getText());
			}
			
			if (expRowData.equals(actRowData)) {
				reportLogger.info("Success - Guest Count Statistics table row data validation");
				test_steps.add("Success - Guest Count Statistics table row data validation");
			}else {
				reportLogger.info("Failed - Guest Count Statistics row data validation. Expected: "+expRowData+" But found: "+actRowData);
				test_steps.add("AssertionError - Failed - Guest Count Statistics table row data validation: "+expRowData+" But found: "+actRowData);
			}
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}
		
		try {
			String strCells = "//th[contains(text(),'Guest Count Statistics')]//ancestor::table//thead/tr/th";
			List<WebElement> cells = driver.findElements(By.xpath(strCells));
			ArrayList<String> expCellData = new ArrayList<>();
			ArrayList<String> actCellData = new ArrayList<>();
			
			expCellData.add("Guest Count Statistics"); expCellData.add("Room Count"); expCellData.add("Guest Count");
			expCellData.add("Adults"); expCellData.add("Children");
			
			for (int i = 0; i < cells.size(); i++) {
				actCellData.add(cells.get(i).getText());
			}
			
			if (expCellData.equals(actCellData)) {
				reportLogger.info("Success - Guest Count Statistics table header data validation");
				test_steps.add("Success - Guest Count Statistics table header data validation");
			}else {
				reportLogger.info("Failed - Guest Count Statistics table header data validation. Expected: "+expCellData+" But found: "+actCellData);
				test_steps.add("AssertionError - Failed - Guest Count Statistics table header data validation: "+expCellData+" But found: "+actCellData);
			}
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}		
	}
	
	
	public void validateDailyFlashReportToolTips(WebDriver driver, String tableName, ArrayList<String> test_steps) {
		
		String strDates = "//th[contains(text(),'"+tableName+"')]//ancestor::table//thead/tr/th//span[2]";
		List<WebElement> dates = driver.findElements(By.xpath(strDates));
		reportLogger.info("Dates count: "+dates.size());
		
		try {
			
			Utility.hoverOnElement(driver, dates.get(0));
			Wait.waitForElementToBeVisibile(
					By.xpath("//th[contains(text(),'"+tableName+"')]//ancestor::table//thead/tr/th//span[2]//following::b[1]"), driver);
			String act1 = driver
					.findElement(By.xpath("//th[contains(text(),'"+tableName+"')]//ancestor::table//thead/tr/th//span[2]//following::b[1]"))
					.getText();
			String act2 = driver.findElement(By.xpath(
					"//th[contains(text(),'"+tableName+"')]//ancestor::table//thead/tr/th//span[2]//following::p[1]"))
					.getText().replaceAll("[\\t\\n\\r]+", " ");
			String exp1 = "Selected Date";
			String exp2 = "The data points in this column will include totals for the effective date selected";

			if ((exp1.equals(act1)) && (exp2.replaceAll("[\\t\\n\\r]+", " ").equals(act2))) {
				reportLogger.info("Success - "+tableName+" - Selected Date tooltip validation");
				test_steps.add("Success - "+tableName+" - Selected Date tooltip validation");
			} else {
				reportLogger.info("Failed - "+tableName+" - Selected Date tooltip validation. Expected: "+exp1+"<br>"+exp2+" But found: "+act1+"<br>"+act2);
				test_steps.add("AssertionError - Failed - "+tableName+" - Selected Date tooltip validation. Expected: "+exp1+"<br>"+exp2+" But found: "+act1+"<br>"+act2);
			}
			
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}
		
		try {			
			Utility.hoverOnElement(driver, dates.get(1));
			Wait.waitForElementToBeVisibile(
					By.xpath("//th[contains(text(),'"+tableName+"')]//ancestor::table//thead/tr/th//span[2]//following::b[2]"), driver);
			String act1 = driver
					.findElement(By.xpath("//th[contains(text(),'"+tableName+"')]//ancestor::table//thead/tr/th//span[2]//following::b[2]"))
					.getText();
			String act2 = driver.findElement(By.xpath(
					"//th[contains(text(),'"+tableName+"')]//ancestor::table//thead/tr/th//span[2]//following::p[2]"))
					.getText().replaceAll("[\\t\\n\\r]+", " ");
			String exp1 = "Month to Date";
			String exp2 = "The data points in this column will include totals from start date of the current month until the effective date selected";

			if ((exp1.equals(act1)) && (exp2.replaceAll("[\\t\\n\\r]+", " ").equals(act2))) {
				reportLogger.info("Success - "+tableName+" - Month to Date tooltip validation");
				test_steps.add("Success - "+tableName+" - Month to Date tooltip validation");
			} else {
				reportLogger.info("Failed - "+tableName+" - Month to Date tooltip validation. Expected: "+exp1+"<br>"+exp2+" But found: "+act1+"<br>"+act2);
				test_steps.add("AssertionError - Failed - "+tableName+" - Month to Date tooltip validation. Expected: "+exp1+"<br>"+exp2+" But found: "+act1+"<br>"+act2);
			}
			
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}
		
		try {			
			Utility.hoverOnElement(driver, dates.get(2));
			Wait.waitForElementToBeVisibile(
					By.xpath("//th[contains(text(),'"+tableName+"')]//ancestor::table//thead/tr/th//span[2]//following::b[3]"), driver);
			String act1 = driver
					.findElement(By.xpath("//th[contains(text(),'"+tableName+"')]//ancestor::table//thead/tr/th//span[2]//following::b[3]"))
					.getText();
			String act2 = driver.findElement(By.xpath(
					"//th[contains(text(),'"+tableName+"')]//ancestor::table//thead/tr/th//span[2]//following::p[3]"))
					.getText().replaceAll("[\\t\\n\\r]+", " ");
			String exp1 = "Year to Date";
			String exp2 = "The data points in this column will include totals from start date of the current year until the effective date selected";

			if ((exp1.equals(act1)) && (exp2.replaceAll("[\\t\\n\\r]+", " ").equals(act2))) {
				reportLogger.info("Success - "+tableName+" - Year to Date tooltip validation");
				test_steps.add("Success - "+tableName+" - Year to Date tooltip validation");
			} else {
				reportLogger.info("Failed - "+tableName+" - Year to Date tooltip validation. Expected: "+exp1+"<br>"+exp2+" But found: "+act1+"<br>"+act2);
				test_steps.add("AssertionError - Failed - "+tableName+" - Year to Date tooltip validation. Expected: "+exp1+"<br>"+exp2+" But found: "+act1+"<br>"+act2);
			}
			
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception: "+e.toString());
			reportLogger.info("AssertionError - Exception: "+e.toString());
		}
	}
	
	
	
	public HashMap<String, String> getPropertyPerformanceDataWithType(WebDriver driver, String type, ArrayList<String> test_steps) {
		
		HashMap<String, String> data = new HashMap<>();
		String strCell = "//td[text()='"+type+"']/../td";  ////th[contains(text(),'Revenue Types')]//ancestor::table//tbody/tr/td[text()='Room Charges']/../td
		
		List<WebElement> cells = driver.findElements(By.xpath(strCell));
		
		data.put("Selected Date", cells.get(1).getText().substring(1));
		data.put("Month to Date", cells.get(2).getText().substring(1));
		data.put("Year to Date", cells.get(3).getText().substring(1));
		
		return data;		
	}
	
	
	public HashMap<String, ArrayList<String>> getPropertyPerformanceDataWithTable(WebDriver driver, String table, ArrayList<String> test_steps) {
		
		HashMap<String, ArrayList<String>> data = new HashMap<>();
		
		String strRows = "//th/span[contains(text(),'"+table+"')]//ancestor::table//tbody/tr"; 
		
		List<WebElement> rows = driver.findElements(By.xpath(strRows));
		
		for (int i = 0; i < rows.size(); i++) {
			List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
			ArrayList<String> datesData = new ArrayList<>();
			for (int j = 1; j < cells.size(); j++) {
				if (table.equalsIgnoreCase("Property Statistics")) {
					datesData.add(cells.get(j).getText());
				}else {
					datesData.add(cells.get(j).getText().substring(1));
				}
				
			}
			data.put(cells.get(0).getText(), datesData);
		}
		try {
			if (!table.equalsIgnoreCase("Net Changes") && !table.equalsIgnoreCase("Property Statistics")) {
				List<WebElement> cells = driver.findElements(By.xpath("//th/span[contains(text(),'"+table+"')]//ancestor::table//tfoot/tr/td"));
				ArrayList<String> datesData = new ArrayList<>();
				for (int j = 1; j < cells.size(); j++) {
					datesData.add(cells.get(j).getText().substring(1));
				}
				data.put(cells.get(0).getText(), datesData);
			}
		}catch(Exception e) {
			reportLogger.info(e.toString());
		}
		
		return data;		
	}
	
	public HashMap<String, ArrayList<String>> getGuestCountStatisticsTableData(WebDriver driver, ArrayList<String> test_steps) {
		
		HashMap<String, ArrayList<String>> data = new HashMap<>();
		
		String strRows = "//th/span[contains(text(),'Guest Count Statistics')]//ancestor::table//tbody/tr"; 
		
		List<WebElement> rows = driver.findElements(By.xpath(strRows));
		
		for (int i = 0; i < rows.size(); i++) {
			List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
			ArrayList<String> datesData = new ArrayList<>();
			for (int j = 1; j < cells.size(); j++) {
				datesData.add(cells.get(j).getText());
			}
			data.put(cells.get(0).getText(), datesData);
		}
		
		return data;		
	}
	
	
	
	
	
	
	
	
	//Room Forecast Report
	// This method is to validate Room Forecast Report Header availability
	public void validateRoomForecastReportInMainHeader(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		String strName = "//div[contains(text(),'Room Forecast Report')]";

		try {
			Wait.waitForElementToBeVisibile(By.xpath(strName), driver);
			reportLogger.info("Success - Room Forecast Report is available in Main header");
			test_steps.add("Success - Room Forecast Report is available in Main header");
		} catch (Exception e) {
			reportLogger.info("Failed - Room Forecast Report is available in Main header");
			test_steps.add("AssertionError Failed - Room Forecast Report is available in Main header");
		}
	}
	
	//This method is to validate Collapse functionality -Sticky Input Bar - Room Forecast Report
	public void validateCollapseFunctionalityRoomForecast(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		while (!Utility.isElementDisplayed(driver, By.xpath(OR_Reports.Collapse)))
			res.Edit.click();
		Wait.explicit_wait_elementToBeClickable(res.Collapse, driver);
		Utility.clickThroughAction(driver, res.Collapse);
		
		String buttonEdit = "//span[contains(text(),'Edit')]";
		boolean condition1 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.ChoseDateRange));
		boolean condition2 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.SelectInputs));
		boolean condition3 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.CustomizeDetailedView));
		boolean condition4 = Utility.isElementDisplayed(driver, By.xpath(buttonEdit));

		if (!condition1 && !condition2 && !condition3 && condition4) {

			reportLogger.info("Success - Room Forecast Report - Validaion of Collapse functionlity");
			test_steps.add("Sucess - Room Forecast Report - Validaion of Collapse functionlity");
		} else {
			reportLogger.info("Failed - Room Forecast Report - Validaion of Collapse functionlity");
			test_steps.add("AssertionError Failed - Room Forecast Report - Validaion of Collapse functionlity");
		}
	}
	
	//This method is to validate Edit functionality -Sticky Input Bar - Room Forecast Report
	public void validateEditFunctionalityRoomForecast(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		
		String strDateRange = "//p[contains(text(),'Date Range')]";
		
		Wait.explicit_wait_elementToBeClickable(res.Edit, driver);
		Utility.clickThroughAction(driver, res.Edit);
		Wait.WaitForElement(driver, OR_Reports.AdvancedInputs);
		boolean condition1 = Utility.isElementDisplayed(driver, By.xpath(OR_Reports.SelectInputs));
		boolean condition2 = Utility.isElementDisplayed(driver, By.xpath(strDateRange));

		if (condition1 && !condition2) {
			reportLogger.info("Success - Room Forecast - Validaion of Edit functionlity");
			test_steps.add("Sucess - Room Forecast - Validaion of Edit functionlity");
		} else {
			reportLogger.info("Failed - Room Forecast - Validaion of Edit functionlity");
			test_steps.add("AssertionError Failed - Room Forecast - Validaion of Edit functionlity");
		}
	}
	
	//This method is to get selected property name from ReportsV2 Home page
	public String getSelectedPropertyNameFromReportsV2HomePage(WebDriver driver, ArrayList<String> test_steps) {

		String propertyName;
		String strProperty = "//div[contains(@class,'PropertySelect')]";
		
		propertyName = driver.findElement(By.xpath(strProperty)).getText();
		
		return propertyName;
	}
	
	//This method is to get selected property name from specified Report page
	public String getSelectedPropertyNameFromReportPage(WebDriver driver, ArrayList<String> test_steps) {

		String propertyName;
		String strProperty = "//div[contains(@class,'PropertySelect')]";
		
		propertyName = driver.findElement(By.xpath(strProperty)).getText();
		
		return propertyName;
	}

	// This method is to validate Choose Date Range availability - Room Forecast Report
	public void validateChooseDateRangeAvailability(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.txtChooseDateRange);
			reportLogger.info("Success - Choose Date Range is available in Room Forecast Report page");
			test_steps.add("Success - Choose Date Range is available in Room Forecast Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Choose Date Range is not available in Room Forecast Report page");
			test_steps.add("AssertionError Failed - Choose Date Range is not available in Room Forecast Report page");
		}
	}
	
	// This method is to validate Stay on Date Range availability - Room Forecast
	public void validateStayOnDateRangeAvailabilityRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.txtStayonDateRange);
			reportLogger.info("Success - Stay on Date Range is available in Room Forecast Report page");
			test_steps.add("Success - Stay on Date Range is available in Room Forecast Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Stay on Date Range is not available in Room Forecast Report page");
			test_steps.add("AssertionError Failed - Stay on Date Range is not available in Room Forecast Report page");
		}
	}
	
	// This method is to validate Choose Date Range Tooltip - Room Forecast Report
	public void validateRoomForecastChooseDateRangeToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.txtChooseDateRange);
		WebElement e = driver.findElement(By.xpath("//*[text()='Choose Date Range']/../span/span"));
		Utility.hoverOnElement(driver, e);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Choose Date Range')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Choose Date Range')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'Select a pre-defined date')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String exp1 = "Choose Date Range";
		String exp2 = "Select a pre-defined date range or enter a custom date range.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Choose Date Range tooltip validation");
			test_steps.add("Sucess - Choose Date Range tooltip validation");
		} else {
			reportLogger.info("Failed - Choose Date Range tooltip validation");
			test_steps.add("AssertionError Failed - Choose Date Range tooltip validation");
		}
	}
	
	// This method is to validate Choose Date Range Default value - Room Forecast Report
	public void validateDefaultValueChooseDateRangeRoomForecast(WebDriver driver, String timeZone, String dateFormat, ArrayList<String> test_steps) {
		
		Elements_Reports report = new Elements_Reports(driver);
		//String dateFormat = "dd MMM, YYYY EEEE";
		
		try {
			
			String actualDateRange = report.dayCurrentSelected.getText();

			if (actualDateRange.equalsIgnoreCase("Today")) {
				reportLogger.info("Today is selected by default in date Dropdown");
				test_steps.add("Today is selected by default in date Dropdown");

			} else {
				reportLogger.info(
						"Failed, Today is not selected by default in date Dropdown. Expected: Today, but Found: " + actualDateRange);
				test_steps.add(
						"AssertionError - Failed, Today is not selected by default in date Dropdown. Expected: Today, but Found: "
								+ actualDateRange);
			}
			
			String actStartDate = getStartDate(driver, test_steps);
			String actEndDate = getEndDate(driver, test_steps);
			
			String expStartDate = Utility.getCurrentDate(dateFormat, timeZone);
			String expEndDate = Utility.getCurrentDate(dateFormat, timeZone);
			
			if (actStartDate.equalsIgnoreCase(actStartDate) && actEndDate.equalsIgnoreCase(expEndDate)) {
				reportLogger.info("Success - Default date selection. Start date: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("Success - Default date selection. Start date: "+actStartDate+" , End date: "+actEndDate);
			}else {
				reportLogger.info("Failed - Default date selection. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("AssertionError - Failed - Default date selection. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
			}
			
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception occured "+e.toString());
		}		
	}
	
	// This method is to validate all Date Ranges Choose Date Range - Room Forecast Report
	public void validateAllDateRangesRoomForecast(WebDriver driver, String timeZone, String dateFormat, String startDayOfWeek, ArrayList<String> test_steps) {
		
		Elements_Reports report = new Elements_Reports(driver);
		//String dateFormat = "dd MMM, YYYY EEEE";
		
		//Today Date Range
		try {			
			String actualDateRange = report.dayCurrentSelected.getText();

			if (actualDateRange.equalsIgnoreCase("Today")) {
				reportLogger.info("Today is selected by default in date Dropdown");
				test_steps.add("Today is selected by default in date Dropdown");

			} else {
				reportLogger.info(
						"Failed, Today is not selected by default in date Dropdown. Expected: Today, but Found: " + actualDateRange);
				test_steps.add(
						"AssertionError - Failed, Today is not selected by default in date Dropdown. Expected: Today, but Found: "
								+ actualDateRange);
			}
			
			String actStartDate = getStartDate(driver, test_steps);
			String actEndDate = getEndDate(driver, test_steps);
			
			String expStartDate = Utility.getCurrentDate(dateFormat, timeZone);
			String expEndDate = Utility.getCurrentDate(dateFormat, timeZone);
			
			if (actStartDate.equalsIgnoreCase(actStartDate) && actEndDate.equalsIgnoreCase(expEndDate)) {
				reportLogger.info("Success - Default date selection. Start date: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("Success - Default date selection. Start date: "+actStartDate+" , End date: "+actEndDate);
			}else {
				reportLogger.info("Failed - Default date selection. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("AssertionError - Failed - Default date selection. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
			}
			
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception occured "+e.toString());
		}
		
		//This Week Date Range
		try {
			
			selectDateRange(driver, "This Week", test_steps);
			String actualDateRange = report.dayCurrentSelected.getText();

			if (actualDateRange.equalsIgnoreCase("This Week")) {
				reportLogger.info("This Week is selected after after clicking on This Week in date Dropdown");
				test_steps.add("This Week is selected after after clicking on This Week in date Dropdown");

			} else {
				reportLogger.info("Failed, This Week is not selected after clicking on This Week in date Dropdown. Expected: This Week, but Found: " + actualDateRange);
				test_steps.add("AssertionError - Failed, This Week is not selected after clicking on This Week in date Dropdown. Expected: This Week, but Found: "+ actualDateRange);
			}
			
			String actStartDate = getStartDate(driver, test_steps);
			String actEndDate = getEndDate(driver, test_steps);

			int dayFrom = 0;
			GregorianCalendar dayOfThisWeek = new GregorianCalendar();
			if (startDayOfWeek.equalsIgnoreCase("Monday")) {
				//dayFromMonday = (dayBeforeThisWeek.get(Calendar.DAY_OF_WEEK) + 7 - Calendar.MONDAY) % 7;
				dayFrom = (dayOfThisWeek.get(Calendar.DAY_OF_WEEK) + 7 - Calendar.MONDAY) % 7;
			}else if (startDayOfWeek.equalsIgnoreCase("Sunday")) {
				dayFrom = (dayOfThisWeek.get(Calendar.DAY_OF_WEEK) + 7 - Calendar.SUNDAY) % 7;
			}
			
			dayOfThisWeek.add(Calendar.DATE, -dayFrom);
			String expStartDate = new SimpleDateFormat(dateFormat).format(dayOfThisWeek.getTime());
			reportLogger.info("Expected Start date: "+expStartDate);
			dayOfThisWeek.add(Calendar.DATE, 6);
			String expEndDate = new SimpleDateFormat(dateFormat).format(dayOfThisWeek.getTime());
			reportLogger.info("Expected End date: "+expEndDate);
			
			if (actStartDate.equalsIgnoreCase(expStartDate) && actEndDate.equalsIgnoreCase(expEndDate)) {
				reportLogger.info("Success - This Week Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("Success - This Week Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
			}else {
				reportLogger.info("Failed - This Week Date Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("AssertionError - Failed - This Week Date Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
			}
			
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception occured "+e.toString());
		}
		
		
		//This Month Date Range
		try {
			
			selectDateRange(driver, "This Month", test_steps);
			String actualDateRange = report.dayCurrentSelected.getText();

			if (actualDateRange.equalsIgnoreCase("This Month")) {
				reportLogger.info("This Month is selected after after clicking on This Month in date Dropdown");
				test_steps.add("This Month is selected after after clicking on This Month in date Dropdown");

			} else {
				reportLogger.info("Failed, This Month is not selected after clicking on This Month in date Dropdown. Expected: This Month, but Found: " + actualDateRange);
				test_steps.add("AssertionError - Failed, This Month is not selected after clicking on This Month in date Dropdown. Expected: This Month, but Found: "+ actualDateRange);
			}
			
			String actStartDate = getStartDate(driver, test_steps);
			String actEndDate = getEndDate(driver, test_steps);

			Calendar thisMonth = Calendar.getInstance();
			thisMonth.add(Calendar.MONTH, 0);
			
			SimpleDateFormat format = new SimpleDateFormat(dateFormat);
			String expStartDate = format.format(new Date((thisMonth.get(Calendar.MONTH)+1) + "/" + 01 + "/" + thisMonth.get(Calendar.YEAR)));
			String d = (thisMonth.get(Calendar.MONTH)+1) + "/" + thisMonth.getActualMaximum(Calendar.DATE) + "/" + thisMonth.get(Calendar.YEAR);
			String expEndDate = new SimpleDateFormat(dateFormat).format(new Date(d));
			
			reportLogger.info("Expected Start date: "+expStartDate);
			reportLogger.info("Expected End date: "+expEndDate);
			
			if (actStartDate.equalsIgnoreCase(expStartDate) && actEndDate.equalsIgnoreCase(expEndDate)) {
				reportLogger.info("Success - This Month Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("Success - This Month Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
			}else {
				reportLogger.info("Failed - This Month Date Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("AssertionError - Failed - This Month Date Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
			}
			
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception occured "+e.toString());
		}
		
		//Next 7 Days Date Range
		try {
			//SimpleDateFormat format = new SimpleDateFormat(dateFormat);
			selectDateRange(driver, "Next 7 Days", test_steps);
			String actualDateRange = report.dayCurrentSelected.getText();

			if (actualDateRange.equalsIgnoreCase("Next 7 Days")) {
				reportLogger.info("Next 7 Days is selected after after clicking on Next 7 Days in date Dropdown");
				test_steps.add("Next 7 Days is selected after after clicking on Next 7 Days in date Dropdown");

			} else {
				reportLogger.info("Failed, Next 7 Days is not selected after clicking on Next 7 Days in date Dropdown. Expected: Next 7 Days, but Found: " + actualDateRange);
				test_steps.add("AssertionError - Failed, Next 7 Days is not selected after clicking on Next 7 Days in date Dropdown. Expected: Next 7 Days, but Found: "+ actualDateRange);
			}
			
			String actStartDate = getStartDate(driver, test_steps);
			String actEndDate = getEndDate(driver, test_steps);
			
			String expStartDate = Utility.getCurrentDate(dateFormat, timeZone);
			String expEndDate = Utility.getDatePast_FutureDate(6, timeZone, dateFormat);
			
			reportLogger.info("Expected Start date: "+expStartDate);
			reportLogger.info("Expected End date: "+expEndDate);
			reportLogger.info("Expected End date: "+Utility.getDatePast_FutureDate(6, timeZone));
			
			if (actStartDate.equalsIgnoreCase(expStartDate) && actEndDate.equalsIgnoreCase(expEndDate)) {
				reportLogger.info("Success - Next 7 Days Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("Success - Next 7 Days Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
			}else {
				reportLogger.info("Failed - This Next 7 Days Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("AssertionError - Failed - Next 7 Days Date Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
			}
			
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception occured "+e.toString());
		}
		
		//Next 30 Days Date Range
		try {
			SimpleDateFormat format = new SimpleDateFormat(dateFormat);
			selectDateRange(driver, "Next 30 Days", test_steps);
			String actualDateRange = report.dayCurrentSelected.getText();

			if (actualDateRange.equalsIgnoreCase("Next 30 Days")) {
				reportLogger.info("Next 30 Days is selected after after clicking on Next 30 Days in date Dropdown");
				test_steps.add("Next 30 Days is selected after after clicking on Next 30 Days in date Dropdown");

			} else {
				reportLogger.info("Failed, Next 30 Days is not selected after clicking on Next 30 Days in date Dropdown. Expected: Next 30 Days, but Found: " + actualDateRange);
				test_steps.add("AssertionError - Failed, Next 30 Days is not selected after clicking on Next 30 Days in date Dropdown. Expected: Next 30 Days, but Found: "+ actualDateRange);
			}
			
			String actStartDate = getStartDate(driver, test_steps);
			String actEndDate = getEndDate(driver, test_steps);
			
			String expStartDate = Utility.getCurrentDate(dateFormat, timeZone);
			//String expEndDate = Utility.getDatePast_FutureDate(30, timeZone, dateFormat);
			String expEndDate = Utility.getDatePast_FutureMonthDate(1, timeZone, dateFormat);
			
			reportLogger.info("Expected Start date: "+expStartDate);
			reportLogger.info("Expected End date: "+expEndDate);
			
			if (actStartDate.equalsIgnoreCase(expStartDate) && actEndDate.equalsIgnoreCase(expEndDate)) {
				reportLogger.info("Success - Next 30 Days Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("Success - Next 30 Days Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
			}else {
				reportLogger.info("Failed - This Next 30 Days Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("AssertionError - Failed - Next 30 Days Date Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
			}
			
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception occured "+e.toString());
		}
		
		//Next 90 Days Date Range
		try {
			SimpleDateFormat format = new SimpleDateFormat(dateFormat);
			selectDateRange(driver, "Next 90 Days", test_steps);
			String actualDateRange = report.dayCurrentSelected.getText();

			if (actualDateRange.equalsIgnoreCase("Next 90 Days")) {
				reportLogger.info("Next 90 Days is selected after after clicking on Next 90 Days in date Dropdown");
				test_steps.add("Next 90 Days is selected after after clicking on Next 90 Days in date Dropdown");

			} else {
				reportLogger.info("Failed, Next 90 Days is not selected after clicking on Next 90 Days in date Dropdown. Expected: Next 90 Days, but Found: " + actualDateRange);
				test_steps.add("AssertionError - Failed, Next 90 Days is not selected after clicking on Next 90 Days in date Dropdown. Expected: Next 90 Days, but Found: "+ actualDateRange);
			}
			
			String actStartDate = getStartDate(driver, test_steps);
			String actEndDate = getEndDate(driver, test_steps);
			
			String expStartDate = Utility.getCurrentDate(dateFormat, timeZone);
			String expEndDate = Utility.getDatePast_FutureMonthDate(3, timeZone, dateFormat);
			//String expEndDate = Utility.getDatePast_FutureDate(90, timeZone, dateFormat);

			System.out.println("Start "+expStartDate);
			System.out.println("End "+expEndDate);
			
			reportLogger.info("Expected Start date: "+expStartDate);
			reportLogger.info("Expected End date: "+expEndDate);
			
			if (actStartDate.equalsIgnoreCase(expStartDate) && actEndDate.equalsIgnoreCase(expEndDate)) {
				reportLogger.info("Success - Next 90 Days Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("Success - Next 90 Days Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
			}else {
				reportLogger.info("Failed - Next 90 Days Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("AssertionError - Failed - Next 90 Days Date Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
			}
			
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception occured "+e.toString());
		}
		
		
		
	}
	
	
	// This method is to validate Select Inputs availability - Room Forecast
	public void validateSelectInputsAvailabilityRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.txtSelectInputs);
			reportLogger.info("Success - Select Inputs is available in Room Forecast Report page");
			test_steps.add("Success - Select Inputs is available in Room Forecast Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Select Inputs is not available in Room Forecast Report page");
			test_steps.add("AssertionError Failed - Select Inputs is not available in Room Forecast Report page");
		}
	}
	
	// This method is to validate Select Inputs - Break Out by availability - Room Forecast
	public void validateBreakOutByAvailabilityRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.txtBreakOutBy);
			reportLogger.info("Success - Select Inputs - Break Out by is available in Room Forecast Report page");
			test_steps.add("Success - Select Inputs - Break Out by is available in Room Forecast Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Select Inputs - Break Out by is not available in Room Forecast Report page");
			test_steps.add("AssertionError Failed - Select Inputs - Break Out by is not available in Room Forecast Report page");
		}
	}
	
	// This method is to validate Select Inputs - Break Out by Tooltip
	public void validateRoomForecastBreakOutByToolTip(WebDriver driver, ArrayList<String> test_steps) {
		Wait.WaitForElement(driver, OR_Reports.txtBreakOutBy);
		WebElement e = driver.findElement(By.xpath("//*[text()='Break Out by']/ancestor::span//following-sibling::span"));
		Utility.hoverOnElement(driver, e);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Break-out')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Break-out')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'Break-out by Roomclass')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String exp1 = "Report Break-out Options";
		String exp2 = "Break-out by Roomclass - Displays the report data for each roomclass specifically, under each date within the selected date range. Break-out by Market Segment - Displays the report data for each Market Segment specifically, under each date within the selected date range.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Select Inputs - Break Out by tooltip validation");
			test_steps.add("Sucess - Select Inputs - Break Out by tooltip validation");
		} else {
			reportLogger.info("Failed - Select Inputs - Break Out by tooltip validation. Expected: "+exp2+" But found: "+act2);
			test_steps.add("AssertionError Failed - Select Inputs - Break Out by tooltip validation. Expected: "+exp2+" But found: "+act2);
		}
	}
	
	// This method is to validate Select Inputs - Break Out by options availability - Room Forecast
	public void validateBreakOutByOptionsAvailabilityRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.txtBreakOutByNone);
			reportLogger.info("Success - Select Inputs - Break Out by option 'None' is available in Room Forecast Report page");
			test_steps.add("Success - Select Inputs - Break Out by option 'None' is available in Room Forecast Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Select Inputs - Break Out by option 'None' is not available in Room Forecast Report page");
			test_steps.add("AssertionError Failed - Select Inputs - Break Out by option 'None' is not available in Room Forecast Report page");
		}
		
		try {
			Wait.WaitForElement(driver, OR_Reports.txtBreakOutByRoomClass);
			reportLogger.info("Success - Select Inputs - Break Out by option 'Room Class' is available in Room Forecast Report page");
			test_steps.add("Success - Select Inputs - Break Out by option 'Room Class' is available in Room Forecast Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Select Inputs - Break Out by option 'Room Class' is not available in Room Forecast Report page");
			test_steps.add("AssertionError Failed - Select Inputs - Break Out by option 'Room Class' is not available in Room Forecast Report page");
		}
		
		try {
			Wait.WaitForElement(driver, OR_Reports.txtBreakOutByMarketSegment);
			reportLogger.info("Success - Select Inputs - Break Out by option 'Market Segment' is available in Room Forecast Report page");
			test_steps.add("Success - Select Inputs - Break Out by option 'Market Segment' is available in Room Forecast Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Select Inputs - Break Out by option 'Market Segment' is not available in Room Forecast Report page");
			test_steps.add("AssertionError Failed - Select Inputs - Break Out by option 'Market Segment' is not available in Room Forecast Report page");
		}
	}
	
	
	// This method is to select Break Out by option - Room Forecast
	public void selectBreakOutByOptionRoomForecast(WebDriver driver, String breakOutBy, ArrayList<String> test_steps)
			throws InterruptedException {
		
		Elements_Reports report = new Elements_Reports(driver);
		
		switch (breakOutBy) {
		case "None":
			report.rdoBreakOutByNone.click();
			break;
			
		case "Room Class":
			report.rdoBreakOutByRoomClass.click();
			break;
			
		case "Market Segment":
			report.rdoBreakOutByMarketSegment.click();
			break;

		default:
			break;
		}
	}
	
	// This method is to validate selection of Break Out by option - Room Forecast
	public void validateBreakOutByOptionSelectionRoomForecast(WebDriver driver, String breakOutBy, ArrayList<String> test_steps)
			throws InterruptedException {
		
		String strBreakOutBy = "//span[contains(text(),'"+breakOutBy+"')]//preceding-sibling::span";
		selectBreakOutByOptionRoomForecast(driver, breakOutBy, test_steps);
		
		try {
			WebElement breakOutByOption = driver.findElement(By.xpath(strBreakOutBy));
			if (breakOutByOption.getAttribute("class").contains("checked")) {
				reportLogger.info("Success - Given Break Out by option selected");
				test_steps.add("Success - Given Break Out by option selected");
			}else {
				reportLogger.info("Failed - Given Break Out by option is not selected");
				test_steps.add("AssertionError - Failed - Given Break Out by option is not selected");
			}
		}catch(Exception e) {
			test_steps.add(e.toString());
		}
	}
	
	// This method is to select Include Performance Metrics (Revenue, ADR, RevPAR) option - Room Forecast
	public void selectIncludePerformanceMetrics(WebDriver driver, String option, ArrayList<String> test_steps)
			throws InterruptedException {
		
		Elements_Reports report = new Elements_Reports(driver);
		
		expandGivenAdvancedOptions(driver, "Include Performance Metrics (Revenue, ADR, RevPAR)", test_steps);
		
		if (option.equalsIgnoreCase("Yes")) {
			if (!report.rdoYesIncludPerformanceMetrics.isSelected()) {
				report.rdoYesIncludPerformanceMetrics.click();
			}
		}else if (option.equalsIgnoreCase("No")) {
			if (!report.rdoNoIncludPerformanceMetrics.isSelected()) {
				report.rdoNoIncludPerformanceMetrics.click();
			}
		}
	}
	
	// This method is to select Include Performance Metrics (Revenue, ADR, RevPAR) option - Room Forecast
	public void selectIncludeGroupReservations(WebDriver driver, String option, ArrayList<String> test_steps)
			throws InterruptedException {
		
		Elements_Reports report = new Elements_Reports(driver);
		
		expandGivenAdvancedOptions(driver, "Include Group Reservations", test_steps);
		
		if (option.equalsIgnoreCase("Yes")) {
			if (!report.rdoYesIncludeGroupReservations.isSelected()) {
				report.rdoYesIncludeGroupReservations.click();
			}
		}else if (option.equalsIgnoreCase("No")) {
			if (!report.rdoNoIncludeGroupReservations.isSelected()) {
				report.rdoNoIncludeGroupReservations.click();
			}
		}
	}
	
	
	// This method is to validate Customize Detailed View availability - Room Forecast Report
	public void validateCustomizeDetailedViewAvailabilityRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.CustomizeDetailedView);
			reportLogger.info("Success - Customize Detailed View is available in Room Forecast Report page");
			test_steps.add("Success - Customize Detailed View is available in Room Forecast Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Customize Detailed View is not available in Room Forecast Report page");
			test_steps.add("AssertionError Failed - Customize Detailed View is not available in Room Forecast Report page");
		}
	}

	// This method is to validate Customize Detailed View - Group Rows By availability - Room Forecast Report
	public void validateGroupRowsByAvailabilityRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		String txtGroupRowsBy = "//span/b[text()='Group Rows By']";
		try {
			Wait.WaitForElement(driver, txtGroupRowsBy);
			reportLogger.info("Success - Group Rows By - Customize Detailed View is available in Room Forecast Report page");
			test_steps.add("Success - Group Rows By - Customize Detailed View is available in Room Forecast Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Group Rows By - Customize Detailed View is not available in Room Forecast Report page");
			test_steps.add("AssertionError Failed - Group Rows By - Customize Detailed View is not available in Room Forecast Report page");
		}
	}
	
	// This method is to validate Customize Detailed View - Group Rows By - Tooltip - Room Forecast
	public void validateRoomForecastGroupRowsByToolTip(WebDriver driver, ArrayList<String> test_steps) {
		String txtGroupRowsBy = "//span/b[text()='Group Rows By']";
		Wait.WaitForElement(driver, txtGroupRowsBy);
		WebElement e = driver.findElement(By.xpath("//*[text()='Group Rows By']/ancestor::span//following-sibling::span"));
		Utility.hoverOnElement(driver, e);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Group Rows By')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Group Rows By')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'Groups the rows')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String exp1 = "Group Rows By";
		String exp2 = "Groups the rows, by a specific time period in the “Detailed View” section of the report.\r\n" + 
				"\r\n" + 
				"For example, if “Day” is selected, then each row is a day. If “Week” is selected, each row is a week.";

		if ((exp1.equals(act1)) && (exp2.replaceAll("[\\t\\n\\r]+", " ").equals(act2))) {
			reportLogger.info("Success - Group Rows By - Customize Detailed View tooltip validation");
			test_steps.add("Sucess - Group Rows By - Customize Detailed View tooltip validation");
		} else {
			reportLogger.info("Failed - Group Rows By - Customize Detailed View tooltip validation. Expected: "+exp2+" But found: "+act2);
			test_steps.add("AssertionError Failed - Group Rows By - Customize Detailed View tooltip validation. Expected: "+exp2+" But found: "+act2);
		}
	}
	
	//This method is validate Group Rows by Options - Room Forecast Report
	public void validateGroupRowsbyOptionsRoomForecast(WebDriver driver, ArrayList<String> test_steps) {
		String[] actOptions = { "Day", "Week", "Month", "Year" };
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.GroupRowsByOptionsExpand);
		Wait.waitForElementToBeVisibile(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div"),
				driver);
		List<WebElement> expoptions = driver
				.findElements(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div/div"));
		for (int i = 0; i < actOptions.length; i++) {
			Assert.assertEquals(actOptions[i], expoptions.get(i).getText(),
					"FAIL - Group Rows By drop down options validation");
		}
		Utility.clickThroughAction(driver, res.GroupRowsByOptionsExpand);
		reportLogger.info("Success - Group Rows By drop down options validation");
		test_steps.add("Sucess - Group Rows By drop down options validation");
	}
	
	//This method is select Group Rows by Options - Room Forecast Report
	public void selectGroupRowsbyOptionsRoomForecast(WebDriver driver, String groupRowsBy, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.GroupRowsByOptionsExpand);
		Wait.waitForElementToBeVisibile(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div"),
				driver);
		List<WebElement> options = driver
				.findElements(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div/div"));
		for (int i = 0; i < options.size(); i++) {
			if (options.get(i).getText().equalsIgnoreCase(groupRowsBy)) {
				options.get(i).click();
				reportLogger.info("Given Group Rows by option selected");
				test_steps.add("Given Group Rows by option selected");
				break;
			}
		}		
	}
	
	//This method is select Group Rows by Options - Room Forecast Report
	public void validateGroupRowsbyOptionSelectionRoomForecast(WebDriver driver, String groupRowsBy, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);
		Utility.clickThroughAction(driver, res.GroupRowsByOptionsExpand);
		Wait.waitForElementToBeVisibile(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div"),
				driver);
		List<WebElement> options = driver
				.findElements(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div/div"));
		for (int i = 0; i < options.size(); i++) {
			if (options.get(i).getText().equalsIgnoreCase(groupRowsBy)) {
				options.get(i).click();
				break;
			}
		}
		String strSelected = "//*[contains(text(),'Group Rows By')]/../../..//following::span[contains(@class,'ant-select-selection-item')]";
		String selectedvalue = driver.findElement(By.xpath(strSelected)).getText();
		if (selectedvalue.equalsIgnoreCase(groupRowsBy)) {
			reportLogger.info("Success - Given Group Rows by option selected");
			test_steps.add("Success - Given Group Rows by option selected");
		}else {
			reportLogger.info("Failed - Given Group Rows by option id not selected");
			test_steps.add("AssertionError - Failed - Given Group Rows by option is not selected");
		}
	}
	
	// Advanced Inputs - Room FOrecast
	// This method is to validate Advanced Inputs availability - Room Forecast
	public void validateAdvancedInputsAvailabilityRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		try {
			Wait.WaitForElement(driver, OR_Reports.txtDailyAdvancedInputs);
			reportLogger.info("Success - Advanced Inputs is available in Room Forecast Report page");
			test_steps.add("Success - Advanced Inputs is available in Room Forecast Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Advanced Inputs is not available in Room Forecast Report page");
			test_steps.add("AssertionError Failed - Advanced Inputs is not available in Room Forecast Report page");
		}

	}

	// This method is to validate Advanced Inputs Tooltip - Room Forecast
	public void validateAdvancedInputsToolTipRoomForecast(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		Wait.WaitForElement(driver, OR_Reports.txtDailyAdvancedInputs);
		WebElement e = driver
				.findElement(By.xpath("//*[text()='Advanced Inputs']/../span/span"));
		Utility.ScrollToUp(driver);
		Utility.hoverOnElement(driver, e);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Advanced Inputs')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Advanced Inputs')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'Expand this section to view the')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String exp1 = "Advanced Inputs";
		String exp2 = "Expand this section to view the list of advanced options you can choose from, to narrow down your search and filter the report data further.";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Advanced Inputs tooltip validation");
			test_steps.add("Sucess - Advanced Inputs tooltip validation");
		} else {
			reportLogger.info("Failed - Advanced Inputs tooltip validation");
			test_steps.add("AssertionError Failed - Advanced Inputs tooltip validation");
		}
	}
	
	// This method is to validate Advanced Inputs - Include Performance Metrics availability - Room Forecast
	public void validateIncludePerformanceMetricsAvailabilityRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		String text = "//span[contains(text(),'Include Performance Metrics')]";
		try {
			Wait.WaitForElement(driver, text);
			reportLogger.info("Success - Include Performance Metrics - Advanced Inputs is available in Room Forecast Report page");
			test_steps.add("Success - Include Performance Metrics - Advanced Inputs is available in Room Forecast Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Include Performance Metrics - Advanced Inputs is not available in Room Forecast Report page");
			test_steps.add("AssertionError Failed - Include Performance Metrics - Advanced Inputs is not available in Room Forecast Report page");
		}

	}


	// This method is to validate Advanced Inputs - Include Performance Metrics Tooltip - Room Forecast
	public void validateIncludePerformanceMetricsToolTipRoomForecast(WebDriver driver, ArrayList<String> test_steps) {
		
		String text = "//span[contains(text(),'Include Performance Metrics')]";
		Wait.WaitForElement(driver, text);
		WebElement e = driver
				.findElement(By.xpath("//*[contains(text(),'Include Performance Metrics')]//following-sibling::span"));
		Utility.hoverOnElement(driver, e);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Include Performance Metrics')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Include Performance Metrics')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'Select this option to include')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String exp1 = "Include Performance Metrics (Revenue, ADR, RevPAR)";
		String exp2 = "Select this option to include the revenue metrics on the report output";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Advanced Inputs tooltip validation");
			test_steps.add("Sucess - Advanced Inputs tooltip validation");
		} else {
			reportLogger.info("Failed - Advanced Inputs tooltip validation");
			test_steps.add("AssertionError Failed - Advanced Inputs tooltip validation");
		}
	}
	
	// This method is to validate Advanced Inputs - Include Group Reservations availability - Room Forecast
	public void validateIncludeGroupReservationsAvailabilityRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {
		String text = "//span[contains(text(),'Include Group Reservations')]";
		try {
			Wait.WaitForElement(driver, text);
			reportLogger.info("Success - Include Group Reservations - Advanced Inputs is available in Room Forecast Report page");
			test_steps.add("Success - Include Group Reservations - Advanced Inputs is available in Room Forecast Report page");
		} catch (Exception e) {
			reportLogger.info("Failed - Include Group Reservations - Advanced Inputs is not available in Room Forecast Report page");
			test_steps.add("AssertionError Failed - Include Group Reservations - Advanced Inputs is not available in Room Forecast Report page");
		}

	}


	// This method is to validate Advanced Inputs - Include Group Reservations Tooltip - Room Forecast
	public void validateIncludeGroupReservationsToolTipRoomForecast(WebDriver driver, ArrayList<String> test_steps) {
		
		String text = "//span[contains(text(),'Include Group Reservations')]";
		Wait.WaitForElement(driver, text);
		WebElement e = driver
				.findElement(By.xpath("//*[text()='Include Group Reservations']//following-sibling::span"));
		Utility.hoverOnElement(driver, e);
		Wait.waitForElementToBeVisibile(
				By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Include Group Reservations')]"), driver);
		String act1 = driver
				.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Include Group Reservations')]"))
				.getText();
		String act2 = driver.findElement(By.xpath(
				"//div[@class='ant-popover-inner-content']/p[contains(text(),'Includes data for group reservations')]"))
				.getText().replaceAll("[\\t\\n\\r]+", " ");
		String exp1 = "Include Group Reservations";
		String exp2 = "Includes data for group reservations";

		if ((exp1.equals(act1)) && (exp2.equals(act2))) {
			reportLogger.info("Success - Includes data for group reservations - Advanced Inputs tooltip validation");
			test_steps.add("Sucess - Includes data for group reservations - Advanced Inputs tooltip validation");
		} else {
			reportLogger.info("Failed - Includes data for group reservations - Advanced Inputs tooltip validation");
			test_steps.add("AssertionError Failed - Includes data for group reservations - Advanced Inputs tooltip validation");
		}
	}
	
	
	
	
	// This method is to validate Return to Default availability in Room Forecast Report
	public void validateReturnToDefaultAvailabilityRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);

		try {
			Wait.WaitForElement(driver, OR_Reports.buttonReturnToDefault);
			reportLogger.info("Return to Default option is available in Room Forecast Report page");
			test_steps.add("Return to Default option is available in Room Forecast Report page");
		} catch (Exception e) {
			test_steps.add(
					"AssertionError Failed - Return to Default option is not available in Room Forecast Report page");
			reportLogger.info("Failed - Return to Default option is not available in Room Forecast Report page");
		}

		try {
			Wait.WaitForElement(driver, OR_Reports.symbolReturnToDefault);
			reportLogger.info("Return to Default symbol is available in Room Forecast Report page");
			test_steps.add("Return to Default symbol is available in Room Forecast Report page");
		} catch (Exception e) {
			test_steps.add(
					"AssertionError Failed - Return to Default symbol is not available in Room Forecast Report page");
			reportLogger.info("Failed - Return to Default symbol is not available in Room Forecast Report page");
		}
	}
	
	// This method is to validate toast message Return to Default - Room Forecast
	public void validateToastMessageReturnToDefaultRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		String message = null;
		
		clickReturnToDefault(driver, test_steps);

		if (driver.findElements(By.xpath(OR_Reports.ReturnToDefaultSeccess)).size() > 0) {
			message = report.ReturnToDefaultSeccess.getText();
			reportLogger.info("Return to Defaults Success - " + message);
			test_steps.add("Return to Defaults Success - " + message);
		} else if (driver.findElements(By.xpath(OR_Reports.ReturnToDefaultFailure)).size() > 0) {
			message = report.ReturnToDefaultFailure.getText();
			reportLogger.info("Return to Defaults Failure - " + message);
			test_steps.add("Return to Defaults Failure - " + message);
		}

	}
	
	
	public void validateReturnToDefaultForTransactionReport(WebDriver driver, ArrayList<String> test_steps, String dateRange)
			throws InterruptedException, ParseException {
		String message = null;
		Elements_Reports report = new Elements_Reports(driver);
		try {
			selectDateRange(driver, dateRange, test_steps);
			test_steps.add("<b>"+dateRange+"</b> date range selected");
			reportLogger.info("<b>"+dateRange+"</b> date range selected");

			clickReturnToDefault(driver, test_steps);
			test_steps.add("Clicked on Return to Default");
			reportLogger.info("Clicked on Return to Default");
			if (driver.findElements(By.xpath(OR_Reports.ReturnToDefaultSeccess)).size() > 0) {
				message = report.ReturnToDefaultSeccess.getText();
				reportLogger.info("Return to Defaults Success - " + message);
				test_steps.add("Return to Defaults Success - " + message);
			} else if (driver.findElements(By.xpath(OR_Reports.ReturnToDefaultFailure)).size() > 0) {
				message = report.ReturnToDefaultFailure.getText();
				reportLogger.info("Return to Defaults Failure - " + message);
				test_steps.add("Return to Defaults Failure - " + message);
			}

			Wait.wait5Second();

			if (report.dayCurrentSelected.getText().equalsIgnoreCase("Today")) {
				reportLogger
						.info("Success - Return to Default - Today is selected after clicking on Return to Default");
				test_steps.add("Success - Return to Default - Today is selected after clicking on Return to Default");
			} else {
				reportLogger
						.info("Failed - Return to Default - Today is not selected after clicking on Return to Default");
				test_steps.add(
						"AssertionError Failed - Return to Default - Today is not selected after clicking on Return to Default");
			}
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}


	}


	// This method is to validate Return to Default - Room Forecast Report
	public void validateReturnToDefaultRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);

		try {
			selectDateRange(driver, "This Week", test_steps);
			test_steps.add("This Week date range selected");
			reportLogger.info("This Week date range selected");

			clickReturnToDefault(driver, test_steps);
			test_steps.add("Clicked on Return to Default");
			reportLogger.info("Clicked on Return to Default");
			Wait.wait5Second();

			if (report.dayCurrentSelected.getText().equalsIgnoreCase("Today")) {
				reportLogger
						.info("Success - Return to Default - Today is selected after clicking on Return to Default");
				test_steps.add("Success - Return to Default - Today is selected after clicking on Return to Default");
			} else {
				reportLogger
						.info("Failed - Return to Default - Today is not selected after clicking on Return to Default");
				test_steps.add(
						"AssertionError Failed - Return to Default - Today is not selected after clicking on Return to Default");
			}
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

/*		try {
			//expandGivenAdvancedOptions(driver, "Break Out Tax-Exempt Revenue", test_steps);
			clickYesBreakOutTaxExemptRevenue(driver, test_steps);

			test_steps.add("Clicked on Yes on Break Out Tax-Exempt Revenue");
			reportLogger.info("Clicked on Yes on Break Out Tax-Exempt Revenue");

			clickReturnToDefault(driver, test_steps);
			test_steps.add("Clicked on Return to Default");
			reportLogger.info("Clicked on Return to Default");
			Wait.wait5Second();

			if (report.rdoNoBreakOutTaxExemptRevenue.isSelected()) {
				reportLogger.info("Success - Return to Default - No is selected after clicking on Return to Default");
				test_steps.add("Success - Return to Default - No is selected after clicking on Return to Default");
			} else {
				reportLogger
						.info("Failed - Return to Default - No is not selected after clicking on Return to Default");
				test_steps.add(
						"AssertionError Failed - Return to Default - No is not selected after clicking on Return to Default");
			}

		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}
*/
		try {
			selectDateRange(driver, "This Week", test_steps);
			test_steps.add("This Week date range selected");
			reportLogger.info("This Week date range selected");
			test_steps.add("This Week date range selected");

/*			expandGivenAdvancedOptions(driver, "Break Out Tax-Exempt Revenue", test_steps);
			clickYesBreakOutTaxExemptRevenue(driver, test_steps);

			test_steps.add("Clicked on Yes on Break Out Tax-Exempt Revenue");
			reportLogger.info("Clicked on Yes on Break Out Tax-Exempt Revenue");
*/
			selectBreakOutByOptionRoomForecast(driver, "Room Class", test_steps);
			reportLogger.info("Room Class is selcted in Break Out By - Select Inputs");
			test_steps.add("Room Class is selcted in Break Out By - Select Inputs");
			
			selectGroupRowsbyOptionsRoomForecast(driver, "Month", test_steps);
			reportLogger.info("Month is selcted in Group Rows By - Customize Detailed View");
			test_steps.add("Month is selcted in Group Rows By - Customize Detailed View");
			
			Utility.ScrollToUp(driver);
			clickReturnToDefault(driver, test_steps);
			test_steps.add("Clicked on Return to Default");
			reportLogger.info("Clicked on Return to Default");
			Wait.wait5Second();

			if (report.dayCurrentSelected.getText().equalsIgnoreCase("Today")) {
				reportLogger
						.info("Success - Return to Default - Today is selected after clicking on Return to Default");
				test_steps.add("Success - Return to Default - Today is selected after clicking on Return to Default");
			} else {
				reportLogger
						.info("Failed - Return to Default - Today is not selected after clicking on Return to Default");
				test_steps.add(
						"AssertionError Failed - Return to Default - Today is not selected after clicking on Return to Default");
			}

/*			if (report.rdoNoBreakOutTaxExemptRevenue.isSelected()) {
				reportLogger.info("Success - Return to Default - No is selected after clicking on Return to Default");
				test_steps.add("Success - Return to Default - No is selected after clicking on Return to Default");
			} else {
				reportLogger
						.info("Failed - Return to Default - No is not selected after clicking on Return to Default");
				test_steps.add(
						"AssertionError Failed - Return to Default - No is not selected after clicking on Return to Default");
			}
*/
			if (report.rdoBreakOutByNone.getAttribute("class").contains("checked")) {
				reportLogger.info("Success - Return to Default - None is selected in Break Out By after clicking on Return to Default");
				test_steps.add("Success - Return to Default - None is selected in Break Out By after clicking on Return to Default");
			} else {
				reportLogger
						.info("Failed - Return to Default - None is not selected in Break Out By after clicking on Return to Default");
				test_steps.add(
						"AssertionError Failed - Return to Default - None is not selected in Break Out By after clicking on Return to Default");
			}
			
			
			String strSelected = "//*[contains(text(),'Group Rows By')]/../../..//following::span[contains(@class,'ant-select-selection-item')]";
			String selectedvalue = driver.findElement(By.xpath(strSelected)).getText();
			if (selectedvalue.equalsIgnoreCase("Day")) {
				reportLogger.info("Success - Return to Default - Day is selected in Group Rows By after clicking on Return to Default");
				test_steps.add("Success - Return to Default - Day is selected in Group Rows By after clicking on Return to Default");
			}else {
				reportLogger.info("Failed - Return to Default - Day is not selected in Group Rows By after clicking on Return to Default");
				test_steps.add("Failed - Return to Default - Day is not selected in Group Rows By after clicking on Return to Default");
			}
			
			
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}

	}
	

	// This method is to validate Input default values - Room Forecast
	public void validateDefaultValuesRoomForecastReport(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException {

		Elements_Reports report = new Elements_Reports(driver);

		if (report.dayCurrentSelected.getText().equalsIgnoreCase("Today")) {
			reportLogger.info("Success - Today is selected by default in date selection");
			test_steps.add("Success - Today is selected by default in date selection");
		} else {
			reportLogger.info("Failed - Today is not selected by default in date selection");
			test_steps.add("AssertionError Failed - Today is not selected by default in date selection");
		}

		//String strText = "//div[contains(@class,'textOverflow')]";
/*		String actual = report.textOverflowBreakOutTaxExemptRevenue.getText();

		if (actual.equalsIgnoreCase("No")) {
			reportLogger.info("Success - No is selected by default in Breakout Tax Exempt Revenue");
			test_steps.add("Success - No is selected by default in Breakout Tax Exempt Revenue");
		} else {
			reportLogger.info("Failed - No is not selected by default in Breakout Tax Exempt Revenue");
			test_steps.add("AssertionError Failed - No is not selected by default in Breakout Tax Exempt Revenue");
		}
*/
		Wait.wait2Second();
		if (report.rdoBreakOutByNone.getAttribute("class").contains("checked")) {
			reportLogger.info("Success - None is selected in Break Out By default when we open the Room Forecast Report page");
			test_steps.add("Success - None is selected in Break Out By default when we open the Room Forecast Report page");
		} else {
			reportLogger
					.info("Failed - None is not selected in Break Out By default when we open the Room Forecast Report page");
			test_steps.add("AssertionError - Failed - None is not selected in Break Out By default when we open the Room Forecast Report page");
		}
		
		
		String strSelected = "//*[contains(text(),'Group Rows By')]/../../..//following::span[contains(@class,'ant-select-selection-item')]";
		String selectedvalue = driver.findElement(By.xpath(strSelected)).getText();
		if (selectedvalue.equalsIgnoreCase("Day")) {
			reportLogger.info("Success - Day is selected in Group Rows By default when we open the Room FOrecast Report page");
			test_steps.add("Success - Day is selected in Group Rows By default when we open the Room FOrecast Report page");
		}else {
			reportLogger.info("Failed - Day is not selected in Group Rows By default when we open the Room FOrecast Report page");
			test_steps.add("AssertionError - Failed - Day is not selected in Group Rows By default when we open the Room FOrecast Report page");
		}		
	}
	
	
	
	
	
	
	
	
	
	// This method is to validate Loading state - Room Forecast Report
	public void validateLoadingStateRoomForecast(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports res = new Elements_Reports(driver);

		try {
			res.RunReport.click();
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.LoadingReportMessage), driver, 10);
			reportLogger.info("Success - Loading state Room Forecast Report");
			test_steps.add("Success - Loading state Room Forecast Report");
		} catch (Exception e) {
			reportLogger.info("Failed - Loading state Room Forecast Report validation");
			test_steps.add(
					"AssertionError - Failed - Loading state Room Forecast Report validation" + "<br>" + e.toString());
		}
	}
	
	// This method is to validate Grey bar after clicking Run Report - Room Forecast
	public void validateGreyBarAfterClickingRunReportRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		
		String daySelected = report.dayCurrentSelected.getText();
		String startDateSelected = getStartDate(driver, test_steps);
		String endDateSelected = getEndDate(driver, test_steps);
		//String dateSelected = report.dateDailyFlash.getAttribute("value");
		String breakOutByOption = "";
		String[] breakOutBy = {"None", "Room Class", "Market Segment"};
		
		for (int i = 0; i < breakOutBy.length; i++) {
			String strBreak = "//span[contains(text(),'"+breakOutBy[i]+"')]//preceding-sibling::span";
			WebElement selectBreakOutBy = driver.findElement(By.xpath(strBreak));
			if (selectBreakOutBy.isSelected()) {
				breakOutByOption = breakOutBy[i];
				break;
			}
		}
		
		String groupRowsByOption = report.groupRowsBySelected.getText();
		//expandGivenAdvancedOptions(driver, "Break Out Tax-Exempt Revenue", test_steps);
		//String textBreakOutTaxExemptRevenue = report.textOverflowBreakOutTaxExemptRevenue.getText();
		
		clickOnRunReport(driver);
		
		try {
			String effectiveDate = "(//*[contains(text(),'Date Range')])[1]";
			Wait.waitForElementToBeVisibile(By.xpath(effectiveDate), driver, 15);
			reportLogger.info("Date Range is available in Grey bar after clicking on Run Report");
			test_steps.add("Date Range is available in Grey bar after clicking on Run Report");
		}catch(Exception e) {
			reportLogger.info("Failed - Date Range is not available in Grey bar after clicking on Run Report");
			test_steps.add("AssertionError Failed - Date Range is not available in Grey bar after clicking on Run Report");
		}
		
		String dateRange = daySelected+" | "+startDateSelected+" to "+endDateSelected;
		String texDateRange = "//*[contains(text(),'"+dateRange+"')]";
		try {
			Wait.waitForElementToBeVisibile(By.xpath(texDateRange), driver, 15);
			reportLogger.info("Effective Date text "+dateRange+" is available in Grey bar after clicking on Run Report");
			test_steps.add("Effective Date text "+dateRange+" is available in Grey bar after clicking on Run Report");
		}catch(Exception e) {
			reportLogger.info("Failed - Effective Date text "+dateRange+" is not available in Grey bar after clicking on Run Report");
			test_steps.add("AssertionError Failed - Effective Date text "+dateRange+" is not available in Grey bar after clicking on Run Report");
		}
		
/*		try {
			String BreakOutTaxExemptRevenue = "(//*[contains(text(),'Break Out Tax-Exempt Revenue')])[1]";
			Wait.waitForElementToBeVisibile(By.xpath(BreakOutTaxExemptRevenue), driver, 15);
			reportLogger.info("Break Out Tax-Exempt Revenue is available in Grey bar after clicking on Run Report");
			test_steps.add("Break Out Tax-Exempt Revenue is available in Grey bar after clicking on Run Report");
		}catch(Exception e) {
			reportLogger.info("Failed - Break Out Tax-Exempt Revenue is not available in Grey bar after clicking on Run Report");
			test_steps.add("AssertionError Failed - Break Out Tax-Exempt Revenue is not available in Grey bar after clicking on Run Report");
		}
*/
		
/*		try {
			String buttonEdit = "//span[contains(text(),'Edit')]";
			Wait.waitForElementToBeVisibile(By.xpath(buttonEdit), driver, 15);
			reportLogger.info("Edit button is available in Grey bar after clicking on Run Report");
			test_steps.add("Edit button is available in Grey bar after clicking on Run Report");
		}catch(Exception e) {
			reportLogger.info("Failed - Edit button is not available in Grey bar after clicking on Run Report");
			test_steps.add("AssertionError Failed - Edit button is not available in Grey bar after clicking on Run Report");
		}
*/
		try {
			String strBreakOutBy = "//*[contains(text(),'Breakout By')]";
			Wait.waitForElementToBeVisibile(By.xpath(strBreakOutBy), driver, 15);
			reportLogger.info("Breakout By is available in Grey bar after clicking on Run Report");
			test_steps.add("Breakout By is available in Grey bar after clicking on Run Report");
		}catch(Exception e) {
			reportLogger.info("Failed - Breakout By is not available in Grey bar after clicking on Run Report");
			test_steps.add("AssertionError Failed - Breakout By is not available in Grey bar after clicking on Run Report");
		}
		
		String strBreakOutByOptionGreyBar = "//*[contains(text(),'"+breakOutByOption+"')]";
		try {
			Wait.waitForElementToBeVisibile(By.xpath(strBreakOutByOptionGreyBar), driver, 15);
			reportLogger.info("Break Out By option "+breakOutByOption+" is available in Grey bar after clicking on Run Report");
			test_steps.add("Break Out By option "+breakOutByOption+" is available in Grey bar after clicking on Run Report");
		}catch(Exception e) {
			reportLogger.info("Failed - Break Out By option "+breakOutByOption+" is not available in Grey bar after clicking on Run Report");
			test_steps.add("AssertionError Failed - Break Out By option "+breakOutByOption+" is not available in Grey bar after clicking on Run Report");
		}
		
		
		try {
			String strGroupBy = "(//*[contains(text(),'Group Rows By')])[1]";
			Wait.waitForElementToBeVisibile(By.xpath(strGroupBy), driver, 15);
			reportLogger.info("Group Rows By is available in Grey bar after clicking on Run Report");
			test_steps.add("Group Rows By is available in Grey bar after clicking on Run Report");
		}catch(Exception e) {
			reportLogger.info("Failed - Group Rows By is not available in Grey bar after clicking on Run Report");
			test_steps.add("AssertionError Failed - Group Rows By is not available in Grey bar after clicking on Run Report");
		}
		
		String strGroupRowsByOptionGreyBar = "//p[contains(text(),'"+groupRowsByOption+"')]";
		try {
			Wait.waitForElementToBeVisibile(By.xpath(strGroupRowsByOptionGreyBar), driver, 15);
			reportLogger.info("Group Rows By option "+groupRowsByOption+" is available in Grey bar after clicking on Run Report");
			test_steps.add("Group Rows By option "+groupRowsByOption+" is available in Grey bar after clicking on Run Report");
		}catch(Exception e) {
			reportLogger.info("Failed - Group Rows By option "+groupRowsByOption+" is not available in Grey bar after clicking on Run Report");
			test_steps.add("AssertionError Failed - Group Rows By option "+groupRowsByOption+" is not available in Grey bar after clicking on Run Report");
		}
		
		
	}
	
	// This method is to validate Export Loading message - Room FOrecast Report
	public void validateExportLoadingMessageRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		String downloadMessage = "//*[contains(text(),'Report Download In Progress')]";
		
		String strButtonExcel = "//span[text()='Excel']/..";
		String strButtonPdf = "//span[text()='PDF']/..";
		clickOnRunReport(driver);
		Wait.WaitForElement(driver, strButtonExcel);
		WebElement buttonExcel = driver.findElement(By.xpath(strButtonExcel));
		WebElement buttonPDF = driver.findElement(By.xpath(strButtonPdf));
		if (buttonExcel.isEnabled()) {
			buttonExcel.click();
			try {
				Wait.waitForElementToBeVisibile(By.xpath(downloadMessage), driver, 10);			
				reportLogger.info("Success - Excel Export Loading message validated successfully");
				test_steps.add("Success - Excel Export Loading message validated successfully");
			}catch(Exception e) {
				reportLogger.info("Failed Excel Export Loading message validation");
				test_steps.add("AssertionError Failed Excel Export Loading message validation");
			}
			
		}else {
			reportLogger.info("Excel button is not enabled after clicking on Run Report");
			test_steps.add("AssertionError Excel button is not enabled after clicking on Run Report");
		}
		Wait.wait2Second();
		try {
			driver.findElement(By.xpath("//*[contains(text(),'Error')]")).click();
		}catch(Exception e) {
			
		}
		try {
			driver.findElement(By.xpath("//*[@data-icon='close']")).click();
		}catch(Exception e) {
			
		}
		if (buttonPDF.isEnabled()) {
			buttonPDF.click();
			try {
				Wait.waitForElementToBeVisibile(By.xpath(downloadMessage), driver, 10);			
				reportLogger.info("Success - PDF Export Loading message validated successfully");
				test_steps.add("Success - PDF Export Loading message validated successfully");
			}catch(Exception e) {
				reportLogger.info("Failed PDF Export Loading message validation");
				test_steps.add("AssertionError Failed PDF Export Loading message validation");
			}
		}else {
			reportLogger.info("PDF button is not enabled after clicking on Run Report");
			test_steps.add("AssertionError PDF button is not enabled after clicking on Run Report");
		}
		try {
			driver.findElement(By.xpath("//*[contains(text(),'Error')]")).click();
		}catch(Exception e) {
			
		}
		
		try {
			driver.findElement(By.xpath("//*[@data-icon='close']")).click();
		}catch(Exception e) {
			
		}
	}
	
	// This method is to validate Export Success/Failure Toast Messages - Room Forecast Report
	public void validateExportSuccessFailureMessageRoomForecast(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		String downloadSuccessMessage = "Success";
		String downloadFailureMessage = "Failure";
		
		String strButtonExcel = "//span[text()='Excel']/..";
		String strButtonPdf = "//span[text()='PDF']/..";
		clickOnRunReport(driver);
		Wait.WaitForElement(driver, strButtonExcel);
		WebElement buttonExcel = driver.findElement(By.xpath(strButtonExcel));
		WebElement buttonPDF = driver.findElement(By.xpath(strButtonPdf));
		Wait.wait2Second();
		if (buttonExcel.isEnabled()) {
			buttonExcel.click();
			try {
				Wait.waitForElementToBeVisibile(By.xpath(downloadSuccessMessage), driver, 10);		
				reportLogger.info("Success - Excel Export Success Toast Message validated successfully");
				test_steps.add("Success - Excel Export Success Toast Message validated successfully");
			}catch(Exception e) {
				try {
					Wait.waitForElementToBeVisibile(By.xpath(downloadFailureMessage), driver, 10);		
					reportLogger.info("Success - Excel Export Failure Toast Message validated successfully");
					test_steps.add("Success - Excel Export Failure Toast Message validated successfully");
				}catch(Exception e1) {
					reportLogger.info("Failed - Excel Export Success/Failure Toast Messages validation");
					test_steps.add("AssertionError Failed - Excel Export Success/Failure Toast Messages validation");
				}
			}
			
		}else {
			reportLogger.info("Excel button is not enabled");
			test_steps.add("AssertionError Excel button is not enabled");
		}
		Wait.wait2Second();
		try {
			driver.findElement(By.xpath("//*[contains(text(),'Error')]")).click();
		}catch(Exception e) {
			
		}
		if (buttonPDF.isEnabled()) {
			buttonPDF.click();
			try {
				Wait.waitForElementToBeVisibile(By.xpath(downloadSuccessMessage), driver, 10);		
				reportLogger.info("Success - PDF Export Success Toast Message validated successfully");
				test_steps.add("Success - PDF Export Success Toast Message validated successfully");
			}catch(Exception e) {
				try {
					Wait.waitForElementToBeVisibile(By.xpath(downloadFailureMessage), driver, 10);		
					reportLogger.info("Success - PDF Export Failure Toast Message validated successfully");
					test_steps.add("Success - PDF Export Failure Toast Message validated successfully");
				}catch(Exception e1) {
					reportLogger.info("Failed - PDF Export Success/Failure Toast Messages validation");
					test_steps.add("AssertionError Failed - PDF Export Success/Failure Toast Messages validation");
				}
			}
			
		}else {
			reportLogger.info("PDF button is not enabled");
			test_steps.add("AssertionError PDF button is not enabled");
		}	
	}
	
	
	
	
	public void validateDailyFlashReportRevenueTypes(WebDriver driver, HashMap<String, ArrayList<String>> beforeRevenueDetails,
			HashMap<String, ArrayList<String>> afterRevenueDetails, HashMap<String, String> ledgerAccounts,
			HashMap<String, Double> ledgerAmounts, HashMap<String, String> folioItemValues, int numberOfRooms,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Set<String> ledgers = ledgerAccounts.keySet();

		for (String ledger : ledgers) {

			//ArrayList<String> date = new ArrayList<>();
			Double beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
			Double afterSelectedDate, afterMonthToDate, afterYearToDate;
			reportLogger.info("Ledger: "+ledger);
			beforeSelectedDate = Double.parseDouble(beforeRevenueDetails.get(ledger).get(0).replaceAll(",", ""));
			beforeMonthToDate = Double.parseDouble(beforeRevenueDetails.get(ledger).get(1).replaceAll(",", ""));
			beforeYearToDate = Double.parseDouble(beforeRevenueDetails.get(ledger).get(2).replaceAll(",", ""));
			reportLogger.info("Before: "+beforeSelectedDate+"  "+beforeMonthToDate+"  "+beforeYearToDate);
			
			afterSelectedDate = Double.parseDouble(afterRevenueDetails.get(ledger).get(0).replaceAll(",", ""));
			afterMonthToDate = Double.parseDouble(afterRevenueDetails.get(ledger).get(1).replaceAll(",", ""));
			afterYearToDate = Double.parseDouble(afterRevenueDetails.get(ledger).get(2).replaceAll(",", ""));
			reportLogger.info("After: "+afterSelectedDate+"  "+afterMonthToDate+"  "+afterYearToDate);
			//Double expValue = (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms);
			Double expValue = ledgerAmounts.get(ledger);
			
			//Double selectedDateValue = afterSelectedDate-beforeSelectedDate;
			Double selectedDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
			if (selectedDateValue.equals(expValue)) {
				reportLogger.info("Revenue Type - "+ledger + " amount validated successfully for Selected date");
				test_steps.add("Revenue Type - "+ledger + " amount validated successfully for Selected date");
			}else {
				reportLogger.info("Failed - "+"Revenue Type - "+ledger + " amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
				test_steps.add("AssertionError - Failed - "+"Revenue Type - "+ledger + " amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
			}
			
			Double monthToDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
			if (monthToDateValue.equals(expValue)) {
				reportLogger.info("Revenue Type - "+ledger + " amount validated successfully for Month To date");
				test_steps.add("Revenue Type - "+ledger + " amount validated successfully for Month To date");
			}else {
				reportLogger.info("Failed - "+"Revenue Type - "+ledger + " amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
				test_steps.add("AssertionError - Failed - "+"Revenue Type - "+ledger + " amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
			}
			
			Double yearToDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
			if (yearToDateValue.equals(expValue)) {
				reportLogger.info("Revenue Type - "+ledger + " amount validated successfully for Year To date");
				test_steps.add("Revenue Type - "+ledger + " amount validated successfully for Year To date");
			}else {
				reportLogger.info("Failed - "+"Revenue Type - "+ledger + " amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
				test_steps.add("AssertionError - Failed - "+"Revenue Type - "+ledger + " amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
			}
		}
		
		try {
			
			Double expTotalRevenue = (ledgerAmounts.get("Room Charges")+ledgerAmounts.get("Incidentals")+ledgerAmounts.get("Taxes")+ledgerAmounts.get("Fees"));
			
			reportLogger.info("Total before: "+beforeRevenueDetails);
			reportLogger.info("Total After: "+afterRevenueDetails);
			
			Double beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
			Double afterSelectedDate, afterMonthToDate, afterYearToDate;
			beforeSelectedDate = Double.parseDouble(beforeRevenueDetails.get("Revenue Types Totals").get(0).replaceAll(",", ""));
			beforeMonthToDate = Double.parseDouble(beforeRevenueDetails.get("Revenue Types Totals").get(1).replaceAll(",", ""));
			beforeYearToDate = Double.parseDouble(beforeRevenueDetails.get("Revenue Types Totals").get(2).replaceAll(",", ""));
			reportLogger.info("Before: "+beforeSelectedDate+"  "+beforeMonthToDate+"  "+beforeYearToDate);
			
			afterSelectedDate = Double.parseDouble(afterRevenueDetails.get("Revenue Types Totals").get(0).replaceAll(",", ""));
			afterMonthToDate = Double.parseDouble(afterRevenueDetails.get("Revenue Types Totals").get(1).replaceAll(",", ""));
			afterYearToDate = Double.parseDouble(afterRevenueDetails.get("Revenue Types Totals").get(2).replaceAll(",", ""));
			reportLogger.info("After: "+afterSelectedDate+"  "+afterMonthToDate+"  "+afterYearToDate);
			//Double expValue = (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms);
			
			Double selectedDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
			if (selectedDateValue.equals(expTotalRevenue)) {
				reportLogger.info("Revenue Type - Revenue Types Totals amount validated successfully for Selected date");
				test_steps.add("Revenue Type - Revenue Types Totals amount validated successfully for Selected date");
			}else {
				reportLogger.info("Failed - "+"Revenue Type - Revenue Types Totals amount validation for Selected date. Expected: "+expTotalRevenue+" But found: "+selectedDateValue);
				test_steps.add("AssertionError - Failed - "+"Revenue Type - Revenue Types Totals amount validation for Selected date. Expected: "+expTotalRevenue+" But found: "+selectedDateValue);
			}
			
			Double monthToDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
			if (monthToDateValue.equals(expTotalRevenue)) {
				reportLogger.info("Revenue Type - Revenue Types Totals amount validated successfully for Month To date");
				test_steps.add("Revenue Type - Revenue Types Totals amount validated successfully for Month To date");
			}else {
				reportLogger.info("Failed - "+"Revenue Type - Revenue Types Totals amount validation for Month To date. Expected: "+expTotalRevenue+" But found: "+monthToDateValue);
				test_steps.add("AssertionError - Failed - "+"Revenue Type - Revenue Types Totals amount validation for Month To date. Expected: "+expTotalRevenue+" But found: "+monthToDateValue);
			}
			
			Double yearToDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
			if (yearToDateValue.equals(expTotalRevenue)) {
				reportLogger.info("Revenue Type - Revenue Types Totals amount validated successfully for Year To date");
				test_steps.add("Revenue Type - Revenue Types Totals amount validated successfully for Year To date");
			}else {
				reportLogger.info("Failed - "+"Revenue Type - Revenue Types Totals amount validation for Year To date. Expected: "+expTotalRevenue+" But found: "+yearToDateValue);
				test_steps.add("AssertionError - Failed - "+"Revenue Type - Revenue Types Totals amount validation for Year To date. Expected: "+expTotalRevenue+" But found: "+yearToDateValue);
			}
		}catch (Exception e) {
			reportLogger.info(e.toString());
			test_steps.add(e.toString());
		}


	}
	
	
	public void validateDailyFlashReportRoomsRevenue(WebDriver driver, HashMap<String, ArrayList<String>> beforeRoomsRevenue,
			HashMap<String, ArrayList<String>> afterRoomsRevenue, HashMap<String, String> ledgerAccounts,
			HashMap<String, Double> ledgerAmounts, HashMap<String, String> folioItemValues, int numberOfRooms,
			String isTaxExempt,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {
		
		String ledger = "Room Charges";
		
		//ArrayList<String> date = new ArrayList<>();

		Double expValue = 0.0;
		String[] rooms = {"Exempt", "Taxable"};
		
		for (int i = 0; i < rooms.length; i++) {
			Double beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
			Double afterSelectedDate, afterMonthToDate, afterYearToDate;
			reportLogger.info("Ledger: "+ledger);
			beforeSelectedDate = Double.parseDouble(beforeRoomsRevenue.get(rooms[i]).get(0).replaceAll(",", ""));
			beforeMonthToDate = Double.parseDouble(beforeRoomsRevenue.get(rooms[i]).get(1).replaceAll(",", ""));
			beforeYearToDate = Double.parseDouble(beforeRoomsRevenue.get(rooms[i]).get(2).replaceAll(",", ""));
			reportLogger.info("Before: "+beforeSelectedDate+"  "+beforeMonthToDate+"  "+beforeYearToDate);
			
			afterSelectedDate = Double.parseDouble(afterRoomsRevenue.get(rooms[i]).get(0).replaceAll(",", ""));
			afterMonthToDate = Double.parseDouble(afterRoomsRevenue.get(rooms[i]).get(1).replaceAll(",", ""));
			afterYearToDate = Double.parseDouble(afterRoomsRevenue.get(rooms[i]).get(2).replaceAll(",", ""));
			reportLogger.info("After: "+afterSelectedDate+"  "+afterMonthToDate+"  "+afterYearToDate);
			//Double expValue = (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms);
			
			if (isTaxExempt.equalsIgnoreCase("Yes")) {
				if (rooms[i].equalsIgnoreCase("Exempt")) {
					expValue = ledgerAmounts.get(ledger);
				}
			}else {
				if (rooms[i].equalsIgnoreCase("Taxable")) {
					expValue = ledgerAmounts.get(ledger);
				}
			}
			
			Double selectedDateValue = afterSelectedDate-beforeSelectedDate;
			if (selectedDateValue.equals(expValue)) {
				reportLogger.info("Rooms Revenue - "+rooms[i] + " amount validated successfully for Selected date");
				test_steps.add("Rooms Revenue - "+rooms[i] + " amount validated successfully for Selected date");
			}else {
				reportLogger.info("Failed - "+"Rooms Revenue - "+rooms[i] + " amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
				test_steps.add("AssertionError - Failed - "+"Rooms Revenue - "+rooms[i] + " amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
			}
			
			Double monthToDateValue = afterSelectedDate-beforeSelectedDate;
			if (monthToDateValue.equals(expValue)) {
				reportLogger.info("Rooms Revenue - "+rooms[i] + " amount validated successfully for Month To date");
				test_steps.add("Rooms Revenue - "+rooms[i] + " amount validated successfully for Month To date");
			}else {
				reportLogger.info("Failed - "+"Rooms Revenue - "+rooms[i] + " amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
				test_steps.add("AssertionError - Failed - "+"Rooms Revenue - "+rooms[i] + " amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
			}
			
			Double yearToDateValue = afterSelectedDate-beforeSelectedDate;
			if (yearToDateValue.equals(expValue)) {
				reportLogger.info("Rooms Revenue - "+rooms[i] + " amount validated successfully for Year To date");
				test_steps.add("Rooms Revenue - "+rooms[i] + " amount validated successfully for Year To date");
			}else {
				reportLogger.info("Failed - "+"Rooms Revenue - "+rooms[i] + " amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
				test_steps.add("AssertionError - Failed - "+"Rooms Revenue - "+rooms[i] + " amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
			}
		}
		
		
		try {
			
			Double expTotalRevenue = (ledgerAmounts.get("Room Charges"));
			
			reportLogger.info("Total before: "+beforeRoomsRevenue);
			reportLogger.info("Total After: "+afterRoomsRevenue);
			
			Double beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
			Double afterSelectedDate, afterMonthToDate, afterYearToDate;
			beforeSelectedDate = Double.parseDouble(beforeRoomsRevenue.get("Rooms Revenue Totals").get(0).replaceAll(",", ""));
			beforeMonthToDate = Double.parseDouble(beforeRoomsRevenue.get("Rooms Revenue Totals").get(1).replaceAll(",", ""));
			beforeYearToDate = Double.parseDouble(beforeRoomsRevenue.get("Rooms Revenue Totals").get(2).replaceAll(",", ""));
			reportLogger.info("Before: "+beforeSelectedDate+"  "+beforeMonthToDate+"  "+beforeYearToDate);
			
			afterSelectedDate = Double.parseDouble(afterRoomsRevenue.get("Rooms Revenue Totals").get(0).replaceAll(",", ""));
			afterMonthToDate = Double.parseDouble(afterRoomsRevenue.get("Rooms Revenue Totals").get(1).replaceAll(",", ""));
			afterYearToDate = Double.parseDouble(afterRoomsRevenue.get("Rooms Revenue Totals").get(2).replaceAll(",", ""));
			reportLogger.info("After: "+afterSelectedDate+"  "+afterMonthToDate+"  "+afterYearToDate);
			//Double expValue = (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms);
			
			Double selectedDateValue = afterSelectedDate-beforeSelectedDate;
			if (selectedDateValue.equals(expTotalRevenue)) {
				reportLogger.info("Rooms Revenue - Rooms Revenue Totals amount validated successfully for Selected date");
				test_steps.add("Rooms Revenue - Rooms Revenue Totals amount validated successfully for Selected date");
			}else {
				reportLogger.info("Failed - "+"Rooms Revenue - Rooms Revenue Totals amount validation for Selected date. Expected: "+expTotalRevenue+" But found: "+selectedDateValue);
				test_steps.add("AssertionError - Failed - "+"Rooms Revenue - Rooms Revenue Totals amount validation for Selected date. Expected: "+expTotalRevenue+" But found: "+selectedDateValue);
			}
			
			Double monthToDateValue = afterSelectedDate-beforeSelectedDate;
			if (monthToDateValue.equals(expTotalRevenue)) {
				reportLogger.info("Rooms Revenue - Rooms Revenue Totals amount validated successfully for Month To date");
				test_steps.add("Rooms Revenue - Rooms Revenue Totals amount validated successfully for Month To date");
			}else {
				reportLogger.info("Failed - "+"Rooms Revenue - Rooms Revenue Totals amount validation for Month To date. Expected: "+expTotalRevenue+" But found: "+monthToDateValue);
				test_steps.add("AssertionError - Failed - "+"Rooms Revenue - Rooms Revenue Totals amount validation for Month To date. Expected: "+expTotalRevenue+" But found: "+monthToDateValue);
			}
			
			Double yearToDateValue = afterSelectedDate-beforeSelectedDate;
			if (yearToDateValue.equals(expTotalRevenue)) {
				reportLogger.info("Rooms Revenue - Rooms Revenue Totals amount validated successfully for Year To date");
				test_steps.add("Rooms Revenue - Rooms Revenue Totals amount validated successfully for Year To date");
			}else {
				reportLogger.info("Failed - "+"Rooms Revenue - Rooms Revenue Totals amount validation for Year To date. Expected: "+expTotalRevenue+" But found: "+yearToDateValue);
				test_steps.add("AssertionError - Failed - "+"Rooms Revenue - Rooms Revenue Totals amount validation for Year To date. Expected: "+expTotalRevenue+" But found: "+yearToDateValue);
			}
		}catch (Exception e) {
			reportLogger.info(e.toString());
			test_steps.add(e.toString());
		}


	}
	
	
	
	public void validateDailyFlashReportPaymentsMethodTypes(WebDriver driver, String PaymentMethod, HashMap<String, ArrayList<String>> beforePaymentDetails,
			HashMap<String, ArrayList<String>> afterPaymentDetails, HashMap<String, String> ledgerAccounts,
			HashMap<String, Double> ledgerAmounts, HashMap<String, String> folioItemValues, int numberOfRooms,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Set<String> ledgers = ledgerAccounts.keySet();
		ArrayList<String> paymentTypes = new ArrayList<>();
		paymentTypes.add("Cash"); paymentTypes.add("Check"); paymentTypes.add("Credit Cards");
		
		Double beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
		Double afterSelectedDate, afterMonthToDate, afterYearToDate;
		Double expValue = (Double.parseDouble(Utility.convertDollarToNormalAmount(driver,folioItemValues.get(PaymentMethod))));
		
		reportLogger.info("Before: "+beforePaymentDetails);
		reportLogger.info("After: "+afterPaymentDetails);
		
		if (PaymentMethod.equalsIgnoreCase("Cash")) {
			beforeSelectedDate = Double.parseDouble(beforePaymentDetails.get("Cash").get(0).replaceAll(",", ""));
			beforeMonthToDate = Double.parseDouble(beforePaymentDetails.get("Cash").get(1).replaceAll(",", ""));
			beforeYearToDate = Double.parseDouble(beforePaymentDetails.get("Cash").get(2).replaceAll(",", ""));
			
			afterSelectedDate = Double.parseDouble(afterPaymentDetails.get("Cash").get(0).replaceAll(",", ""));
			afterMonthToDate = Double.parseDouble(afterPaymentDetails.get("Cash").get(1).replaceAll(",", ""));
			afterYearToDate = Double.parseDouble(afterPaymentDetails.get("Cash").get(2).replaceAll(",", ""));
		}else if(PaymentMethod.equalsIgnoreCase("Check")) {
			beforeSelectedDate = Double.parseDouble(beforePaymentDetails.get("Check").get(0).replaceAll(",", ""));
			beforeMonthToDate = Double.parseDouble(beforePaymentDetails.get("Check").get(1).replaceAll(",", ""));
			beforeYearToDate = Double.parseDouble(beforePaymentDetails.get("Check").get(2).replaceAll(",", ""));
			
			afterSelectedDate = Double.parseDouble(afterPaymentDetails.get("Check").get(0).replaceAll(",", ""));
			afterMonthToDate = Double.parseDouble(afterPaymentDetails.get("Check").get(1).replaceAll(",", ""));
			afterYearToDate = Double.parseDouble(afterPaymentDetails.get("Check").get(2).replaceAll(",", ""));
		}else if(PaymentMethod.equalsIgnoreCase("MC") || PaymentMethod.equalsIgnoreCase("Visa") || PaymentMethod.equalsIgnoreCase("Amex")) {
			beforeSelectedDate = Double.parseDouble(beforePaymentDetails.get("Credit Cards").get(0).replaceAll(",", ""));
			beforeMonthToDate = Double.parseDouble(beforePaymentDetails.get("Credit Cards").get(1).replaceAll(",", ""));
			beforeYearToDate = Double.parseDouble(beforePaymentDetails.get("Credit Cards").get(2).replaceAll(",", ""));
			
			afterSelectedDate = Double.parseDouble(afterPaymentDetails.get("Credit Cards").get(0).replaceAll(",", ""));
			afterMonthToDate = Double.parseDouble(afterPaymentDetails.get("Credit Cards").get(1).replaceAll(",", ""));
			afterYearToDate = Double.parseDouble(afterPaymentDetails.get("Credit Cards").get(2).replaceAll(",", ""));
		}else {
			beforeSelectedDate = Double.parseDouble(beforePaymentDetails.get("Other Payment Methods").get(0).replaceAll(",", ""));
			beforeMonthToDate = Double.parseDouble(beforePaymentDetails.get("Other Payment Methods").get(1).replaceAll(",", ""));
			beforeYearToDate = Double.parseDouble(beforePaymentDetails.get("Other Payment Methods").get(2).replaceAll(",", ""));
			
			afterSelectedDate = Double.parseDouble(afterPaymentDetails.get("Other Payment Methods").get(0).replaceAll(",", ""));
			afterMonthToDate = Double.parseDouble(afterPaymentDetails.get("Other Payment Methods").get(1).replaceAll(",", ""));
			afterYearToDate = Double.parseDouble(afterPaymentDetails.get("Other Payment Methods").get(2).replaceAll(",", ""));
		}
		
		reportLogger.info("beforeSelectedDate: "+beforeSelectedDate);
		reportLogger.info("beforeMonthToDate: "+beforeMonthToDate);
		reportLogger.info("beforeYearToDate: "+beforeYearToDate);
		reportLogger.info("afterSelectedDate: "+afterSelectedDate);
		reportLogger.info("afterMonthToDate: "+afterMonthToDate);
		reportLogger.info("afterYearToDate: "+afterYearToDate);
		
		Double selectedDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
		if (selectedDateValue.equals(expValue)) {
			
			reportLogger.info("Payments Method Type - "+PaymentMethod + " amount validated successfully for Selected date");
			test_steps.add("Payments Method Type - "+PaymentMethod + " amount validated successfully for Selected date");
		}else {
			reportLogger.info("Failed - "+"Payments Method Type - "+PaymentMethod + " amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
			test_steps.add("AssertionError - Failed - "+"Payments Method Type - "+PaymentMethod + " amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
		}
		
		Double monthToDateValue = Utility.getRoundOffValueAfterDecimal(afterMonthToDate-beforeMonthToDate);
		if (monthToDateValue.equals(expValue)) {
			reportLogger.info("Payments Method Type - "+PaymentMethod + " amount validated successfully for Month To date");
			test_steps.add("Payments Method Type - "+PaymentMethod + " amount validated successfully for Month To date");
		}else {
			reportLogger.info("Failed - "+"Payments Method Type - "+PaymentMethod + " amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
			test_steps.add("AssertionError - Failed - "+"Payments Method Type - "+PaymentMethod + " amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
		}
		
		Double yearToDateValue = Utility.getRoundOffValueAfterDecimal(afterYearToDate-beforeYearToDate);
		if (yearToDateValue.equals(expValue)) {
			reportLogger.info("Payments Method Type - "+PaymentMethod + " amount validated successfully for Year To date");
			test_steps.add("Payments Method Type - "+PaymentMethod + " amount validated successfully for Year To date");
		}else {
			reportLogger.info("Failed - "+"Payments Method Type - "+PaymentMethod + " amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
			test_steps.add("AssertionError - Failed - "+"Payments Method Type - "+PaymentMethod + " amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
		}
		

		try {

			//expValue = (Double.parseDouble(folioItemValues.get(PaymentMethod)));
			
			reportLogger.info("Before: "+beforePaymentDetails);
			reportLogger.info("After: "+afterPaymentDetails);
			
			beforeSelectedDate = Double.parseDouble(beforePaymentDetails.get("Payments Method Types Totals").get(0).replaceAll(",", ""));
			beforeMonthToDate = Double.parseDouble(beforePaymentDetails.get("Payments Method Types Totals").get(1).replaceAll(",", ""));
			beforeYearToDate = Double.parseDouble(beforePaymentDetails.get("Payments Method Types Totals").get(2).replaceAll(",", ""));
			
			afterSelectedDate = Double.parseDouble(afterPaymentDetails.get("Payments Method Types Totals").get(0).replaceAll(",", ""));
			afterMonthToDate = Double.parseDouble(afterPaymentDetails.get("Payments Method Types Totals").get(1).replaceAll(",", ""));
			afterYearToDate = Double.parseDouble(afterPaymentDetails.get("Payments Method Types Totals").get(2).replaceAll(",", ""));
			
			reportLogger.info("beforeSelectedDate: "+beforeSelectedDate);
			reportLogger.info("beforeMonthToDate: "+beforeMonthToDate);
			reportLogger.info("beforeYearToDate: "+beforeYearToDate);
			reportLogger.info("afterSelectedDate: "+afterSelectedDate);
			reportLogger.info("afterMonthToDate: "+afterMonthToDate);
			reportLogger.info("afterYearToDate: "+afterYearToDate);
			
			selectedDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
			if (selectedDateValue.equals(expValue)) {
				reportLogger.info("Payments Method Type - Payments Method Types Totals amount validated successfully for Selected date");
				test_steps.add("Payments Method Type - Payments Method Types Totals amount validated successfully for Selected date");
			}else {
				reportLogger.info("Failed - "+"Payments Method Type - Payments Method Types Totals amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
				test_steps.add("AssertionError - Failed - "+"Payments Method Type - Payments Method Types Totals amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
			}
			
			monthToDateValue = Utility.getRoundOffValueAfterDecimal(afterMonthToDate-beforeMonthToDate);
			if (monthToDateValue.equals(expValue)) {
				reportLogger.info("Payments Method Type - Payments Method Types Totals amount validated successfully for Month To date");
				test_steps.add("Payments Method Type - Payments Method Types Totals amount validated successfully for Month To date");
			}else {
				reportLogger.info("Failed - "+"Payments Method Type - Payments Method Types Totals amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
				test_steps.add("AssertionError - Failed - "+"Payments Method Type - Payments Method Types Totals amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
			}
			
			yearToDateValue = Utility.getRoundOffValueAfterDecimal(afterYearToDate-beforeYearToDate);
			if (yearToDateValue.equals(expValue)) {
				reportLogger.info("Payments Method Type - Payments Method Types Totals amount validated successfully for Year To date");
				test_steps.add("Payments Method Type - Payments Method Types Totals amount validated successfully for Year To date");
			}else {
				reportLogger.info("Failed - "+"Payments Method Type - Payments Method Types Totals amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
				test_steps.add("AssertionError - Failed - "+"Payments Method Type - Payments Method Types Totals amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
			}
		}catch(Exception e) {
			test_steps.add("AssertionError - "+e.toString());
			reportLogger.info("AssertionError - "+e.toString());
		}
	}
	
	public void validateDailyFlashReportNetChangess(WebDriver driver, HashMap<String, ArrayList<String>> beforeNetChanges,
			HashMap<String, ArrayList<String>> afterNetChanges, String netChangesValue, HashMap<String, Double> folioBalances, int numberOfRooms, Double outBoundAmount,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Double selectedDateValue, monthToDateValue, yearToDateValue;
		Double beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
		Double afterSelectedDate, afterMonthToDate, afterYearToDate;
		Double expValue = 0.00 ;
		
		reportLogger.info("Before: "+beforeNetChanges);
		reportLogger.info("After: "+afterNetChanges);
		
//		Double expCityLedger = folioBalances.get("Ending Balance");
//		Double expGuestLedger = folioBalances.get("Balance");
//		//Double expTrialBalance = ;
//		Double expAdvancedDeposit = folioBalances.get("Payments");
		
		switch (netChangesValue) {
		case "Net Change In City Ledger":
			expValue = folioBalances.get("Ending Balance");
			break;
			
		case "Net Change In Guest Ledger":
			if (numberOfRooms>1) {
				expValue = folioBalances.get("Balance") + (folioBalances.get("Total Charges")*(numberOfRooms-1));
				expValue = folioBalances.get("Balance");
			}else {
				expValue = folioBalances.get("Balance");
			}			
			break;
			
		case "Net Change In Advanced Deposits":
			expValue = folioBalances.get("Payments") - outBoundAmount;
			break;
			
		case "Trial Balance":
			
			break;

		default:
			break;
		}

//		try {
			
			beforeSelectedDate = Double.parseDouble(beforeNetChanges.get(netChangesValue).get(0).replaceAll(",", ""));
			beforeMonthToDate = Double.parseDouble(beforeNetChanges.get(netChangesValue).get(1).replaceAll(",", ""));
			beforeYearToDate = Double.parseDouble(beforeNetChanges.get(netChangesValue).get(2).replaceAll(",", ""));
			
			afterSelectedDate = Double.parseDouble(afterNetChanges.get(netChangesValue).get(0).replaceAll(",", ""));
			afterMonthToDate = Double.parseDouble(afterNetChanges.get(netChangesValue).get(1).replaceAll(",", ""));
			afterYearToDate = Double.parseDouble(afterNetChanges.get(netChangesValue).get(2).replaceAll(",", ""));
			
			reportLogger.info("beforeSelectedDate: "+beforeSelectedDate);
			reportLogger.info("beforeMonthToDate: "+beforeMonthToDate);
			reportLogger.info("beforeYearToDate: "+beforeYearToDate);
			reportLogger.info("afterSelectedDate: "+afterSelectedDate);
			reportLogger.info("afterMonthToDate: "+afterMonthToDate);
			reportLogger.info("afterYearToDate: "+afterYearToDate);
			expValue = Utility.getRoundOffValueAfterDecimal(expValue);
			selectedDateValue = (afterSelectedDate)-(beforeSelectedDate);
			selectedDateValue = Utility.getRoundOffValueAfterDecimal(selectedDateValue);
			if (selectedDateValue.equals(expValue)) {
				reportLogger.info("Net Changes - "+netChangesValue+" amount validated successfully for Selected date");
				test_steps.add("Net Changes - "+netChangesValue+" amount validated successfully for Selected date");
			}else {
				reportLogger.info("Failed - "+"Net Changes - "+netChangesValue+" amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
				test_steps.add("AssertionError - Failed - "+"Net Changes - "+netChangesValue+" amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
			}
			BigDecimal a = new BigDecimal(String.valueOf(afterMonthToDate));
			BigDecimal b = new BigDecimal(String.valueOf(beforeMonthToDate));

			BigDecimal c = a.subtract(b);
			monthToDateValue = c.doubleValue();
			//monthToDateValue = afterMonthToDate-beforeMonthToDate;
			if (monthToDateValue.equals(expValue)) {
				reportLogger.info("Net Changes - "+netChangesValue+" amount validated successfully for Month To date");
				test_steps.add("Net Changes - "+netChangesValue+" amount validated successfully for Month To date");
			}else {
				reportLogger.info("Failed - "+"Net Changes - "+netChangesValue+" amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
				test_steps.add("AssertionError - Failed - "+"Net Changes - "+netChangesValue+" amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
			}
			
			yearToDateValue = afterYearToDate-beforeYearToDate;
			yearToDateValue = Utility.getRoundOffValueAfterDecimal(yearToDateValue);
			if (yearToDateValue.equals(expValue)) {
				reportLogger.info("Net Changes - "+netChangesValue+" amount validated successfully for Year To date");
				test_steps.add("Net Changes - "+netChangesValue+" amount validated successfully for Year To date");
			}else {
				reportLogger.info("Failed - "+"Net Changes - "+netChangesValue+" amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
				test_steps.add("AssertionError - Failed - "+"Net Changes - "+netChangesValue+" amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
			}
//		}catch(Exception e) {
//			test_steps.add("AssertionError - "+e.toString());
//			reportLogger.info("AssertionError - "+e.toString());
//		}
	}
	
	
	public void validateDailyFlashReportNetChangessTrialBalance(WebDriver driver, HashMap<String, ArrayList<String>> RevenueDetails,
			HashMap<String, ArrayList<String>> PaymentDetails, HashMap<String, ArrayList<String>> NetChangesDetails,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {
		
		
		
		Double revenueTotals, paymentMethodTotals, netChangesInGuestLedger, netChangesInCityLedger;
		Double expValue, actValue;
		
		String[] dates = {"Selected Date", "Month to Date", "Year to Date"};
		
		for (int i = 0; i < dates.length; i++) {
			try {
				
				revenueTotals = Double.parseDouble(RevenueDetails.get("Revenue Types Totals").get(i).replaceAll(",", ""));
				paymentMethodTotals = Double.parseDouble(PaymentDetails.get("Payments Method Types Totals").get(i).replaceAll(",", ""));
				netChangesInGuestLedger = Double.parseDouble(NetChangesDetails.get("Net Change In Guest Ledger").get(i).replaceAll(",", ""));			
				netChangesInCityLedger = Double.parseDouble(NetChangesDetails.get("Net Change In City Ledger").get(i).replaceAll(",", ""));
				
				reportLogger.info("revenueTotals: "+revenueTotals);
				reportLogger.info("paymentMethodTotals: "+paymentMethodTotals);
				reportLogger.info("netChangesInGuestLedger: "+netChangesInGuestLedger);
				reportLogger.info("netChangesInCityLedger: "+netChangesInCityLedger);
				
				BigDecimal a = new BigDecimal(String.valueOf(paymentMethodTotals));
				BigDecimal b = new BigDecimal(String.valueOf(netChangesInGuestLedger));
				BigDecimal c = new BigDecimal(String.valueOf(netChangesInCityLedger));
				BigDecimal d = new BigDecimal(String.valueOf(revenueTotals));

				BigDecimal e = c.add(a).add(b);
				BigDecimal f = d.subtract(e);
				
				//expValue = revenueTotals - (paymentMethodTotals) - (netChangesInGuestLedger) - (netChangesInCityLedger);
				//expValue = revenueTotals - paymentMethodTotals.sum(netChangesInGuestLedger, netChangesInCityLedger);
				expValue = f.doubleValue();
				actValue = Double.parseDouble(NetChangesDetails.get("Trial Balance").get(i).replaceAll(",", ""));
				
				if (actValue.equals(expValue)) {
					reportLogger.info("Net Changes - Trial Balance amount validated successfully for "+dates[i]);
					test_steps.add("Net Changes - Trial Balance amount validated successfully for "+dates[i]);
				}else {
					reportLogger.info("Failed - "+"Net Changes - Trial Balance amount validation for "+dates[i]+". Expected: "+expValue+" But found: "+actValue);
					test_steps.add("AssertionError - Failed - "+"Net Changes - Trial Balance amount validation for "+dates[i]+". Expected: "+expValue+" But found: "+actValue);
				}
				
			}catch(Exception e) {
				test_steps.add("AssertionError - "+e.toString());
				reportLogger.info("AssertionError - "+e.toString());
			}
		}
		
	}
	
	
	public void validateDailyFlashReportGuestCount(WebDriver driver, HashMap<String, ArrayList<String>> beforeGuestCountDetails,
			HashMap<String, ArrayList<String>> afterGuestCountDetails, int roomCount, int guestCount, int adultsCount, int childCount, String status,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {
		
		
		
		
		//ArrayList<String> date = new ArrayList<>();
		int beforeRoomCount, beforeGuestCount, beforeAdultsCount, beforeChildCount;
		int afterRoomCount, afterGuestCount, afterAdultsCount, afterChildCount;
		reportLogger.info("Status: "+status);
		beforeRoomCount = Integer.parseInt(beforeGuestCountDetails.get(status).get(0).replaceAll(",", ""));
		beforeGuestCount = Integer.parseInt(beforeGuestCountDetails.get(status).get(1).replaceAll(",", ""));
		beforeAdultsCount = Integer.parseInt(beforeGuestCountDetails.get(status).get(2).replaceAll(",", ""));
		beforeChildCount = Integer.parseInt(beforeGuestCountDetails.get(status).get(3).replaceAll(",", ""));
		reportLogger.info("Before: "+beforeRoomCount+"  "+beforeGuestCount+"  "+beforeAdultsCount+" "+beforeChildCount);
		
		afterRoomCount = Integer.parseInt(afterGuestCountDetails.get(status).get(0).replaceAll(",", ""));
		afterGuestCount = Integer.parseInt(afterGuestCountDetails.get(status).get(1).replaceAll(",", ""));
		afterAdultsCount = Integer.parseInt(afterGuestCountDetails.get(status).get(2).replaceAll(",", ""));
		afterChildCount = Integer.parseInt(afterGuestCountDetails.get(status).get(3).replaceAll(",", ""));
		reportLogger.info("After: "+afterRoomCount+"  "+afterGuestCount+"  "+afterAdultsCount+" "+afterChildCount);
		//Double expValue = (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms);

		
		int actRoomCount = afterRoomCount - beforeRoomCount;
		if (roomCount == actRoomCount) {
			reportLogger.info("Guest Count Statistics - "+status + " - Room Count validated successfully");
			test_steps.add("Guest Count Statistics - "+status + " - Room Count validated successfully");
		}else {
			reportLogger.info("Failed - Guest Count Statistics - "+status + " - Room Count validation. Expected: "+roomCount+" But found: "+actRoomCount);
			test_steps.add("AssertionError - Failed - Guest Count Statistics - "+status + " - Room Count validation. Expected: "+roomCount+" But found: "+actRoomCount);
		}
		
		int actGuestCount = afterGuestCount - beforeGuestCount;
		if (guestCount == actGuestCount) {
			reportLogger.info("Guest Count Statistics - "+status + " - Guest Count validated successfully");
			test_steps.add("Guest Count Statistics - "+status + " - Guest Count validated successfully");
		}else {
			reportLogger.info("Failed - Guest Count Statistics - "+status + " - Guest Count validation. Expected: "+guestCount+" But found: "+actGuestCount);
			test_steps.add("AssertionError - Failed - Guest Count Statistics - "+status + " - Guest Count validation. Expected: "+guestCount+" But found: "+actGuestCount);
		}
		
		int actAdultsCount = afterAdultsCount - beforeAdultsCount;
		if (adultsCount == actAdultsCount) {
			reportLogger.info("Guest Count Statistics - "+status + " - Adults Count validated successfully");
			test_steps.add("Guest Count Statistics - "+status + " - Adults Count validated successfully");
		}else {
			reportLogger.info("Failed - Guest Count Statistics - "+status + " - Adults Count validation. Expected: "+adultsCount+" But found: "+actAdultsCount);
			test_steps.add("AssertionError - Failed - Guest Count Statistics - "+status + " - Adults Count validation. Expected: "+adultsCount+" But found: "+actAdultsCount);
		}
		
		int actChildCount = afterChildCount - beforeChildCount;
		if (childCount == actChildCount) {
			reportLogger.info("Guest Count Statistics - "+status + " - Children Count validated successfully");
			test_steps.add("Guest Count Statistics - "+status + " - Children Count validated successfully");
		}else {
			reportLogger.info("Failed - Guest Count Statistics - "+status + " - Children Count validation. Expected: "+childCount+" But found: "+beforeChildCount);
			test_steps.add("AssertionError - Failed - Guest Count Statistics - "+status + " - Children Count validation. Expected: "+childCount+" But found: "+beforeChildCount);
		}
			
	}
	
	
	
	public void validateDailyFlashReportPropertyStatistics(WebDriver driver, HashMap<String, ArrayList<String>> beforePropertyStatisticsDetails,
			HashMap<String, ArrayList<String>> afterPropertyStatisticsDetails, String rowValue, int roomCount, 
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		int selectedDateValue, monthToDateValue, yearToDateValue;
		int beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
		int afterSelectedDate, afterMonthToDate, afterYearToDate;
		int expValue = 0;
		int daysMonthToDate , daysYearToDate;
		
		Calendar c = Calendar.getInstance();
		daysMonthToDate = c.get(Calendar.DAY_OF_MONTH);
		daysYearToDate = c.get(Calendar.DAY_OF_YEAR);
		
		expValue = roomCount;
			
		reportLogger.info("Before: "+beforePropertyStatisticsDetails);
		reportLogger.info("After: "+afterPropertyStatisticsDetails);
		
		try {
			
			beforeSelectedDate = Integer.parseInt(beforePropertyStatisticsDetails.get(rowValue).get(0).replaceAll(",", ""));
			beforeMonthToDate = Integer.parseInt(beforePropertyStatisticsDetails.get(rowValue).get(1).replaceAll(",", ""));
			beforeYearToDate = Integer.parseInt(beforePropertyStatisticsDetails.get(rowValue).get(2).replaceAll(",", ""));
			
			afterSelectedDate = Integer.parseInt(afterPropertyStatisticsDetails.get(rowValue).get(0).replaceAll(",", ""));
			afterMonthToDate = Integer.parseInt(afterPropertyStatisticsDetails.get(rowValue).get(1).replaceAll(",", ""));
			afterYearToDate = Integer.parseInt(afterPropertyStatisticsDetails.get(rowValue).get(2).replaceAll(",", ""));
			
			reportLogger.info("beforeSelectedDate: "+beforeSelectedDate);
			reportLogger.info("beforeMonthToDate: "+beforeMonthToDate);
			reportLogger.info("beforeYearToDate: "+beforeYearToDate);
			reportLogger.info("afterSelectedDate: "+afterSelectedDate);
			reportLogger.info("afterMonthToDate: "+afterMonthToDate);
			reportLogger.info("afterYearToDate: "+afterYearToDate);
			
			selectedDateValue = (afterSelectedDate)-(beforeSelectedDate);
			if (selectedDateValue == expValue ) {
				reportLogger.info("Property Statistics - "+rowValue+" validated successfully for Selected date");
				test_steps.add("Property Statistics - "+rowValue+" validated successfully for Selected date");
			}else {
				reportLogger.info("Failed - "+"Property Statistics - "+rowValue+" validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
				test_steps.add("AssertionError - Failed - "+"Property Statistics - "+rowValue+" validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
			}
			
			monthToDateValue = afterMonthToDate-beforeMonthToDate;
			if (rowValue.equalsIgnoreCase("Total Room Nights")) {
				int expMonthToDateValue = roomCount * daysMonthToDate;
				if (monthToDateValue == expMonthToDateValue) {
					reportLogger.info("Property Statistics - "+rowValue+" amount validated successfully for Month To date");
					test_steps.add("Property Statistics - "+rowValue+" amount validated successfully for Month To date");
				}else {
					reportLogger.info("Failed - "+"Property Statistics - "+rowValue+" amount validation for Month To date. Expected: "+expMonthToDateValue+" But found: "+monthToDateValue);
					test_steps.add("AssertionError - Failed - "+"Property Statistics - "+rowValue+" amount validation for Month To date. Expected: "+expMonthToDateValue+" But found: "+monthToDateValue);
				}
			}else {
				if (monthToDateValue == expValue) {
					reportLogger.info("Property Statistics - "+rowValue+" amount validated successfully for Month To date");
					test_steps.add("Property Statistics - "+rowValue+" amount validated successfully for Month To date");
				}else {
					reportLogger.info("Failed - "+"Property Statistics - "+rowValue+" amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
					test_steps.add("AssertionError - Failed - "+"Property Statistics - "+rowValue+" amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
				}
			}
			
			yearToDateValue = afterYearToDate-beforeYearToDate;
			if (rowValue.equalsIgnoreCase("Total Room Nights")) {
				int expYearToDateValue = roomCount * daysYearToDate;
				if (yearToDateValue == expYearToDateValue) {
					reportLogger.info("Property Statistics - "+rowValue+" amount validated successfully for Year To date");
					test_steps.add("Property Statistics - "+rowValue+" amount validated successfully for Year To date");
				}else {
					reportLogger.info("Failed - "+"Property Statistics - "+rowValue+" amount validation for Year To date. Expected: "+expYearToDateValue+" But found: "+yearToDateValue);
					test_steps.add("AssertionError - Failed - "+"Property Statistics - "+rowValue+" amount validation for Year To date. Expected: "+expYearToDateValue+" But found: "+yearToDateValue);
				}
			}else {
				if (yearToDateValue == expValue) {
					reportLogger.info("Property Statistics - "+rowValue+" amount validated successfully for Year To date");
					test_steps.add("Property Statistics - "+rowValue+" amount validated successfully for Year To date");
				}else {
					reportLogger.info("Failed - "+"Property Statistics - "+rowValue+" amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
					test_steps.add("AssertionError - Failed - "+"Property Statistics - "+rowValue+" amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
				}
			}
		}catch(Exception e) {
			test_steps.add("AssertionError - "+e.toString());
			reportLogger.info("AssertionError - "+e.toString());
		}
	}
	
	public void validatePropertyStatisticsRemainingAvailableRoomNights(WebDriver driver, 
			HashMap<String, ArrayList<String>> afterPropertyStatisticsDetails,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		int bookableRoomNights, soldRoomNights, remainingAvailableRoomNights, expRemainingAvailableRoomNights;
				
		reportLogger.info("After: "+afterPropertyStatisticsDetails);
		
		String[] dates = {"Selected Date", "Month to Date", "Year to Date"};
		
		try {
			bookableRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Bookable Room Nights").get(0).replaceAll(",", ""));
			soldRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Sold Room Nights").get(0).replaceAll(",", ""));
			remainingAvailableRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Remaining Available Room Nights").get(0).replaceAll(",", ""));
			
			expRemainingAvailableRoomNights = bookableRoomNights - soldRoomNights;
			
			if (expRemainingAvailableRoomNights == remainingAvailableRoomNights) {
				reportLogger.info("Property Statistics - Remaining Available Room Nights - validated successfully for "+dates[0]);
				test_steps.add("Property Statistics - Remaining Available Room Nights - validated successfully for "+dates[0]);
			}else {
				reportLogger.info("Failed - Property Statistics - Remaining Available Room Nights - validation for "+dates[0]+". Expected: "+expRemainingAvailableRoomNights+" But found: "+remainingAvailableRoomNights);
				test_steps.add("AssertionError - Failed - Property Statistics - Remaining Available Room Nights - validation for "+dates[0]+". Expected: "+expRemainingAvailableRoomNights+" But found: "+remainingAvailableRoomNights);
			}				
			
		}catch(Exception e) {
			test_steps.add("AssertionError - "+e.toString());
			reportLogger.info("AssertionError - "+e.toString());
		}
	}
	
	
	public void validatePropertyStatisticsBookableRoomNights(WebDriver driver, 
			HashMap<String, ArrayList<String>> afterPropertyStatisticsDetails,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		int totalRoomRoomNights, outOfOrderRoomNights, bookableRoomNights, expBookableRoomNights;
				
		reportLogger.info("After: "+afterPropertyStatisticsDetails);
		
		String[] dates = {"Selected Date", "Month to Date", "Year to Date"};
		
		for (int i = 0; i < dates.length; i++) {
			try {
				totalRoomRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Total Room Nights").get(i).replaceAll(",", ""));
				outOfOrderRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Out of Order Room Nights").get(i).replaceAll(",", ""));
				bookableRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Bookable Room Nights").get(i).replaceAll(",", ""));
				
				expBookableRoomNights = totalRoomRoomNights - outOfOrderRoomNights;
				
				if (expBookableRoomNights == bookableRoomNights) {
					reportLogger.info("Property Statistics - Bookable Room Nights - validated successfully for "+dates[i]);
					test_steps.add("Property Statistics - Bookable Room Nights - validated successfully for "+dates[i]);
				}else {
					reportLogger.info("Failed - Property Statistics - Bookable Room Nights - validation for "+dates[i]+". Expected: "+expBookableRoomNights+" But found: "+bookableRoomNights);
					test_steps.add("AssertionError - Failed - Property Statistics - Bookable Room Nights - validation for "+dates[i]+". Expected: "+expBookableRoomNights+" But found: "+bookableRoomNights);
				}				
				
			}catch(Exception e) {
				test_steps.add("AssertionError - "+e.toString());
				reportLogger.info("AssertionError - "+e.toString());
			}
		}	
	}
	
	
	public void validatePropertyStatisticsOccupancy(WebDriver driver, 
			HashMap<String, ArrayList<String>> afterPropertyStatisticsDetails,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		int soldRoomRoomNights, bookableRoomNights;
		double occupancy, expOccupancy;
				
		reportLogger.info("After: "+afterPropertyStatisticsDetails);
		
		String[] dates = {"Selected Date", "Month to Date", "Year to Date"};
		
		for (int i = 0; i < dates.length; i++) {
			try {
				soldRoomRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Sold Room Nights").get(i).replaceAll(",", ""));
				bookableRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Bookable Room Nights").get(i).replaceAll(",", ""));
				String occupancyText = afterPropertyStatisticsDetails.get("Occupancy%").get(i);
				occupancy = Double.parseDouble(occupancyText.substring(0, occupancyText.length()-1));
				
				double oc = (double)soldRoomRoomNights/bookableRoomNights * 100;
				reportLogger.info("Before round off: "+oc);
				DecimalFormat df = new DecimalFormat("###.##");
				expOccupancy = Double.parseDouble(df.format(oc));
				reportLogger.info("After round off: "+expOccupancy);
				
				if (expOccupancy == occupancy) {
					reportLogger.info("Property Statistics - Occupancy% - validated successfully for "+dates[i]);
					test_steps.add("Property Statistics - Occupancy% - validated successfully for "+dates[i]);
				}else {
					reportLogger.info("Failed - Property Statistics - Occupancy% validation for "+dates[i]+". Expected: "+expOccupancy+" But found: "+occupancy);
					test_steps.add("AssertionError - Failed - Property Statistics - Occupancy% - validation for "+dates[i]+". Expected: "+expOccupancy+" But found: "+occupancy);
				}				
				
			}catch(Exception e) {
				test_steps.add("AssertionError - "+e.toString());
				reportLogger.info("AssertionError - "+e.toString());
			}
		}	
	}
		
	
	public void validatePropertyStatisticsAverageDailyRateADR(WebDriver driver, HashMap<String, ArrayList<String>> afterRevenueDetails,
			HashMap<String, ArrayList<String>> afterPropertyStatisticsDetails,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		int soldRoomRoomNights;
		double ADR, expADR, roomsRevenue;
				
		reportLogger.info("After: "+afterPropertyStatisticsDetails);
		
		String[] dates = {"Selected Date", "Month to Date", "Year to Date"};
		
		for (int i = 0; i < dates.length; i++) {
			try {
				soldRoomRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Sold Room Nights").get(i).replaceAll(",", ""));
				roomsRevenue = Double.parseDouble(afterRevenueDetails.get("Room Charges").get(i).replaceAll(",", ""));
				ADR = Double.parseDouble(afterPropertyStatisticsDetails.get("Average Daily Rate(ADR)").get(i).substring(1).replaceAll(",", ""));
				
				if (roomsRevenue == 0.0) {
					expADR = 0.00;
				}else {
					double oc = (double)roomsRevenue/soldRoomRoomNights;
					reportLogger.info("Before round off: "+oc);
					DecimalFormat df = new DecimalFormat("###.##");
					expADR = Double.parseDouble(df.format(oc));
					reportLogger.info("After round off: "+expADR);
				}
				reportLogger.info("Exp ADR: "+expADR);
				
				if (expADR == ADR) {
					reportLogger.info("Property Statistics - Average Daily Rate(ADR) - validated successfully for "+dates[i]);
					test_steps.add("Property Statistics - Average Daily Rate(ADR) - validated successfully for "+dates[i]);
				}else {
					reportLogger.info("Failed - Property Statistics - Average Daily Rate(ADR) validation for "+dates[i]+". Expected: "+expADR+" But found: "+ADR);
					test_steps.add("AssertionError - Failed - Property Statistics - Average Daily Rate(ADR) - validation for "+dates[i]+". Expected: "+expADR+" But found: "+ADR);
				}				
				
			}catch(Exception e) {
				test_steps.add("AssertionError - "+e.toString());
				reportLogger.info("AssertionError - "+e.toString());
			}
		}	
	}
	
	public void validatePropertyStatisticsRevPerAvailRoomRevPAR(WebDriver driver, HashMap<String, ArrayList<String>> afterRevenueDetails,
			HashMap<String, ArrayList<String>> afterPropertyStatisticsDetails,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		int bookableRoomNights;
		double RevPAR, expRevPAR, roomsRevenue;
				
		reportLogger.info("After: "+afterPropertyStatisticsDetails);
		
		String[] dates = {"Selected Date", "Month to Date", "Year to Date"};
		
		for (int i = 0; i < dates.length; i++) {
			try {
				bookableRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Bookable Room Nights").get(i).replaceAll(",", ""));
				roomsRevenue = Double.parseDouble(afterRevenueDetails.get("Room Charges").get(i).replaceAll(",", ""));
				RevPAR = Double.parseDouble(afterPropertyStatisticsDetails.get("Rev Per AvailRoom(RevPAR)").get(i).substring(1).replaceAll(",", ""));
				
				double oc = (double)roomsRevenue/bookableRoomNights;
//				reportLogger.info("Before round off: "+oc);
//				DecimalFormat df = new DecimalFormat("###.##");
//				expRevPAR = Double.parseDouble(df.format(oc));
				expRevPAR = Utility.getRoundOffValueAfterDecimal(oc);
				reportLogger.info("After round off: "+expRevPAR);
				
				if (expRevPAR == RevPAR) {
					reportLogger.info("Property Statistics - Rev Per AvailRoom(RevPAR) - validated successfully for "+dates[i]);
					test_steps.add("Property Statistics - Rev Per AvailRoom(RevPAR) - validated successfully for "+dates[i]);
				}else {
					reportLogger.info("Failed - Property Statistics - Rev Per AvailRoom(RevPAR) validation for "+dates[i]+". Expected: "+expRevPAR+" But found: "+RevPAR);
					test_steps.add("AssertionError - Failed - Property Statistics - Rev Per AvailRoom(RevPAR) - validation for "+dates[i]+". Expected: "+expRevPAR+" But found: "+RevPAR);
				}				
				
			}catch(Exception e) {
				test_steps.add("AssertionError - "+e.toString());
				reportLogger.info("AssertionError - "+e.toString());
			}
		}	
	}
	
	public void selectProperty(WebDriver driver, String property) throws InterruptedException {
		
		String strProp = "(//span[contains(@class,'ant-select-selection-item')])[1]";
		
		String strPropSelect = "//div[contains(text(),'"+property+"')]";
		
		driver.findElement(By.xpath(strProp)).click();
		Wait.wait1Second();
		driver.findElement(By.xpath(strPropSelect)).click();	
	}
	
	public double feeCalculation(WebDriver driver, String feeValue, double roomCharge, int numberOfNights) throws InterruptedException {
		double feeAmount = 0;
		reportLogger.info("Fee Value: "+feeValue);
		if (!feeValue.isEmpty()) {
			String[] fees = feeValue.split("\\|");
			if (fees[0].equalsIgnoreCase("USD")) {
				if (fees[2].equalsIgnoreCase("per night")) {
					feeAmount = Double.parseDouble(fees[1]) * numberOfNights;
				}else if (fees[2].equalsIgnoreCase("per stay")) {
					feeAmount = Double.parseDouble(fees[1]);
				}
			}else if (fees[0].equalsIgnoreCase("percentage")) {
				if (fees[2].equalsIgnoreCase("per night")) {
					feeAmount = (Double.parseDouble(fees[1].replace("%", "")) * roomCharge / 100) * numberOfNights;
				}else if (fees[2].equalsIgnoreCase("per stay")) {
					feeAmount = Double.parseDouble(fees[1].replace("%", "")) * roomCharge / 100;
				}
			}
		}
		return feeAmount;
	}
	
	public double feeCalculationsAll(WebDriver driver, ArrayList<String> feesList, double roomCharge, int numberOfNights) throws InterruptedException {
		double feeAmount = 0;
		double feeAmountAll = 0;
		String feeValue;
		if (feesList.size()>0) {
			
			for (int i = 0; i < feesList.size(); i++) {
				feeValue = feesList.get(i);
				String[] fees = feeValue.split("\\|");
				if (fees[0].equalsIgnoreCase("USD")) {
					if (fees[2].equalsIgnoreCase("per night")) {
						feeAmount = Double.parseDouble(fees[1]) * numberOfNights;
					}else if (fees[2].equalsIgnoreCase("per stay")) {
						feeAmount = Double.parseDouble(fees[1]);
					}
				}else if (fees[0].equalsIgnoreCase("percentage")) {
					if (fees[2].equalsIgnoreCase("per night")) {
						feeAmount = (Double.parseDouble(fees[1].replace("%", "")) * roomCharge / 100) * numberOfNights;
					}else if (fees[2].equalsIgnoreCase("per stay")) {
						feeAmount = Double.parseDouble(fees[1].replace("%", "")) * roomCharge / 100;
					}
				}
				feeAmountAll = feeAmountAll + feeAmount;
			}
			
		}
		return feeAmountAll;
	}
	
	public double taxCalculationsAll(WebDriver driver, ArrayList<String> taxList, double roomCharge) throws InterruptedException {
		double taxAmount = 0;
		double taxAmountAll = 0;
		String taxValue;
		reportLogger.info("Tax List: "+taxList);
		if (taxList.size()>0) {
			
			for (int i = 0; i < taxList.size(); i++) {
				taxValue = taxList.get(i);
				String[] taxes = taxValue.split("\\|");
				if (taxes[0].equalsIgnoreCase("USD")) {
					taxAmount = Double.parseDouble(taxes[1]);
				}else if (taxes[0].equalsIgnoreCase("percentage")) {
					taxAmount = (Double.parseDouble(taxes[1].replace("%", "")) * roomCharge / 100);
				}
				taxAmountAll = taxAmountAll + taxAmount;
			}
			
		}
		return taxAmountAll;
	}
	
	public double taxCalculationsAll(WebDriver driver, ArrayList<String> taxList, double folioAmount, String FolioItem) throws InterruptedException {
		double taxAmount = 0;
		double taxAmountAll = 0;
		String taxValue;
		reportLogger.info("Tax List: "+taxList);
		if (taxList.size()>0) {
			
			for (int i = 0; i < taxList.size(); i++) {
				taxValue = taxList.get(i);
				String[] taxes = taxValue.split("\\|");
				
				if (taxes[3].split(",").length > 1) {
					ArrayList<String> itemsList = new ArrayList<>();
					String[] items = taxes[3].split(",");
					for (int j = 0; j < items.length; j++) {
						itemsList.add(items[j]);
					}
					
					if (itemsList.contains(FolioItem)) {
						if (taxes[0].equalsIgnoreCase("USD")) {
							taxAmount = Double.parseDouble(taxes[1]);
						}else if (taxes[0].equalsIgnoreCase("percentage")) {
							taxAmount = (Double.parseDouble(taxes[1].replace("%", "")) * folioAmount / 100);
						}
					}
				}else {
					if (taxes[3].equalsIgnoreCase(FolioItem)) {
						if (taxes[0].equalsIgnoreCase("USD")) {
							taxAmount = Double.parseDouble(taxes[1]);
						}else if (taxes[0].equalsIgnoreCase("percentage")) {
							taxAmount = (Double.parseDouble(taxes[1].replace("%", "")) * folioAmount / 100);
						}
					}
				}
				taxAmountAll = taxAmountAll + taxAmount;
			}
			
		}
		return taxAmountAll;
	}
	
	
	public HashMap<String, String> getSummaryViewData(WebDriver driver) throws InterruptedException {
		Elements_Reports elements = new Elements_Reports(driver);
		HashMap<String, String> data = new HashMap<>();
		data.put("Rooms Total", elements.summaryViewRoomsTotal.getText());
		data.put("Rooms Out of Order", elements.summaryViewRoomsOutOfOrder.getText());
		data.put("Rooms Bookable", elements.summaryViewRoomsBookable.getText());
		data.put("Rooms Sold", elements.summaryViewRoomsRoomsSold.getText());
		data.put("Rooms Occupancy", elements.summaryViewRoomsOccupancy.getText());
		data.put("Rooms Availability", elements.summaryViewRoomsAvailability.getText());
		
		data.put("Guests Count", elements.summaryViewGuestsGuestsCount.getText());
		data.put("Guests Arrival", elements.summaryViewGuestsArrival.getText());
		data.put("Guests Stay Over", elements.summaryViewGuestsStayOver.getText());
		data.put("Guests Depature", elements.summaryViewGuestsDepature.getText());
		
		String groups = elements.includeGroupSelectedOption.getText();
		String perf = elements.includePerformanceSelectedOption.getText();
		boolean groupsEnabled = false;
		boolean perfomanceEnabled = false;
		if (groups.equalsIgnoreCase("Yes")) {
			groupsEnabled = true;
		}		
		if (perf.equalsIgnoreCase("Yes")) {
			perfomanceEnabled = true;
		}
		if (groupsEnabled) {
			data.put("Group Blocks", elements.summaryViewGroupBlocks.getText());
			data.put("Group Pick Ups", elements.summaryViewGroupPickUp.getText());
			data.put("Group Pick Ups Percentage", elements.summaryViewGroupPickUpPercentage.getText());
			data.put("Group Revenue", elements.summaryViewGroupGroupRevenue.getText());
			if (perfomanceEnabled) {
				data.put("Performance Revenue", elements.summaryViewPerformanceRevenue.getText());
				data.put("Performance ADR", elements.summaryViewPerformanceADR.getText());
				data.put("Performance RevPAR", elements.summaryViewPerformanceRevPAR.getText());
			}
		} else {
			if (perfomanceEnabled) {
				data.put("Performance Revenue", driver.findElement(By.xpath("(//h2[contains(text(),'Summary View')]/../following-sibling::div)[1]//tbody//td[12]")).getText());
				data.put("Performance ADR", driver.findElement(By.xpath("(//h2[contains(text(),'Summary View')]/../following-sibling::div)[1]//tbody//td[13]")).getText());
				data.put("Performance RevPAR", driver.findElement(By.xpath("(//h2[contains(text(),'Summary View')]/../following-sibling::div)[1]//tbody//td[14]")).getText());
			}
		}
		return data;
	}
	public HashMap<String, String> getSummaryViewDataForPayment(WebDriver driver) throws InterruptedException {
		Elements_Reports elements = new Elements_Reports(driver);
		HashMap<String, String> data = new HashMap<>();
		data.put("Received SubTotal", elements.summaryViewReceivedSubTotal.getText());
		data.put("Payable SubTotal", elements.summaryViewPayableSubTotal.getText());
		data.put("Net Balance", elements.netBalance.getText());
		return data;
	}
	
	
	public HashMap<String, String> getDetailedViewTotalData(WebDriver driver, String date) throws InterruptedException {
		Elements_Reports elements = new Elements_Reports(driver);
		HashMap<String, String> data = new HashMap<>();

		String requiredDateFormat = Utility.parseDate(date, "dd/MM/yyyy", "MMM dd, yyyy, EEEE");
		
		try {
			Wait.waitForElementToBeVisibile(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[1]"), driver, 5);
			data.put("Rooms Total", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[1]")).getText());
			data.put("Rooms Out of Order", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[2]")).getText());
			data.put("Rooms Bookable", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[3]")).getText());
			data.put("Rooms Sold", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[4]")).getText());
			data.put("Rooms Occupancy", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[5]")).getText());
			data.put("Rooms Availability", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[6]")).getText());
			
			data.put("Guests Count", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[7]")).getText());
			data.put("Guests Arrival", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[8]")).getText());
			data.put("Guests Stay Over", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[9]")).getText());
			data.put("Guests Depature", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[10]")).getText());
			
			String groups = elements.includeGroupSelectedOption.getText();
			String perf = elements.includePerformanceSelectedOption.getText();
			boolean groupsEnabled = false;
			boolean perfomanceEnabled = false;
			if (groups.equalsIgnoreCase("Yes")) {
				groupsEnabled = true;
			}		
			if (perf.equalsIgnoreCase("Yes")) {
				perfomanceEnabled = true;
			}
			if (groupsEnabled) {
				data.put("Group Blocks", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[11]")).getText());
				data.put("Group Pick Ups", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[12]")).getText());
				data.put("Group Pick Ups Percentage", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[13]")).getText());
				data.put("Group Revenue", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[14]")).getText());
				if (perfomanceEnabled) {
					data.put("Performance Revenue", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[15]")).getText());
					data.put("Performance ADR", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[16]")).getText());
					data.put("Performance RevPAR", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[17]")).getText());
				}
			} else {
				if (perfomanceEnabled) {
					data.put("Performance Revenue", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[11]")).getText());
					data.put("Performance ADR", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[12]")).getText());
					data.put("Performance RevPAR", driver.findElement(By.xpath("//td[text()='"+requiredDateFormat+"']/following-sibling::td[13]")).getText());
				}
			}		
		}catch (Exception e) {
			reportLogger.info("Report data not available for given date");
		}
		return data;
	}

	public HashMap<String, String> getDetailedViewRoomClassOrMarketSegmantData(WebDriver driver, String roomClass, String date) throws InterruptedException {
		Elements_Reports elements = new Elements_Reports(driver);
		HashMap<String, String> data = new HashMap<>();

		String diff = Utility.differenceBetweenDates(date, Utility.parseDate(
				elements.detailedViewFirstDate.getText(), "MMM dd, yyyy, EEEE", "dd/MM/yyyy"));
		int index = Integer.parseInt(diff)+1;
		
		data.put("Rooms Total", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[1]")).getText());
		data.put("Rooms Out of Order", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[2]")).getText());
		data.put("Rooms Bookable", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[3]")).getText());
		data.put("Rooms Sold", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[4]")).getText());
		data.put("Rooms Occupancy", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[5]")).getText());
		data.put("Rooms Availability", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[6]")).getText());
		
		data.put("Guests Count", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[7]/span")).getText());
		data.put("Guests Arrival", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[8]/span")).getText());
		data.put("Guests Stay Over", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[9]/span")).getText());
		data.put("Guests Depature", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[10]/span")).getText());
		
		String groups = elements.includeGroupSelectedOption.getText();
		String perf = elements.includePerformanceSelectedOption.getText();
		boolean groupsEnabled = false;
		boolean perfomanceEnabled = false;
		if (groups.equalsIgnoreCase("Yes")) {
			groupsEnabled = true;
		}		
		if (perf.equalsIgnoreCase("Yes")) {
			perfomanceEnabled = true;
		}
		if (groupsEnabled) {
			data.put("Group Blocks", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[11]/span")).getText());
			data.put("Group Pick Ups", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[12]/span")).getText());
			data.put("Group Pick Ups Percentage", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[13]/span")).getText());
			data.put("Group Revenue", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[14]/span")).getText());
			if (perfomanceEnabled) {
				data.put("Performance Revenue", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[15]/span")).getText());
				data.put("Performance ADR", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[16]/span")).getText());
				data.put("Performance RevPAR", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[17]/span")).getText());
			}
		} else {
			if (perfomanceEnabled) {
				data.put("Performance Revenue", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[11]/span")).getText());
				data.put("Performance ADR", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[12]/span")).getText());
				data.put("Performance RevPAR", driver.findElement(By.xpath("(//div[text()='"+roomClass+"'])["+index+"]/../following-sibling::td[13]/span")).getText());
			}
		}		
		return data;
	}
	
	public void compareRoomForeCastReportDetailedView(ArrayList<String> test_steps, HashMap<String, String> before, HashMap<String, String> after,
			HashMap<String, Double> reduceOrIncreaseCount, int noOfNights) throws InterruptedException {
		
		compareSingleValue(test_steps, "Rooms Total", before.get("Rooms Total"), after.get("Rooms Total"),
				reduceOrIncreaseCount.get("Rooms Total"));
		
		compareSingleValue(test_steps, "Rooms Out of Order", before.get("Rooms Out of Order"), after.get("Rooms Out of Order"),
				reduceOrIncreaseCount.get("Rooms Out of Order"));
		
		compareSingleValue(test_steps, "Rooms Bookable", before.get("Rooms Bookable"), after.get("Rooms Bookable"),
				reduceOrIncreaseCount.get("Rooms Bookable"));
		
		compareSingleValue(test_steps, "Rooms Sold", before.get("Rooms Sold"), after.get("Rooms Sold"),
				reduceOrIncreaseCount.get("Rooms Sold")/noOfNights);
		
		compareSingleValue(test_steps, "Rooms Occupancy", before.get("Rooms Occupancy"), 
				after.get("Rooms Occupancy"),
				reduceOrIncreaseCount.get("Rooms Occupancy"));
		
		compareSingleValue(test_steps, "Rooms Availability", before.get("Rooms Availability"), after.get("Rooms Availability"),
				reduceOrIncreaseCount.get("Rooms Availability")/noOfNights);
		
		compareSingleValue(test_steps, "Guests Count", before.get("Guests Count"), after.get("Guests Count"),
				reduceOrIncreaseCount.get("Guests Count")/noOfNights);
		
		compareSingleValue(test_steps, "Guests Arrival", before.get("Guests Arrival"), after.get("Guests Arrival"),
				reduceOrIncreaseCount.get("Guests Arrival"));
		
		compareSingleValue(test_steps, "Guests Stay Over", before.get("Guests Stay Over"), after.get("Guests Stay Over"),
				reduceOrIncreaseCount.get("Guests Stay Over")/noOfNights);
		
		compareSingleValue(test_steps, "Guests Depature", before.get("Guests Depature"), after.get("Guests Depature"),
				reduceOrIncreaseCount.get("Guests Depature"));
		
		compareSingleValue(test_steps, "Group Blocks", before.get("Group Blocks"), after.get("Group Blocks"),
				reduceOrIncreaseCount.get("Group Blocks"));
		
		compareSingleValue(test_steps, "Group Pick Ups", before.get("Group Pick Ups"), after.get("Group Pick Ups"),
				reduceOrIncreaseCount.get("Group Pick Ups"));
		
		compareSingleValue(test_steps, "Group Pick Ups Percentage", before.get("Group Pick Ups Percentage"), 
				after.get("Group Pick Ups Percentage"),
				reduceOrIncreaseCount.get("Group Pick Ups Percentage"));
		
		compareSingleValue(test_steps, "Group Revenue", before.get("Group Revenue"), after.get("Group Revenue"),
				reduceOrIncreaseCount.get("Group Revenue"));
		
		compareSingleValue(test_steps, "Performance Revenue", before.get("Performance Revenue"), after.get("Performance Revenue"),
				reduceOrIncreaseCount.get("Performance Revenue")/noOfNights);
		
		compareSingleValue(test_steps, "Performance ADR", before.get("Performance ADR"), after.get("Performance ADR"),
				reduceOrIncreaseCount.get("Performance ADR"));
		
		compareSingleValue(test_steps, "Performance RevPAR", before.get("Performance RevPAR"), after.get("Performance RevPAR"),
				reduceOrIncreaseCount.get("Performance RevPAR"));

		
	}
	
	public void compareRoomFolioReport(WebDriver driver,ArrayList<String> test_steps, HashMap<String, String> beforeReservation, HashMap<String, String> afterReservation, HashMap<String, String> beforeAction, HashMap<String, String> afterAction,
			Double reduceOrIncreaseCount,String resStatus,HashMap<String, Boolean> reservationTypeMap,String resType) throws InterruptedException, ParseException {
		
		 for (Map.Entry<String,Boolean> entry : reservationTypeMap.entrySet()) {
	            Utility.printString("Key = " + entry.getKey() + "   Value = " + entry.getValue());
	            String reservationType = entry.getKey();		 		
	            if(entry.getValue()||!resStatus.equalsIgnoreCase("")) {
	            	ArrayList<String> a= new ArrayList<String>(); 
	            	ArrayList<String> b= new ArrayList<String>(); 
	            	
	            	ArrayList<String> c= new ArrayList<String>(); 
	            	ArrayList<String> d= new ArrayList<String>(); 
	            	if(resStatus.equalsIgnoreCase("")) {
	            		a= Utility.splitInputData(beforeReservation.get(reservationType));
	            		 b= Utility.splitInputData(afterReservation.get(reservationType)); 
	 	            	
	            		compareSingleValueForFolio(test_steps, "Received SubTotal", a.get(0), b.get(0),
	        					reduceOrIncreaseCount,resStatus,false);
	        			
	        			compareSingleValueForFolio(test_steps, "Payable SubTotal", a.get(1),  b.get(1),
	        					0.0,resStatus,false);
	        		}
	        		else {
	        			if(entry.getValue()) {
	        			a= Utility.splitInputData(beforeReservation.get("Reserved"));
	            		 b= Utility.splitInputData(afterReservation.get("Reserved")); 
////	 	            	
	        			
	        			c=Utility.splitInputData(beforeAction.get(reservationType));
	        			 d= Utility.splitInputData(afterAction.get(reservationType)); 
	 	            	
	        		compareSingleValueForFolio(test_steps, "Received SubTotal", a.get(0), b.get(0),
	        				reduceOrIncreaseCount,resStatus,false);
	        		
	        		compareSingleValueForFolio(test_steps, "Payable SubTotal", a.get(1), b.get(1),
	        				0.0,resStatus,false);
//	        				
	        		if (resStatus.equalsIgnoreCase("CheckOut")||resStatus.equalsIgnoreCase("Departed")) {
	    			if(resType.equalsIgnoreCase("MRB")) {
	    				compareSingleValueForFolio(test_steps, "Received SubTotal", c.get(0), d.get(0),
	    						reduceOrIncreaseCount/2,resStatus,true);
		    			
	    			}
	    			else {
	            	compareSingleValueForFolio(test_steps, "Received SubTotal", c.get(0), d.get(0),
	            			0.0,resStatus,true);
	    			}
	        		}
	        		else {
	        			compareSingleValueForFolio(test_steps, "Received SubTotal", c.get(0), d.get(0),
		            			reduceOrIncreaseCount,resStatus,true);
		        		
	        		}
	        		if (resStatus.equalsIgnoreCase("CheckOut")||resStatus.equalsIgnoreCase("Departed")) {
		    			if(resType.equalsIgnoreCase("MRB")) {
		    		
	            	compareSingleValueForFolio(test_steps, "Payable SubTotal", c.get(1), d.get(1),
	            			reduceOrIncreaseCount/2,resStatus,true);
		    			}
		    			else {
			            	compareSingleValueForFolio(test_steps, "Payable SubTotal", c.get(1), d.get(1),
			        				0.0,resStatus,true);

		    			}
		    			}
	        		else {
		            	compareSingleValueForFolio(test_steps, "Payable SubTotal", c.get(1), d.get(1),
		        				0.0,resStatus,true);

	        		}
	        			}
	        		}
	        		}
		 }
		 if(resStatus.equalsIgnoreCase("")) {
				compareSingleValueForFolio(test_steps, "Net Balance", beforeReservation.get("Net Balance"), afterReservation.get("Net Balance"),
    					reduceOrIncreaseCount,resStatus,false);
    		
		 }
		 else {
			 compareSingleValueForFolio(test_steps, "Net Balance", beforeReservation.get("Net Balance"), afterReservation.get("Net Balance"),
 					reduceOrIncreaseCount,resStatus,false);
     		if (resStatus.equalsIgnoreCase("CheckOut")||resStatus.equalsIgnoreCase("Departed")) {
	    			
			 compareSingleValueForFolio(test_steps, "Net Balance", beforeAction.get("Net Balance"), afterAction.get("Net Balance"),
					 0.0,resStatus,true);
	    			
     		}
     		else {
   			 compareSingleValueForFolio(test_steps, "Net Balance", beforeAction.get("Net Balance"), afterAction.get("Net Balance"),
					 reduceOrIncreaseCount,resStatus,true);

     		}
		 }
		
	
	}
	

	public void compareRoomForeCastReport(ArrayList<String> test_steps, HashMap<String, String> before, HashMap<String, String> after,
			HashMap<String, Double> reduceOrIncreaseCount) throws InterruptedException {
		
		compareSingleValue(test_steps, "Rooms Total", before.get("Rooms Total"), after.get("Rooms Total"),
				reduceOrIncreaseCount.get("Rooms Total"));
		
		compareSingleValue(test_steps, "Rooms Out of Order", before.get("Rooms Out of Order"), after.get("Rooms Out of Order"),
				reduceOrIncreaseCount.get("Rooms Out of Order"));
		
		compareSingleValue(test_steps, "Rooms Bookable", before.get("Rooms Bookable"), after.get("Rooms Bookable"),
				reduceOrIncreaseCount.get("Rooms Bookable"));
		
		compareSingleValue(test_steps, "Rooms Sold", before.get("Rooms Sold"), after.get("Rooms Sold"),
				reduceOrIncreaseCount.get("Rooms Sold"));
		
		compareSingleValue(test_steps, "Rooms Occupancy", before.get("Rooms Occupancy"), 
				after.get("Rooms Occupancy"),
				reduceOrIncreaseCount.get("Rooms Occupancy"));
		
		compareSingleValue(test_steps, "Rooms Availability", before.get("Rooms Availability"), after.get("Rooms Availability"),
				reduceOrIncreaseCount.get("Rooms Availability"));
		
		compareSingleValue(test_steps, "Guests Count", before.get("Guests Count"), after.get("Guests Count"),
				reduceOrIncreaseCount.get("Guests Count"));
		
		compareSingleValue(test_steps, "Guests Arrival", before.get("Guests Arrival"), after.get("Guests Arrival"),
				reduceOrIncreaseCount.get("Guests Arrival"));
		
		compareSingleValue(test_steps, "Guests Stay Over", before.get("Guests Stay Over"), after.get("Guests Stay Over"),
				reduceOrIncreaseCount.get("Guests Stay Over"));
		
		compareSingleValue(test_steps, "Guests Depature", before.get("Guests Depature"), after.get("Guests Depature"),
				reduceOrIncreaseCount.get("Guests Depature"));
		
		compareSingleValue(test_steps, "Group Blocks", before.get("Group Blocks"), after.get("Group Blocks"),
				reduceOrIncreaseCount.get("Group Blocks"));
		
		compareSingleValue(test_steps, "Group Pick Ups", before.get("Group Pick Ups"), after.get("Group Pick Ups"),
				reduceOrIncreaseCount.get("Group Pick Ups"));
		
		compareSingleValue(test_steps, "Group Pick Ups Percentage", before.get("Group Pick Ups Percentage"), 
				after.get("Group Pick Ups Percentage"),
				reduceOrIncreaseCount.get("Group Pick Ups Percentage"));
		
		compareSingleValue(test_steps, "Group Revenue", before.get("Group Revenue"), after.get("Group Revenue"),
				reduceOrIncreaseCount.get("Group Revenue"));
		
		compareSingleValue(test_steps, "Performance Revenue", before.get("Performance Revenue"), after.get("Performance Revenue"),
				reduceOrIncreaseCount.get("Performance Revenue"));
		
		compareSingleValue(test_steps, "Performance ADR", before.get("Performance ADR"), after.get("Performance ADR"),
				reduceOrIncreaseCount.get("Performance ADR"));
		
		compareSingleValue(test_steps, "Performance RevPAR", before.get("Performance RevPAR"), after.get("Performance RevPAR"),
				reduceOrIncreaseCount.get("Performance RevPAR"));

		
	}

	private void compareSingleValue(ArrayList<String> test_steps, String value, String before, String after, Double count) {
		before= before.replaceAll("%", "");
		before= before.replace(TestCore.propertyCurrency, "");
		before= before.replaceAll(",", "");
		
		after= after.replaceAll("%", "");
		after= after.replace(TestCore.propertyCurrency, "");
		after= after.replaceAll(",", "");
		
		double brforeAction, afterAction, expectedValue;
		brforeAction = Double.parseDouble(before);
		afterAction = Double.parseDouble(after); 
		expectedValue = Utility.getRoundOffValueAfterDecimal(brforeAction+count);
		String check = null;
		if (count>0) {
			check = "increase";
		} else {
			check = "decrease";
		}
		try {
			assertEquals(afterAction, expectedValue, "Failed to verify "+value+" value with "+check+" value as : "+expectedValue);
			test_steps.add("Successfully verified "+value+" value with "+check+" value as: <b>" + expectedValue+"</b>");
			reportLogger.info("Successfully verified "+value+" value with "+check+" value as: <b>" + expectedValue+"</b>");
		} catch (Exception e) {
			reportLogger.info(e.toString());
		} catch (Error e) {
			reportLogger.info(e.toString());
			test_steps.add(e.toString());
		}
	}
	
	private void compareSingleValueForFolio(ArrayList<String> test_steps, String value, String before, String after, Double count,String resStatus,Boolean Action) {
		
	//	before= before.replace(TestCore.propertyCurrency, "");
		before= before.replaceAll(",", "");
//		
	//	after= after.replace(TestCore.propertyCurrency, "");
		after= after.replaceAll(",", "");
		double brforeAction, afterAction, expectedValue;
		brforeAction = Double.parseDouble(before);
		afterAction = Double.parseDouble(after);
		String check = null;
		if(resStatus.equalsIgnoreCase("")){
			expectedValue = Utility.getRoundOffValueAfterDecimal(brforeAction+count);
			check = "increase";
			}
		else if(resStatus.equalsIgnoreCase("OnHold") ) {
			expectedValue = Utility.getRoundOffValueAfterDecimal(brforeAction);
			check = "No Change";
		}
		
		else{
			if(Action) {
			expectedValue = Utility.getRoundOffValueAfterDecimal(brforeAction+count);	
			check = "Increase";
			}
			else {
				expectedValue = Utility.getRoundOffValueAfterDecimal(brforeAction-count);	
				check = "Decrease";
			}
			
		}
//		else if(resStatus.equalsIgnoreCase("")){
//		expectedValue = Utility.getRoundOffValueAfterDecimal(brforeAction+count);
//		check = "increase";
//		}
//		else {
//			expectedValue = Utility.getRoundOffValueAfterDecimal(brforeAction - count);
//			check = "Decrease";
//		}
		
		if (value.equalsIgnoreCase("Payable SubTotal")){
			if(count.equals(0.0)) {
			check = "No Change";
			}
			else {
				check = "Increase";
			}
		}
		
		try {
			assertEquals(afterAction, expectedValue, "Failed to verify "+value+" value with "+check+" value as : "+expectedValue);
			test_steps.add("verified "+check+" in "+value+ " " +resStatus+" value with value as: <b>" + expectedValue+"</b>");
			reportLogger.info("verified "+check+" in "+value+ " " +resStatus+" value with value as: <b>" + expectedValue+"</b>");
		} catch (Exception e) {
			reportLogger.info(e.toString());
		} catch (Error e) {
			reportLogger.info(e.toString());
			test_steps.add(e.toString());
		}
	}
	
	public HashMap<String, Double> calculationsRoomForecast(HashMap<String, String> before, HashMap<String, String> after) {
		double a, b;
		HashMap<String, Double> calculations = new HashMap<>();
		
		//PU%		
		if (!(Double.parseDouble(before.get("Group Blocks")) == 0)) {
			b = ( Double.parseDouble(before.get("Group Pick Ups")) / Double.parseDouble(before.get("Group Blocks")) ) * 100;
		}else {
			b = 0;
		}
		if (!(Double.parseDouble(after.get("Group Blocks")) == 0)) {
			a = ( Double.parseDouble(after.get("Group Pick Ups")) / Double.parseDouble(after.get("Group Blocks")) ) * 100;
		}else {
			a = 0;
		}			
		reportLogger.info("PU: "+b+"   "+a);
		double puPercentage = Utility.getRoundOffValueAfterDecimal(Utility.getRoundOffValueAfterDecimal(a) - Utility.getRoundOffValueAfterDecimal(b));
		
		//OCC
		b = ( Double.parseDouble(before.get("Rooms Sold")) / Double.parseDouble(before.get("Rooms Bookable")) ) * 100;
		a = ( Double.parseDouble(after.get("Rooms Sold")) / Double.parseDouble(after.get("Rooms Bookable")) ) * 100;
		reportLogger.info("OCC: "+b+"   "+a);
		double occ = Utility.getRoundOffValueAfterDecimal(Utility.getRoundOffValueAfterDecimal(a) - Utility.getRoundOffValueAfterDecimal(b));
		
		//ADR
		b = Double.parseDouble(before.get("Performance Revenue").substring(1).replaceAll(",", "")) / Double.parseDouble(before.get("Rooms Sold"));
		a = Double.parseDouble(after.get("Performance Revenue").substring(1).replaceAll(",", "")) / Double.parseDouble(after.get("Rooms Sold"));
		reportLogger.info("ADR: "+b+"   "+a);
		double adr = Utility.getRoundOffValueAfterDecimal(Utility.getRoundOffValueAfterDecimal(a) - Utility.getRoundOffValueAfterDecimal(b));
		
		//RevPAR
		b = Double.parseDouble(before.get("Performance Revenue").substring(1).replaceAll(",", "")) / Double.parseDouble(before.get("Rooms Bookable"));
		a = Double.parseDouble(after.get("Performance Revenue").substring(1).replaceAll(",", "")) / Double.parseDouble(after.get("Rooms Bookable"));
		reportLogger.info("RevPAR: "+b+"   "+a);
		double revPAR = Utility.getRoundOffValueAfterDecimal(Utility.getRoundOffValueAfterDecimal(a) - Utility.getRoundOffValueAfterDecimal(b));
		
		calculations.put("Rooms Occupancy", occ);
		calculations.put("Group Pick Ups Percentage", puPercentage);
		calculations.put("Performance ADR", adr);
		calculations.put("Performance RevPAR", revPAR);
		reportLogger.info("Calculations: "+calculations);
		return calculations;
		
	}
	
	public void editRoomForeCastFiltersClick(WebDriver driver) {
		Elements_Reports elements = new Elements_Reports(driver);
		elements.includeGroupSelectedOption.click();
	}
	
	public void selectDateRange(WebDriver driver, String checkInDate, String checkOutDate, String dateRange, ArrayList<String> test_steps) throws Exception {
		if (!dateRange.isEmpty()) {
			reportLogger.info("Date Range given as "+dateRange);
			selectDateRange(driver, dateRange, test_steps);
		} else {
			selectStartdate(driver, checkInDate, test_steps);
			selectEnddate(driver, checkOutDate, test_steps);
		}
	}
	public HashMap<String, Double> setDefaultDataForRoomForeCastReport() {
		HashMap<String, Double> expChanges = new HashMap<>();
		Double zero = 0.0;
		
		expChanges.put("Rooms Total", zero);
		expChanges.put("Rooms Out of Order", zero);
		expChanges.put("Rooms Bookable", zero);
		expChanges.put("Rooms Sold", zero);
		expChanges.put("Rooms Occupancy", zero);
		expChanges.put("Rooms Availability", zero);
		
		expChanges.put("Guests Count", zero);
		expChanges.put("Guests Arrival", zero);
		expChanges.put("Guests Stay Over", zero);
		expChanges.put("Guests Depature", zero);

		expChanges.put("Group Blocks", zero);
		expChanges.put("Group Pick Ups", zero);
		expChanges.put("Group Pick Ups Percentage", zero);
		expChanges.put("Group Revenue", zero);

		expChanges.put("Performance Revenue", zero);
		expChanges.put("Performance ADR", zero);
		expChanges.put("Performance RevPAR", zero);

		return expChanges;
	}

	// This method is to select Break Out Daily Totals option - Transactions
	public void selectBreakOutDailyTotalForTransactionReport(WebDriver driver, ArrayList<String> test_steps, 
			boolean breakOutDailyTotal) {		
		Elements_Reports report = new Elements_Reports(driver);
		
		if (breakOutDailyTotal) {
			selectOrUnselectCheckBox(test_steps, report.breakOutDailyTotalsYes, "Break Out Daily Totals as Yes", true);
		} else {
			selectOrUnselectCheckBox(test_steps, report.breakOutDailyTotalsNo, "Break Out Daily Totals as No", true);
		}
	}

	private void selectOrUnselectCheckBox(ArrayList<String> test_steps, WebElement element, String checkBox, boolean enable) {
		if (enable) {
			if (element.isSelected()) {
				test_steps.add(checkBox+" is already selected");
				reportLogger.info(checkBox+" is already selected");
			} else {
				element.click();
				test_steps.add("Selecting "+checkBox);
				reportLogger.info("Selecting "+checkBox);
			}			
		} else {
			if (element.isSelected()) {
				element.click();
				test_steps.add("Unselecting "+checkBox);
				reportLogger.info("Unselecting "+checkBox);
			} else {
				test_steps.add(checkBox+" is already unselected");
				reportLogger.info(checkBox+" is already unselected");
			}
		}
	}

	public void excludeZeroBalancePaymentMethodsForTransactionReport(WebDriver driver, ArrayList<String> test_steps, 
			boolean excludeZeroBalancePaymentMethods) {		
		Elements_Reports report = new Elements_Reports(driver);
		report.excludeZeroBalancePaymentMethods.click();
		if (excludeZeroBalancePaymentMethods) {
			selectOrUnselectCheckBox(test_steps, report.excludeZeroBalancePaymentMethodsYes, "Exclude Zero Balance Payment Methods", true);
		} else {
			selectOrUnselectCheckBox(test_steps, report.excludeZeroBalancePaymentMethodsNo, "Exclude Zero Balance Payment Methods", true);
		}
	}

	public void includedPaymentMethodsForTransactionReport(WebDriver driver, ArrayList<String> test_steps, String checkBox) {		
		Elements_Reports report = new Elements_Reports(driver);
		String checkBoxXpath = "//span[contains(text(),'"+checkBox+"')]/../../span[contains(@class,'checkbox')]";
		String className = driver.findElement(By.xpath(checkBoxXpath)).getAttribute("class");
		if (!className.contains("checked")) {
			Utility.clickThroughJavaScript(driver, driver.findElement(By.xpath(checkBoxXpath)));
		}
		test_steps.add("Selecting <b>"+checkBox+"</b> check box from Included Payment Methods option");
	}

	public void includedPaymentMethodsForTransactionReport(WebDriver driver, ArrayList<String> test_steps, ArrayList<String> checkBoxes) {
		for (String string : checkBoxes) {
			includedPaymentMethodsForTransactionReport(driver, test_steps, string);			
		}
	}
	
	public HashMap<String, String> getSummaryViewDataForTransactionReport(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports elements = new Elements_Reports(driver);
		HashMap<String, String> data = new HashMap<>();		
		try {
			data.put("Cash", elements.summaryViewCashAmount.getText().replace(TestCore.propertyCurrency, "").trim());			
		} catch (Exception e) {
			data.put("Cash", "0.00");			
			test_steps.add("Cash payment is displayed empty in summary view report");
			reportLogger.info("Cash payment is displayed empty in summary view report");
		}

		try {
			data.put("Check", elements.summaryViewCheckAmount.getText().replace(TestCore.propertyCurrency, "").trim());			
		} catch (Exception e) {
			data.put("Check", "0.00");			
			test_steps.add("Check payment is displayed empty in summary view report");
			reportLogger.info("Check payment is displayed empty in summary view report");
		}

		try {
			data.put("Credit Card", elements.summaryViewCreditCardAmount.getText().replace(TestCore.propertyCurrency, "").trim());
		} catch (Exception e) {
			data.put("Credit Card", "0.00");			
			test_steps.add("Credit Card payment is displayed empty in summary view report");
			reportLogger.info("Credit Card payment is displayed empty in summary view report");
		}
		
		try {
			data.put("Gift Certificate", elements.summaryViewGiftCertificateAmount.getText().replace(TestCore.propertyCurrency, "").trim());
		} catch (Exception e) {
			data.put("Gift Certificate", "0.00");			
			test_steps.add("Credit Card payment is displayed empty in summary view report");
			reportLogger.info("Credit Card payment is displayed empty in summary view report");
		}

		try {
			data.put("Total", elements.summaryViewTotalAmount.getText().replace(TestCore.propertyCurrency, "").trim());
		} catch (Exception e) {
			data.put("Total", "0.00");			
			test_steps.add("Total payment is displayed empty in summary view report");
			reportLogger.info("Total payment is displayed empty in summary view report");
		}	
		return data;
	}
	
	public void validateReservationAddedToDetailedViewForTransactionReport(WebDriver driver, ArrayList<String> test_steps,
			String checkInDate, String guestName, String resNo, String paymentType, String transactionType, 
			String cardNum, String cardHolderName, String amount) throws InterruptedException {	
		if (paymentType.equalsIgnoreCase("MC")) {
			paymentType = "Credit Card";
		}
		String guestNameDisplayed, resNoDisplayed, paymentTypeDisplayed, amountDisplayed, transactionTypeDisplayed = null, 
		cardNumDisplayed = null, cardHolderNameDisplayed = null;

		boolean resFound = false;
		String convertedDate = Utility.parseDate(checkInDate, "dd/MM/yyyy", "MMM dd, yyyy");		
		int size = driver.findElements(By.xpath("//h2[contains(text(),'Detailed View')]/.."
				+ "/following-sibling::div//div[contains(text(),'"+convertedDate+"')]/../following-sibling::div//tr")).size();
		
		for (int i = 3; i <= size; i++) {
			
			guestNameDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/../following-sibling::div"
					+ "//div[contains(text(),'"+convertedDate+"')]/../following-sibling::div//tr)["+i+"]/td)[1]")).getText();
			
			resNoDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/../following-sibling::div"
					+ "//div[contains(text(),'"+convertedDate+"')]/../following-sibling::div//tr)["+i+"]/td)[2]")).getText();

			paymentTypeDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/../following-sibling::div"
					+ "//div[contains(text(),'"+convertedDate+"')]/../following-sibling::div//tr)["+i+"]/td)[4]")).getText();

			amountDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/../following-sibling::div"
					+ "//div[contains(text(),'"+convertedDate+"')]/../following-sibling::div//tr)["+i+"]/td)[10]")).getText()
					.replace(TestCore.propertyCurrency, "");

			if (paymentType.equalsIgnoreCase("Credit Card")) {
				transactionTypeDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/../following-sibling::div"
						+ "//div[contains(text(),'"+convertedDate+"')]/../following-sibling::div//tr)["+i+"]/td)[6]")).getText();

				cardNumDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/../following-sibling::div"
						+ "//div[contains(text(),'"+convertedDate+"')]/../following-sibling::div//tr)["+i+"]/td)[7]")).getText();

				cardHolderNameDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/../following-sibling::div"
						+ "//div[contains(text(),'"+convertedDate+"')]/../following-sibling::div//tr)["+i+"]/td)[9]")).getText();
			}
			if (guestNameDisplayed.equalsIgnoreCase(guestName) && resNoDisplayed.equalsIgnoreCase(resNo)) {
				assertEquals(guestNameDisplayed, guestName, "Failed to validate guest name");
				test_steps.add("Successfully verified <b>"+guestNameDisplayed+"</b> with reservation number <b>"
						+resNoDisplayed+"</b> in transaction report detailed view");
				reportLogger.info("Successfully verified <b>"+guestNameDisplayed+"</b> with reservation number <b>"
						+resNoDisplayed+"</b> in transaction report detailed view");
				try {
					assertEquals(paymentTypeDisplayed, paymentType, "Failed to validate payment type");
					test_steps.add("Successfully verified payment type as <b>"+paymentTypeDisplayed+"</b>");
					reportLogger.info("Successfully verified payment type as <b>"+paymentTypeDisplayed+"</b>");			
				} catch (Exception e) {
					test_steps.add(e.toString());
				} catch (Error e) {
					test_steps.add(e.toString());
				}
				try {
					assertEquals(amountDisplayed, amount, "Failed to validate amount");
					test_steps.add("Successfully verified amount as <b>"+amountDisplayed+"</b>");
					reportLogger.info("Successfully verified amount as <b>"+amountDisplayed+"</b>");
				} catch (Exception e) {
					test_steps.add(e.toString());
				} catch (Error e) {
					test_steps.add(e.toString());
				}

				if (paymentType.equalsIgnoreCase("Credit Card") || paymentType.equalsIgnoreCase("MC")) {
					if (cardNum.equalsIgnoreCase("5454545454545454")) {
						cardNum = "MC (5454)";						
					}
					try {
						assertEquals(transactionTypeDisplayed, transactionType, "Failed to validate transaction type");
						test_steps.add("Successfully verified transaction type as <b>"+transactionTypeDisplayed+"</b>");
						reportLogger.info("Successfully verified transaction type as <b>"+transactionTypeDisplayed+"</b>");						
					} catch (Exception e) {
						test_steps.add(e.toString());
					} catch (Error e) {
						test_steps.add(e.toString());
					}
					try {
						assertEquals(cardNumDisplayed, cardNum, "Failed to validate Credit card last four digits");
						test_steps.add("Successfully verified Credit card last four digits as <b>"+cardNumDisplayed+"</b>");
						reportLogger.info("Successfully verified Credit card last four digits as <b>"+cardNumDisplayed+"</b>");						
					} catch (Exception e) {
						test_steps.add(e.toString());
					} catch (Error e) {
						test_steps.add(e.toString());
					}
					try {
						assertEquals(cardHolderNameDisplayed, cardHolderName, "Failed to validate card holder name");
						test_steps.add("Successfully verified card holder name as <b>"+cardHolderNameDisplayed+"</b>");
						reportLogger.info("Successfully verified card holder name as <b>"+cardHolderNameDisplayed+"</b>");						
					} catch (Exception e) {
						test_steps.add(e.toString());
					} catch (Error e) {
						test_steps.add(e.toString());
					}
				}
				resFound = true;
				break;
			}
		}
		assertEquals(resFound, true, "failed to found record in transaction detailed view report");
	}
	
	public HashMap<String, Double> setDefaultDataForTransactionReport() {
		HashMap<String, Double> expChanges = new HashMap<>();
		Double zero = 0.0;

		expChanges.put("Cash", zero);
		expChanges.put("Check", zero);
		expChanges.put("Credit Card", zero);
		expChanges.put("Total", zero);

		return expChanges;
	}
	
	public void compareTransactionReportSummaryView(ArrayList<String> test_steps, HashMap<String, String> before, HashMap<String, String> after,
			HashMap<String, Double> reduceOrIncreaseCount) throws InterruptedException {
		
		if(!after.get("Credit Card").equals("0.00"))
		{
		compareSingleValue(test_steps, "Credit Card", before.get("Credit Card"), after.get("Credit Card"),
				reduceOrIncreaseCount.get("Credit Card"));
		}else if(!after.get("Check").equals("0.00"))
		{
		compareSingleValue(test_steps, "Check", before.get("Check"), after.get("Check"),
				reduceOrIncreaseCount.get("Check"));
		}else if(!after.get("Cash").equals("0.00"))
		{
		
		compareSingleValue(test_steps, "Cash", before.get("Cash"), after.get("Cash"),
				reduceOrIncreaseCount.get("Cash"));
		}
		else if(!after.get("Gift Certificate").equals("0.00"))
		{
		
		compareSingleValue(test_steps, "Gift Certificate", before.get("Gift Certificate"), after.get("Gift Certificate"),
				reduceOrIncreaseCount.get("Gift Certificate"));
		}
		compareSingleValue(test_steps, "Total", before.get("Total"), after.get("Total"),
				reduceOrIncreaseCount.get("Total"));		
	}

	public void verifyDefaultValuesForTransactionReport(WebDriver driver, ArrayList<String> test_steps, String checkInDate) throws InterruptedException {
		Elements_Reports report = new Elements_Reports(driver);
		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.TransactionsReportHeader), driver);
		String xpath = OR_Reports.dateDropDown+"/../following-sibling::span";
		String dateRange = driver.findElement(By.xpath(xpath)).getText().trim();
		String startDate = report.dateStart.getAttribute("value");
		String endDate = report.dateEnd.getAttribute("value");
		String convertedDate = Utility.parseDate(checkInDate, "dd/MM/yyyy", "MMM dd, yyyy");

		compareValues(test_steps, dateRange, "Today", "default date range displayed");
		compareValues(test_steps, startDate, convertedDate, "default start date displayed");
		compareValues(test_steps, endDate, convertedDate, "default end date displayed");
		
		compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Credit Card"), true, "Credit Card");
		compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Capture"), true, "Capture");
		compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Refund"), true, "Refund");
		compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Cancel (Void)"), true, "Cancel (Void)");
		compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Decline"), true, "Decline");
		compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Failure"), true, "Failure");
		//compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Decline/Failure"), true, "Decline/Failure");
		compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Authorization"), true, "Authorization");
		compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Authorization Reversal"), true, "Authorization Reversal");
		compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Gift Certificate"), true, "Gift Certificate");
		compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Cash"), true, "Cash");
		compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Cash"), true, "Cash");


		String includeDataFrom = report.includeDataFrom.getText();
		String includeAdditionalColumn = report.includeAdditionalColumn.getText();
		String excludeZeroBalancePaymentMethods = report.excludeZeroBalancePaymentMethodsSelected.getText();

		compareValues(test_steps, includeDataFrom, "All Users", "default selected option for Include Data From");
		compareValues(test_steps, includeAdditionalColumn, "None", "default selected option for Include Additional Column");
		compareValues(test_steps, excludeZeroBalancePaymentMethods, "Yes", "default selected option for Exclude Zero Balance Payment Methods");
		
		Utility.ScrollToElement(report.sortReportBy, driver);
		String sortReportBy = report.sortReportBy.getText();
		compareValues(test_steps, sortReportBy, "Time Processed", "default Sort Report By selected");
	
	}

	public boolean verifyIncludedPaymentMethodIsSelected(WebDriver driver, String checkBox) {		
		String checkBoxXpath = "//span[contains(text(),'"+checkBox+"')]/../../self::span[contains(@class,'ant-tree-title')]";
		String className = driver.findElement(By.xpath(checkBoxXpath)).getAttribute("class");
		if (!className.contains("ant-tree-title")) {
			return false;
		} else {
			return true;
		}
	}

	public void compareValues(ArrayList<String> test_steps, String actual, String expected, String check) {		
		try {
			assertEquals(actual, expected, "Failed to verify "+check+" value as : <b>"+expected+"</b>");
			test_steps.add("Succesfully verified "+check+" value as : <b>"+actual+"</b>");
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}
	}

	public void compareValues(ArrayList<String> test_steps, boolean actual, boolean expected, String check) {		
		try {
			assertEquals(actual, expected, "Failed to validate "+check+" check box is checked by default");
			test_steps.add("Successfully verified <b>"+check+"</b> check box is checked by default");
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}
	}

	// This method is to validate all Date Ranges Choose Date Range - Room Forecast Report
	public void validateDateRangesForTransactionsReport(WebDriver driver, ArrayList<String> test_steps, 
			String dateRange, String timeZone, String dateFormat, String startDayOfWeek) {		
		Elements_Reports report = new Elements_Reports(driver);
		try {			
			selectDateRange(driver, dateRange, test_steps);
			String actualDateRange = report.dayCurrentSelected.getText();

			if (actualDateRange.equalsIgnoreCase(dateRange)) {
				reportLogger.info("<b>"+dateRange+"</b> is selected after after clicking on <b>"+dateRange+"</b> in date Dropdown");
				test_steps.add("<b>"+dateRange+"</b> is selected after after clicking on <b>"+dateRange+"</b>  in date Dropdown");
			} else {
				reportLogger.info("Failed, <b>"+dateRange+"</b> is not selected after clicking on <b>"+dateRange+"</b> in date Dropdown. Expected: <b>"+dateRange+"</b>, but Found: " + actualDateRange);
				test_steps.add("AssertionError - Failed, This Week is not selected after clicking on <b>"+dateRange+"</b> in date Dropdown. Expected: <b>"+dateRange+"</b>, but Found: "+ actualDateRange);
			}
			
			String actStartDate = getStartDate(driver, test_steps);
			String actEndDate = getEndDate(driver, test_steps);

			
			String expStartDate = null, expEndDate = null;
			
			if (dateRange.equalsIgnoreCase("Last Week")) {
				GregorianCalendar dayOfThisWeek = new GregorianCalendar();
				if (startDayOfWeek.equalsIgnoreCase("Monday")) {
					dayOfThisWeek.add(Calendar.DATE, -((dayOfThisWeek.get(Calendar.DAY_OF_WEEK) + 7 - Calendar.MONDAY) % 7));
				}else if (startDayOfWeek.equalsIgnoreCase("Sunday")) {
					dayOfThisWeek.add(Calendar.DATE, -((dayOfThisWeek.get(Calendar.DAY_OF_WEEK) + 7 - Calendar.SUNDAY) % 7));
				}
				dayOfThisWeek.add(Calendar.WEEK_OF_MONTH, -1);				
				expStartDate = new SimpleDateFormat(dateFormat).format(dayOfThisWeek.getTime());
				reportLogger.info("Expected Start date: "+expStartDate);
				dayOfThisWeek.add(Calendar.DAY_OF_WEEK, 6);
				expEndDate = new SimpleDateFormat(dateFormat).format(dayOfThisWeek.getTime());
				reportLogger.info("Expected End date: "+expEndDate);
			} else if (dateRange.equalsIgnoreCase("Last Month")) {
				SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy");
				Calendar cal = Calendar.getInstance();
				cal.add(Calendar.MONTH, -1);
				cal.set(Calendar.DATE, 1);
				Date firstDateOfPreviousMonth = cal.getTime();
				cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
				Date lastDateOfPreviousMonth = cal.getTime();
				expStartDate = sdf.format(firstDateOfPreviousMonth.getTime());
				expEndDate = sdf.format(lastDateOfPreviousMonth.getTime());
				reportLogger.info("Expected Start date: "+expStartDate);
				reportLogger.info("Expected End date: "+expEndDate);
			}

			if (actStartDate.equalsIgnoreCase(expStartDate) && actEndDate.equalsIgnoreCase(expEndDate)) {
				reportLogger.info("Success - <b>"+dateRange+"</b> Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("Success - <b>"+dateRange+"</b> Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
			}else {
				reportLogger.info("Failed - <b>"+dateRange+"</b> Date Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
				test_steps.add("AssertionError - Failed - <b>"+dateRange+"</b> Date Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
			}
			
		}catch(Exception e) {
			test_steps.add("AssertionError - Exception occured "+e.toString());
		}		
	}

	public void validateSortReportByForTransactionsReport(WebDriver driver, ArrayList<String> test_steps, 
			ArrayList<String> items) throws Exception {
		Elements_Reports elements = new Elements_Reports(driver);
		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.sortReportBy), driver);
		Utility.ScrollToElement(elements.sortReportBy, driver);
		elements.sortReportBy.click();
		Wait.wait5Second();
		for (int i = 1; i <= 5; i++) {
			int j = i+3;
			String itemDisplayed = driver.findElement(By.xpath("(//div[@class='ant-select-item-option-content'])["+j+"]")).getText().trim();
			String item = items.get(i-1);
			try {
				assertEquals(itemDisplayed, item, "Failed to validate Sort Report By option at row "+i);
				test_steps.add("Successfully verified Sort Report By option at row <b>"+i+"</b> as <b>"+itemDisplayed+"</b>");
			} catch (Exception e) {
				test_steps.add(e.toString());
			} catch (Error e) {
				test_steps.add(e.toString());
			}
		}
	}
	
	public void validatePropertyNameForTransactionsReport(WebDriver driver, ArrayList<String> test_steps, 
			String propertyName) throws Exception {
		Elements_Reports elements = new Elements_Reports(driver);
		Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.propertyName), driver);
		Utility.ScrollToElement(elements.propertyName, driver);
		String propertyNameDisplayed = elements.propertyName.getText().trim();
		try {
			assertEquals(propertyNameDisplayed, propertyName, "Failed to validate Property Name");
			test_steps.add("Successfully verified Property Name as : <b>"+propertyNameDisplayed+"</b>");
		} catch (Exception e) {
			test_steps.add(e.toString());
		} catch (Error e) {
			test_steps.add(e.toString());
		}
	}

	public boolean validateAdvancedOptionsToolTipForTransactionsReport(WebDriver driver, 
			ArrayList<String> test_steps) throws Exception {
		String toolTipIconXpath = "//*[text()='Advanced Inputs']/following-sibling::span/span/span";
		String toolTipHeader = "Advanced Inputs";
		String toolTipDesc = "Expand this section to view the list of advanced options you can choose from, to narrow down your search and filter the report data further.";
		String toolTipToValidate = "Advanced Inputs";
		boolean flag = validateToolTip(driver, test_steps, toolTipIconXpath, toolTipHeader, toolTipDesc, toolTipToValidate, null, null, 2);
		return flag;	
	}
	
	public boolean validateDateRangeToolTipForTransactionsReport(WebDriver driver, ArrayList<String> test_steps) throws Exception {
		String toolTipIconXpath = "//*[text()='Choose Date Range']/following-sibling::span/span/span";
		String toolTipHeader = "Choose Date Range";
		String toolTipDesc = "Select the pre-defined date range or enter a custom date range.";
		String toolTipToValidate = "Choose Date Range";
		boolean flag = validateToolTip(driver, test_steps, toolTipIconXpath, toolTipHeader, toolTipDesc, toolTipToValidate, 
				null, null, 1);
		return flag;	
	}

	public boolean validateIncludedPaymentMethodsToolTipForTransactionsReport(WebDriver driver, 
			ArrayList<String> test_steps) throws Exception {
		String toolTipIconXpath = "//*[text()='Included Payment Methods']/../following-sibling::span/span/span";
		String toolTipHeader = "Included Payment Methods";
		String toolTipDesc = "Define which Payment Methods are to be included in the report.";
		String toolTipToValidate = "Included Payment Methods";
		boolean flag = validateToolTip(driver, test_steps, toolTipIconXpath, toolTipHeader, toolTipDesc, toolTipToValidate, null, null, 6);
		return flag;	
	}
	
	public boolean validateBreakOutDailyTotalsToolTipForTransactionsReport(WebDriver driver, 
			ArrayList<String> test_steps) throws Exception {
		String toolTipIconXpath = "//*[text()='Break Out Daily Totals']/../following-sibling::span/span/span";
		String toolTipHeader = "Break Out Daily Totals";
		String toolTipDesc = "Generate the report with daily breakout of totals on the detailed section corresponding to the Payment Method, Transaction Types and Credit Card Transaction Types";
		String toolTipToValidate = "Break Out Daily Totals";
		boolean flag = validateToolTip(driver, test_steps, toolTipIconXpath, toolTipHeader, toolTipDesc, toolTipToValidate, null, null,7);
		return flag;	
	}

	public boolean validateSortReportByToolTipForTransactionsReport(WebDriver driver, 
			ArrayList<String> test_steps) throws Exception {
		String toolTipIconXpath = "//*[text()='Sort Report By']/../following-sibling::span/span/span";
		String toolTipHeader = "Sort Report By";
		String toolTipDesc = "Sorts the report data in the detailed view based on the list of options in the dropdown.";
		String toolTipToValidate = "Sort Report By";
		boolean flag = validateToolTip(driver, test_steps, toolTipIconXpath, toolTipHeader, toolTipDesc, toolTipToValidate, null, null, 8);
		return flag;	
	}

	public boolean validateIncludeDataFromToolTipForTransactionsReport(WebDriver driver, 
			ArrayList<String> test_steps) throws Exception {
		String toolTipIconXpath = "//*[text()='Include Data From']/following-sibling::span/span/span";
		String toolTipHeader = "Include Data From";
		String toolTipDesc = "Generate the report for other/ all users. In order to run this report as another user, you will need to have the entitlement called ‘Run Reports as other users’ enabled.";
		String toolTipToValidate = "Include Data From";
		boolean flag = validateToolTip(driver, test_steps, toolTipIconXpath, toolTipHeader, toolTipDesc, toolTipToValidate, null, null, 3);
		return flag;	
	}

	public boolean validateIncludeAdditionalColumnToolTipForTransactionsReport(WebDriver driver, 
			ArrayList<String> test_steps) throws Exception {
		String toolTipIconXpath = "//*[text()='Include Additional Column']/following-sibling::span/span/span";
		String toolTipHeader = "Include Additional Column";
		String toolTipDesc = "Allows you to include transaction Order ID and Authorization Code in the report output.";
		String toolTipToValidate = "Include Additional Column";
		boolean flag = validateToolTip(driver, test_steps, toolTipIconXpath, toolTipHeader, toolTipDesc, toolTipToValidate, null, null, 4);
		return flag;	
	}

	public boolean validateExcludeZeroBalancePaymentMethodsToolTipForTransactionsReport(WebDriver driver, 
			ArrayList<String> test_steps) throws Exception {
		String toolTipIconXpath = "//*[text()='Exclude Zero Balance Payment Methods']/following-sibling::span/span/span";
		String toolTipHeader = "Exclude Zero Balance Payment Methods";
		String toolTipDesc = "Allows you to include transaction Order ID and Authorization Code in the report output.";
		String toolTipToValidate = "Exclude Zero Balance Payment Methods";
		boolean flag = validateToolTip(driver, test_steps, toolTipIconXpath, toolTipHeader, toolTipDesc, toolTipToValidate, null, null, 5);
		return flag;	
	}

	public void validateAllToolTipsForTransactionsReport(WebDriver driver, ArrayList<String> test_steps) throws Exception {
		validateDateRangeToolTipForTransactionsReport(driver, test_steps);
		validateAdvancedOptionsToolTipForTransactionsReport(driver, test_steps);
		validateIncludeDataFromToolTipForTransactionsReport(driver, test_steps);
		validateIncludeAdditionalColumnToolTipForTransactionsReport(driver, test_steps);
		validateExcludeZeroBalancePaymentMethodsToolTipForTransactionsReport(driver, test_steps);
		validateIncludedPaymentMethodsToolTipForTransactionsReport(driver, test_steps);
		validateBreakOutDailyTotalsToolTipForTransactionsReport(driver, test_steps);
		validateSortReportByToolTipForTransactionsReport(driver, test_steps);
	}
		
	public boolean validateToolTip(WebDriver driver, ArrayList<String> test_steps, String toolTipIconXpath,
			String toolTipHeader, String toolTipDesc, String toolTipToValidate, String header, String desc,
			int size ) throws Exception {
		boolean flag = false;
		WebElement e = driver.findElement(By.xpath(toolTipIconXpath));
//		Utility.ScrollToElement(e, driver);
		Utility.hoverOnElement(driver, e);
		
		Wait.wait5Second();
		String headerXpath, descXpath;
		if (Utility.validateString(header) && Utility.validateString(desc)) {
			headerXpath = header; descXpath = desc;
		} else {
			headerXpath = "//div[@class='ant-popover-title']/b"; descXpath = "//div[@class='ant-popover-inner-content']/p";
		}
		Wait.wait5Second();
		if (size != 0) {
			headerXpath = "("+headerXpath+")["+size+"]"; descXpath = "("+descXpath+")["+size+"]";			
		}
		System.out.println(driver.findElements(By.xpath(headerXpath)).size());
		try {
			String act1 = driver.findElement(By.xpath(headerXpath)).getText().trim();
			String act2 = driver.findElement(By.xpath(descXpath)).getText().trim();	
			if ((toolTipHeader.equals(act1)) && (toolTipDesc.equals(act2))) {
				flag = true;
				reportLogger.info("Success - <b>"+toolTipToValidate+"</b> tooltip validation");
				test_steps.add("Sucess - <b>"+toolTipToValidate+"</b> tooltip validation");
			} else {
				flag = false;
				reportLogger.info("Failed - <b>"+toolTipToValidate+"</b> tooltip validation. Expected : <b>"+toolTipDesc+"</b> But found : <b>"+act2+"</b>");
				test_steps.add("AssertionError - Failed - <b>"+toolTipToValidate+"</b> tooltip validation. Expected : <b>"+toolTipDesc+"</b> But found : <b>"+act2+"</b>");
			}			
		} catch (Exception e2) {
			test_steps.add(e2.toString());
		} catch (Error e2) {
			test_steps.add(e2.toString());
		}
		return flag;	
	}                             

	//Advanced Deposits report methods
	public void clickGivenSelectInput(WebDriver driver, ArrayList<String> test_steps, String selectInput) {
		
		String strCheckbox = "//span[@title='"+selectInput+"']/../span[contains(@class,'ant-tree-checkbox')]";
		WebElement checkbox = driver.findElement(By.xpath(strCheckbox));
		if (!checkbox.getAttribute("class").contains("checked")) {
			checkbox.click();
			reportLogger.info("Clicked on "+selectInput+" select input checkbox");
			test_steps.add("Clicked on "+selectInput+" select input checkbox");
		}else {
			reportLogger.info("Given select unput already selected");
		}
	}
	
	public void selectInputsAdvancedDeposit(WebDriver driver, ArrayList<String> test_steps, String selectInput) {		
		if (selectInput.split("\\|").length > 1) {
			String[] inputs = selectInput.split("\\|");
			for (int i = 0; i < inputs.length; i++) {
				clickGivenSelectInput(driver, test_steps, inputs[i]);
			}
		}else {
			clickGivenSelectInput(driver, test_steps, selectInput);
		}	
	}

	// methods for after run report
	public HashMap<String, HashMap<String, String>> getSummaryViewDataAdvancedDeposit(WebDriver driver, ArrayList<String> test_steps)
			throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		HashMap<String, HashMap<String, String>> data = new HashMap<>();
		
		List<WebElement> rows = driver
				.findElements(By.xpath("//*[contains(text(),'Advanced Deposit Type')]//ancestor::table/tbody/tr"));
		for (int i = 0; i < rows.size(); i++) {
			HashMap<String, String> category = new HashMap<>();
			List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
			category.put("Guest Advanced Deposit", cells.get(1).getText());
			category.put("Account Advanced Deposit", cells.get(2).getText());
			category.put("Total Advanced Deposit", cells.get(3).getText());
			reportLogger.info("Details " + category);
			data.put(cells.get(0).getText(), category);
		}
		reportLogger.info("Data " + data);
		return data;
	}
	
	
	public HashMap<String, ArrayList<String>> getDetailedViewListAdvancedDeposit(WebDriver driver, String input, String category,
			ArrayList<String> test_steps) throws InterruptedException, ParseException {

		Elements_Reports report = new Elements_Reports(driver);
		HashMap<String, ArrayList<String>> details = new HashMap<>();
		// ArrayList<String> data = new ArrayList<>();

//		String strLedger = "(//*[contains(text(),'Detailed View | Advance Deposit Report')]//following::div[contains(text(),'"
//				+ input + "')]//parent::div//following::table)[1]";
		//String strLedger = "(//*[contains(text(),'Detailed View | Advance Deposit Report')]//following::div[contains(text(),'"+input+"')]//following::div[text()='"+category+"']/../..//table)[1]";
		String strLedger = "(//*[contains(text(),'Detailed View | Advance Deposit Report')]//following::div[contains(text(),'"+input+"')]//following::div[text()='"+category+"']/../../../../../../table)[1]";
		List<WebElement> header = driver.findElements(By.xpath(strLedger + "/thead/tr[3]/th"));
		reportLogger.info("header Size " + header.size());
//		String strItemTable = "(//div[contains(text(),'" + input + "')])[1]//following::table[1]//tr";

		List<WebElement> rowData = driver.findElements(By.xpath(strLedger + "/tbody/tr"));
		reportLogger.info("Transaction rows: " + rowData.size());

		try {
			List<WebElement> cellData = rowData.get(0).findElements(By.tagName("td"));
			reportLogger.info("Cell Data size: " + cellData.size());

			for (int i = 0; i < cellData.size(); i++) {
				ArrayList<String> data = new ArrayList<>();
				for (int j = 0; j < rowData.size(); j++) {
					List<WebElement> cells = rowData.get(j).findElements(By.tagName("td"));
					data.add(cells.get(i).getText());
				}
				reportLogger.info("Data All: " + data);
				details.put(header.get(i).getText(), data);
			}
		} catch (Exception e) {
			reportLogger.info(e.toString());
			reportLogger.info("No data found for " + input);
			test_steps.add("AssertionError - No data found for " + input);
		}
		return details;
	}
	
	public double getDiferenceAndConvertToDouble(String before, String after) {		
		double diff = Double.parseDouble(after.replaceAll("[$£ ]", "").trim()) - Double.parseDouble(before.replaceAll("[$£ ]", "").trim());
		return diff;		
	}
	
	public void validateSummaryViewAdvancedDeposit(WebDriver driver, ArrayList<String> input, HashMap<String, HashMap<String, String>> beforeSummaryViewData, 
			HashMap<String, HashMap<String, String>> afterSummaryViewData, HashMap<String, HashMap<String, Double>> expSummaryViewData, ArrayList<String> test_steps) {
		
		for (int i = 0; i < input.size(); i++) {
			double expectedGuestAdvancedDeposit = expSummaryViewData.get(input.get(i)).get("Guest Advanced Deposit");
			double expectedAccountAdvancedDeposit = expSummaryViewData.get(input.get(i)).get("Account Advanced Deposit");
			double expectedTotalAdvancedDeposit = expSummaryViewData.get(input.get(i)).get("Total Advanced Deposit");
			double actualGuestAdvancedDeposit, actualAccountAdvancedDeposit, actualTotalAdvancedDeposit;
			if (beforeSummaryViewData.isEmpty()) {
				actualGuestAdvancedDeposit = Double.parseDouble(afterSummaryViewData.get(input.get(i)).get("Guest Advanced Deposit").replaceAll("[$£ ]", "").trim());
				actualAccountAdvancedDeposit = Double.parseDouble(afterSummaryViewData.get(input.get(i)).get("Account Advanced Deposit").replaceAll("[$£ ]", "").trim());
				actualTotalAdvancedDeposit = Double.parseDouble(afterSummaryViewData.get(input.get(i)).get("Total Advanced Deposit").replaceAll("[$£ ]", "").trim());

			}else {
				actualGuestAdvancedDeposit = getDiferenceAndConvertToDouble(beforeSummaryViewData.get(input.get(i)).get("Guest Advanced Deposit"), afterSummaryViewData.get(input.get(i)).get("Guest Advanced Deposit"));
				actualAccountAdvancedDeposit = getDiferenceAndConvertToDouble(beforeSummaryViewData.get(input.get(i)).get("Account Advanced Deposit"), afterSummaryViewData.get(input.get(i)).get("Account Advanced Deposit"));
				actualTotalAdvancedDeposit = getDiferenceAndConvertToDouble(beforeSummaryViewData.get(input.get(i)).get("Total Advanced Deposit"), afterSummaryViewData.get(input.get(i)).get("Total Advanced Deposit"));
			}
						
			if (expectedGuestAdvancedDeposit == actualGuestAdvancedDeposit) {
				reportLogger.info("Success "+input.get(i)+" - Guest Advanced Deposit validated successfully");
				test_steps.add("Success "+input.get(i)+" - Guest Advanced Deposit validated successfully");
			}else {
				reportLogger.info("Failed "+input.get(i)+" - Guest Advanced Deposit validation failed. Expected: "+expectedGuestAdvancedDeposit+" But found: "+actualGuestAdvancedDeposit);
				test_steps.add("AssertionError - Failed "+input.get(i)+" - Guest Advanced Deposit validation failed. Expected: "+expectedGuestAdvancedDeposit+" But found: "+actualGuestAdvancedDeposit);
			}
			
			if (expectedAccountAdvancedDeposit == actualAccountAdvancedDeposit) {
				reportLogger.info("Success "+input.get(i)+" - Account Advanced Deposit validated successfully");
				test_steps.add("Success "+input.get(i)+" - Account Advanced Deposit validated successfully");
			}else {
				reportLogger.info("Failed "+input.get(i)+" - Account Advanced Deposit validation failed. Expected: "+expectedAccountAdvancedDeposit+" But found: "+actualAccountAdvancedDeposit);
				test_steps.add("AssertionError - Failed "+input.get(i)+" - Account Advanced Deposit validation failed. Expected: "+expectedAccountAdvancedDeposit+" But found: "+actualAccountAdvancedDeposit);
			}
			
			if (expectedTotalAdvancedDeposit == actualTotalAdvancedDeposit) {
				reportLogger.info("Success "+input.get(i)+" - Total Advanced Deposit validated successfully");
				test_steps.add("Success "+input.get(i)+" - Total Advanced Deposit validated successfully");
			}else {
				reportLogger.info("Failed "+input.get(i)+" - Total Advanced Deposit validation failed. Expected: "+expectedTotalAdvancedDeposit+" But found: "+actualTotalAdvancedDeposit);
				test_steps.add("AssertionError - Failed "+input.get(i)+" - Total Advanced Deposit validation failed. Expected: "+expectedTotalAdvancedDeposit+" But found: "+actualTotalAdvancedDeposit);
			}
		}		
	}
	
	
	public HashMap<String, HashMap<String, Double>> setDefaultSummaryViewDataAdvancedDeposit(){
		HashMap<String, HashMap<String, Double>> expChanges = new HashMap<>();
		double value = 0.0;
		HashMap<String, Double> deposit = new HashMap<>();
		String[] input = {"Deposits Held as Liability (Inbound)", "Deposits Added to Portfolio (Outbound)", "Net Deposits", "Refunded Deposits (Cancellations)"};
		for (int i = 0; i < input.length; i++) {
			deposit.clear();
			deposit.put("Guest Advanced Deposit", value);
			deposit.put("Account Advanced Deposit", value);
			deposit.put("Total Advanced Deposit", value);
			
			expChanges.put(input[i], deposit);
		}
		return expChanges;
	}
	
	public HashMap<String, Double> setDefaultSummaryViewDataAdvancedDepositWithType(){
		HashMap<String, Double> deposit = new HashMap<>();
		double value = 0.0;
		deposit.put("Guest Advanced Deposit", value);
		deposit.put("Account Advanced Deposit", value);
		deposit.put("Total Advanced Deposit", value);
		return deposit;
	}
	
	public HashMap<String, HashMap<String, ArrayList<String>>> setDefaultDetailedViewDataAdvancedDepositGuest(){
		HashMap<String, HashMap<String, ArrayList<String>>> deposit = new HashMap<>();
		
		deposit.put("Deposits Held as Liability (Inbound)", new HashMap<>());
		deposit.put("Deposits Added to Portfolio (Outbound)", new HashMap<>());
		deposit.put("Net Deposits", new HashMap<>());
		deposit.put("Refunded Deposits (Cancellations)", new HashMap<>());
		return deposit;
	}
	
	public void validateDetailedViewGuestAdvancedDeposit(WebDriver driver, ArrayList<String> input, 
			HashMap<String, HashMap<String, ArrayList<String>>> expDetailedViewData, ArrayList<String> test_steps) throws Exception {
		
		for (int i = 0; i < input.size(); i++) {
			HashMap<String, ArrayList<String>> actDetailedViewData = getDetailedViewListAdvancedDeposit(driver, input.get(i), "Guest Advanced Deposits", test_steps);			

			if (!expDetailedViewData.get(input.get(i)).isEmpty()) {
				//Reservation#
				if (actDetailedViewData.get("Reservation #").containsAll(expDetailedViewData.get(input.get(i)).get("Reservation #"))) {
					reportLogger.info("Reservation # "+expDetailedViewData.get(input.get(i)).get("Reservation #")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("Reservation # "+expDetailedViewData.get(input.get(i)).get("Reservation #")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Reservation # "+expDetailedViewData.get(input.get(i)).get("Reservation #")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Reservation # "+expDetailedViewData.get(input.get(i)).get("Reservation #")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}
				
				//Arrival Date
				if (actDetailedViewData.get("Arrival Date").containsAll(expDetailedViewData.get(input.get(i)).get("Arrival Date"))) {
					reportLogger.info("Arrival Date "+expDetailedViewData.get(input.get(i)).get("Arrival Date")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("Arrival Date "+expDetailedViewData.get(input.get(i)).get("Arrival Date")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Arrival Date "+expDetailedViewData.get(input.get(i)).get("Arrival Date")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Arrival Date "+expDetailedViewData.get(input.get(i)).get("Arrival Date")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}
							
				//Departure Date
				if (actDetailedViewData.get("Departure Date").containsAll(expDetailedViewData.get(input.get(i)).get("Departure Date"))) {
					reportLogger.info("Departure Date "+expDetailedViewData.get(input.get(i)).get("Departure Date")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("Departure Date "+expDetailedViewData.get(input.get(i)).get("Departure Date")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Departure Date "+expDetailedViewData.get(input.get(i)).get("Departure Date")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Departure Date "+expDetailedViewData.get(input.get(i)).get("Departure Date")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}
				
				//Room #
				if (actDetailedViewData.get("Room #").containsAll(expDetailedViewData.get(input.get(i)).get("Room #"))) {
					reportLogger.info("Room # "+expDetailedViewData.get(input.get(i)).get("Room #")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("Room # "+expDetailedViewData.get(input.get(i)).get("Room #")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Room # "+expDetailedViewData.get(input.get(i)).get("Room #")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Room # "+expDetailedViewData.get(input.get(i)).get("Room #")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}
				
				//Guest Name
				if (actDetailedViewData.get("Guest Name").containsAll(expDetailedViewData.get(input.get(i)).get("Guest Name"))) {
					reportLogger.info("Guest Name "+expDetailedViewData.get(input.get(i)).get("Guest Name")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("Guest Name "+expDetailedViewData.get(input.get(i)).get("Guest Name")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Guest Name "+expDetailedViewData.get(input.get(i)).get("Guest Name")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Guest Name "+expDetailedViewData.get(input.get(i)).get("Guest Name")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}
				
				//User Processed
				if (actDetailedViewData.get("User Processed").containsAll(expDetailedViewData.get(input.get(i)).get("User Processed"))) {
					reportLogger.info("User Processed "+expDetailedViewData.get(input.get(i)).get("User Processed")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("User Processed "+expDetailedViewData.get(input.get(i)).get("User Processed")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - User Processed "+expDetailedViewData.get(input.get(i)).get("User Processed")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - User Processed "+expDetailedViewData.get(input.get(i)).get("User Processed")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}				
				
				//Deposit Accepted Date
				if (actDetailedViewData.get("Deposit Accepted Date").containsAll(expDetailedViewData.get(input.get(i)).get("Deposit Accepted Date"))) {
					reportLogger.info("Deposit Accepted Date "+expDetailedViewData.get(input.get(i)).get("Deposit Accepted Date")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("Deposit Accepted Date "+expDetailedViewData.get(input.get(i)).get("Deposit Accepted Date")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Deposit Accepted Date "+expDetailedViewData.get(input.get(i)).get("Deposit Accepted Date")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Deposit Accepted Date "+expDetailedViewData.get(input.get(i)).get("Deposit Accepted Date")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}
				
				//Description
				if (actDetailedViewData.get("Description").containsAll(expDetailedViewData.get(input.get(i)).get("Description"))) {
					reportLogger.info("Description "+expDetailedViewData.get(input.get(i)).get("Description")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("Description "+expDetailedViewData.get(input.get(i)).get("Description")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Description "+expDetailedViewData.get(input.get(i)).get("Description")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Description "+expDetailedViewData.get(input.get(i)).get("Description")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}
				
				//Deposit Amount
				if (actDetailedViewData.get("Deposit Amount").containsAll(expDetailedViewData.get(input.get(i)).get("Deposit Amount"))) {
					reportLogger.info("Deposit Amount "+expDetailedViewData.get(input.get(i)).get("Deposit Amount")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("Deposit Amount "+expDetailedViewData.get(input.get(i)).get("Deposit Amount")+" of new reservation is found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Deposit Amount "+expDetailedViewData.get(input.get(i)).get("Deposit Amount")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Deposit Amount "+expDetailedViewData.get(input.get(i)).get("Deposit Amount")+" of new reservation is not found in "+input.get(i)+" - Guest Advanced Deposit detailed view");
				}
			}			
		}
	}
	
	
	public void validateDetailedViewAccountAdvancedDeposit(WebDriver driver, ArrayList<String> input, 
			HashMap<String, HashMap<String, ArrayList<String>>> expDetailedViewData, ArrayList<String> test_steps) throws Exception {
		
		for (int i = 0; i < input.size(); i++) {
			HashMap<String, ArrayList<String>> actDetailedViewData = getDetailedViewListAdvancedDeposit(driver, input.get(i), "Account Advanced Deposits", test_steps);			
			reportLogger.info(input.get(i)+" Detailed view data: "+actDetailedViewData);
			if (!expDetailedViewData.get(input.get(i)).isEmpty()) {
				//Account #
				if (actDetailedViewData.get("Account #").containsAll(expDetailedViewData.get(input.get(i)).get("Account #"))) {
					reportLogger.info("Account # "+expDetailedViewData.get(input.get(i)).get("Account #")+" of new Account is found in "+input.get(i)+" - Account Advanced Deposit detailed view");
					test_steps.add("Account # "+expDetailedViewData.get(input.get(i)).get("Account #")+" of new reservation is found in "+input.get(i)+" - Account Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Account # "+expDetailedViewData.get(input.get(i)).get("Account #")+" of new Account is not found in "+input.get(i)+" - Account Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Account # "+expDetailedViewData.get(input.get(i)).get("Account #")+" of new Account is not found in "+input.get(i)+" - Account Advanced Deposit detailed view");
				}
				
				//Account Name
				if (actDetailedViewData.get("Account Name").containsAll(expDetailedViewData.get(input.get(i)).get("Account Name"))) {
					reportLogger.info("Account Name "+expDetailedViewData.get(input.get(i)).get("Account Name")+" of new Account is found in "+input.get(i)+" - Account Advanced Deposit detailed view");
					test_steps.add("Account Name "+expDetailedViewData.get(input.get(i)).get("Account Name")+" of new Account is found in "+input.get(i)+" - Account Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Account Name "+expDetailedViewData.get(input.get(i)).get("Account Name")+" of new Account is not found in "+input.get(i)+" - Account Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Account Name "+expDetailedViewData.get(input.get(i)).get("Account")+" of new Account is not found in "+input.get(i)+" - Account Advanced Deposit detailed view");
				}
				
				//User Processed
				if (actDetailedViewData.get("User Processed").containsAll(expDetailedViewData.get(input.get(i)).get("User Processed"))) {
					reportLogger.info("User Processed "+expDetailedViewData.get(input.get(i)).get("User Processed")+" of new Account is found in "+input.get(i)+" - Account Advanced Deposit detailed view");
					test_steps.add("User Processed "+expDetailedViewData.get(input.get(i)).get("User Processed")+" of new Account is found in "+input.get(i)+" - Account Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - User Processed "+expDetailedViewData.get(input.get(i)).get("User Processed")+" of new Account is not found in "+input.get(i)+" - Account Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - User Processed "+expDetailedViewData.get(input.get(i)).get("User Processed")+" of new Account is not found in "+input.get(i)+" - Account Advanced Deposit detailed view");
				}
								
				//Deposit Accepted Date
				if (actDetailedViewData.get("Deposit Accepted Date").containsAll(expDetailedViewData.get(input.get(i)).get("Deposit Accepted Date"))) {
					reportLogger.info("Deposit Accepted Date "+expDetailedViewData.get(input.get(i)).get("Deposit Accepted Date")+" of new Account is found in "+input.get(i)+" - Account Advanced Deposit detailed view");
					test_steps.add("Deposit Accepted Date "+expDetailedViewData.get(input.get(i)).get("Deposit Accepted Date")+" of new Account is found in "+input.get(i)+" - Account Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Deposit Accepted Date "+expDetailedViewData.get(input.get(i)).get("Deposit Accepted Date")+" of new Account is not found in "+input.get(i)+" - Account Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Deposit Accepted Date "+expDetailedViewData.get(input.get(i)).get("Deposit Accepted Date")+" of new Account is not found in "+input.get(i)+" - Account Advanced Deposit detailed view");
				}
				
				//Description
				if (actDetailedViewData.get("Description").containsAll(expDetailedViewData.get(input.get(i)).get("Description"))) {
					reportLogger.info("Description "+expDetailedViewData.get(input.get(i)).get("Description")+" is found in "+input.get(i)+" - Account Advanced Deposit detailed view");
					test_steps.add("Description "+expDetailedViewData.get(input.get(i)).get("Description")+" is found in "+input.get(i)+" - Account Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Description "+expDetailedViewData.get(input.get(i)).get("Description")+" is not found in "+input.get(i)+" - Account Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Description "+expDetailedViewData.get(input.get(i)).get("Description")+" is not found in "+input.get(i)+" - Account Advanced Deposit detailed view");
				}
				
				//Deposit Amount
				if (actDetailedViewData.get("Deposit Amount").containsAll(expDetailedViewData.get(input.get(i)).get("Deposit Amount"))) {
					reportLogger.info("Deposit Amount "+expDetailedViewData.get(input.get(i)).get("Deposit Amount")+" of new Account is found in "+input.get(i)+" - Account Advanced Deposit detailed view");
					test_steps.add("Deposit Amount "+expDetailedViewData.get(input.get(i)).get("Deposit Amount")+" of new Account is found in "+input.get(i)+" - Account Advanced Deposit detailed view");
				}else {
					reportLogger.info("Failed - Deposit Amount "+expDetailedViewData.get(input.get(i)).get("Deposit Amount")+" of new Account is not found in "+input.get(i)+" - Account Advanced Deposit detailed view");
					test_steps.add("AssertionError - Failed - Deposit Amount "+expDetailedViewData.get(input.get(i)).get("Deposit Amount")+" of new Account is not found in "+input.get(i)+" - Account Advanced Deposit detailed view");
				}
			}			
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ 
	 * methodId : AUTOMATION-2299-1
	 * methodName : selectEffectiveDate
	 * methodDescription : This method will select effective date in folio balance reports v2 page
	 * Written By : Muhammad Bakar
	 * Written on : 03/25/2021 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */

	public void selectEffectiveDate(WebDriver driver, String checkInDate, String dateRange, ArrayList<String> test_steps) throws Exception {
		if (!dateRange.isEmpty()) {
			reportLogger.info("Date Range given as "+dateRange);
			selectDateRange(driver, dateRange, test_steps);
		} else {
			selectStartdate(driver, checkInDate, test_steps);
		}
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ 
	 * methodId : AUTOMATION-2299-2
	 * methodName : navigateToFolioBalanceReport
	 * methodDescription : This method will navigate to folio balance reports v2 page
	 * Written By : Muhammad Bakar
	 * Written on : 03/25/2021 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	
	public void navigateToFolioBalanceReport(WebDriver driver, ArrayList<String> testSteps) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.waitForElementByXpath(driver, OR_Reports.FolioBalancesReport);
		res.FolioBalancesReport.click();
		Utility.switchTab(driver, 1);
		Utility.printSteps(testSteps, reportLogger, "CLick On Folio Balances Report");
		reportLogger.info("CLick On Folio Balances Report");
		
	}	
	

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ 
	 * methodId : AUTOMATION-2299-3
	 * methodName : clickClearAllButton
	 * methodDescription : This method will click on clear all button in folio balance reports v2 page
	 * Written By : Muhammad Bakar
	 * Written on : 03/25/2021 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
	public void clickeditButton(WebDriver driver, ArrayList<String> testSteps) {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.waitForElementByXpath(driver, OR_Reports.editButton);
		res.editButton.click();		
		Utility.printSteps(testSteps, reportLogger, "Clicked Edit button");
	}	
	
	public void clickClearAllButton(WebDriver driver, ArrayList<String> testSteps) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.waitForElementByXpath(driver, OR_Reports.clearAllButton);
		Wait.wait5Second();
		res.clearAllButton.click();		
		Utility.printSteps(testSteps, reportLogger, "Clicked Clear All button");
	}

	/*
	 * #############################################################################
	 * #############################################################################
	 * ################ 
	 * methodId : AUTOMATION-2299-4
	 * methodName : clickReservedCheckBox
	 * methodDescription : This method will click on reserved checkbox in folio balance reports v2 page
	 * Written By : Muhammad Bakar
	 * Written on : 03/25/2021 
	 * #############################################################################
	 * #############################################################################
	 * ################
	 */
		
	public void clickReservedCheckBox(WebDriver driver, ArrayList<String> testSteps,String value) {
		Elements_Reports res = new Elements_Reports(driver);
		String checkBox="//span[@title='"+value+"']";
		WebElement element =driver.findElement(By.xpath(checkBox));
		Wait.waitForElementByXpath(driver, checkBox);
		element.click();		
		Utility.printSteps(testSteps, reportLogger, "Clicked "+value+" CheckBox");
	}
	
	
	public HashMap<String, String> getFolioBalances(WebDriver driver, HashMap<String, Boolean> reservationTypeMap) throws InterruptedException{		
		Elements_Reports elements = new Elements_Reports(driver);
		HashMap<String, String> getFolioBalances = new HashMap<>();
		 for (Map.Entry<String,Boolean> entry : reservationTypeMap.entrySet()) {
	            Utility.printString("Key = " + entry.getKey() + "   Value = " + entry.getValue());
	            String reservationType = entry.getKey();		 		
	            if(entry.getValue()) {
		 			 String path = "//span[text()='Receivable Balances']/../../parent::thead//following-sibling::tbody//td[@title='"+ reservationType +"']//following-sibling::td";		 			 
		 			 List<WebElement> element = driver.findElements(By.xpath(path));
		 			 if(element.size() > 0) {
		 				 Utility.ScrollToElement(element.get(0), driver);
			 			 String getBalance = element.get(0).getText().trim();
			// 			 Utility.printString(getBalance);
			 			 getBalance = Utility.removeDollarBracketsAndSpaces(getBalance);
			 			 getFolioBalances.put(reservationType, getBalance);		 				 
		 			 }else {
			 			 getFolioBalances.put(reservationType, "0.00");			 			 
		 			 }
	            }
		 }
	        HashMap<String, String> getFolioBalances1 = new HashMap<>();
	   		 for (Map.Entry<String,Boolean> entry1 : reservationTypeMap.entrySet()) {
	   	            Utility.printString("Key = " + entry1.getKey() + "   Value = " + entry1.getValue());
	   	            String reservationType1 = entry1.getKey();		 		
	   	            if(entry1.getValue()) {
	   		 			 String path = "//span[text()='Payable Balances']/../../parent::thead//following-sibling::tbody//td[@title='"+ reservationType1 +"']//following-sibling::td";		 			 
	   		 			 List<WebElement> element = driver.findElements(By.xpath(path));
	   		 			 if(element.size() > 0) {
	   		 				 Utility.ScrollToElement(element.get(0), driver);
	   			 			 String getBalance = element.get(0).getText().trim();
	   			// 			 Utility.printString(getBalance);
	   			 			 getBalance = Utility.removeDollarBracketsAndSpaces(getBalance);
	   			 			 getFolioBalances1.put(reservationType1, getBalance);		 				 
	   		 			 }else {
	   			 			 getFolioBalances1.put(reservationType1, "0.00");			 			 
	   		 			 }
	   		 		}	          
	   	         
		 }
	   		getFolioBalances1.forEach(
   	        	    (key, value) -> getFolioBalances.merge( key, value, (v1, v2) -> v1.equalsIgnoreCase(v2) ? v1 : v1 + "|" + v2)
   	        	);
	   	   String getNetBalance = elements.netBalance.getText().trim();
			 Utility.printString(getNetBalance);
			 getNetBalance = Utility.removeDollarBracketsAndSpaces(getNetBalance);
//		
	   		getFolioBalances.put("Net Balance", getNetBalance);
 	
		 return getFolioBalances;
	}

	public String getSubTotal(WebDriver driver, ArrayList<String> testSteps, String balanceType) throws InterruptedException {

	/*	
		For Receivable balance :
		balanceType : Receivable Balances
		balanceTotalType = "Subtotal"
		For Payable balance : 
		balanceTotalType = "Subtotal" 
		balanceType : Payable Balances
		
	*/		
		String balanceTotalType = "Subtotal";
		String path = "//span[text()='"+ balanceType +"']/../../parent::thead//following-sibling::tfoot//td[text()='"+ balanceTotalType +"']//following-sibling::td";
		WebElement element = driver.findElement(By.xpath(path));
		Utility.ScrollToElement(element, driver);
		String getTotal = Utility.removeDollarBracketsAndSpaces(element.getText());
		testSteps.add(balanceType + " " + balanceTotalType + " : " + getTotal);
		reportLogger.info(balanceType + " " + balanceTotalType + " : " + getTotal);
		return getTotal;
	}
	
	public String getNetBalance(WebDriver driver, ArrayList<String> testSteps) throws InterruptedException {
		Elements_Reports res = new Elements_Reports(driver);
		Wait.waitForElementByXpath(driver, OR_Reports.netBalance);
		Utility.ScrollToElement(res.netBalance, driver);
		String getNetAmount = Utility.removeDollarBracketsAndSpaces(res.netBalance.getText());
		//testSteps.add("Net balance : " + getNetAmount);
		Utility.printSteps(testSteps, reportLogger, "Net balance : " + getNetAmount);
		return getNetAmount;
	}
	
	public String getReservationDataByIndex(WebDriver driver, String reservationNumber, int index) throws InterruptedException {
		String path = "//a[@rel='opener' and contains(text(), '"+ reservationNumber +"')]/..//following-sibling::td["+ index +"]";
		if(index == 4) {			
			path = "//a[@rel='opener' and contains(text(), '"+ reservationNumber +"')]/..//following-sibling::td["+ index +"]//span";
		}		
		WebElement element = driver.findElement(By.xpath(path));
		Utility.ScrollToElement(element, driver);
		String getData = element.getText().trim();
		if(index == 4) {
			getData = Utility.removeDollarBracketsAndSpaces(getData);
		}
		reportLogger.info(getData);
		return getData;
	}
	
	public String getGuestName(WebDriver driver, String reservationNumber) throws InterruptedException {
		String path = "//a[@rel='opener' and contains(text(), '"+ reservationNumber +"')]/..//preceding-sibling::td[1]//a";
		WebElement element = driver.findElement(By.xpath(path));
		Utility.ScrollToElement(element, driver);
		String getData = element.getText().trim();
		reportLogger.info("getGuestName : " + getData);
		return getData;		
	}
	public void clickOnNavigateFolioBalances(WebDriver driver,ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports element =new Elements_Reports(driver);
			element.navigateFolioBalances.click();
			Utility.switchTab(driver, 1);
	}
	
	public void clickOnPendingStatus(WebDriver driver,String resStatus,String resType) throws InterruptedException {
		Elements_Reports element =new Elements_Reports(driver);
		try {	
		element.Folio.click();
			Wait.wait5Second();
			element.FolioStatusPending.click();
			if(resType.equalsIgnoreCase("MRB")) {
				String SecondRoom="(//a[contains(text(),'Guest Folio For')])[2]";
				driver.findElement(By.xpath(SecondRoom)).click();
				Wait.wait5Second();
				String SecondFolioPending="//button[contains(@data-bind,'handleStatusPendingToPost')]";
				Wait.wait5Second();
				driver.findElement(By.xpath(SecondFolioPending)).click();
				Wait.wait5Second();
			}
			Wait.wait5Second();
		}
		catch (Exception e) {
			if(resStatus.equalsIgnoreCase("Cancelled")) {
				resStatus="MC";
			}
			else {
				resStatus="No Show Fee";
			}
			try {
				
			Wait.wait5Second();
			String status = "//span[text()='"+resStatus+"']//..//..//button[contains(@data-bind,'handleStatusPendingToPost')]";
			WebElement statusElement =driver.findElement(By.xpath(status));
			Wait.wait2Second();
			Wait.waitForElementToBeClickable(By.xpath(status), driver);
			statusElement.click();
			}
			catch (Exception ex) {
			
			}
		}
			
	}
	/************************************Section Element displayed**************************************************/
	public void folioBalancesReportIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Folio Balances Report - Guest Ledger' Label is Displaying ---");
		assertTrue(element.folioBalancesReport.isDisplayed(), "Failed to verify Folio Balances Report - Guest Ledger is Displaying ");
		test_steps.add("Verified 'Folio Balances Report - Guest Ledger' Label is Displaying");
	}
	
	public void allreceivablepayableIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying " +element.allreceivablepayable.getText()+ "is Displaying ---");
		assertTrue(element.allreceivablepayable.isDisplayed(), "Failed to verify "+element.allreceivablepayable.getText()+" is Displaying");
		test_steps.add("Verified " +"'"+element.allreceivablepayable.getText()+"' Label is Displaying");
	}
	
	public void returnToDefaultButtonIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("---Verifying 'Return To Default' Icon is Displaying---");
		assertTrue(element.returnToDefaultButton.isDisplayed(), "Failed to Return To Default Button is Displaying");
		test_steps.add("Verified 'Return To Default' Icon is Displaying");
	}
	
	public void returnToDefaultTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		test_steps.add("--- Verifying 'Return To Default' Label is Displaying ---");
		Elements_Reports element =new Elements_Reports(driver);
		assertTrue(element.returnToDefaultText.isDisplayed(), "Failed to verify Return To Default is Displaying");
		test_steps.add("Verified 'Return To Default' Label is Displaying");
	}
	
	public void collapseButtonIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Collapse' Icon is Displaying ---");
		assertTrue(element.collapseButton.isDisplayed(),"Failed to verify Collapse Button is Displaying");
		test_steps.add("Verified 'Collapse' Icon is Displaying");
	}
	
	public void collapseTextReportIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("---Verifying 'Collapse' Label is Displaying---");
		assertTrue(element.collapseText.isDisplayed(), "Failed to verify Collapse Label is Displaying");
		test_steps.add("Verifying 'Collapse' Label  is Displaying");
		}
	
	public void iconOneIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying Icon with '1' Label  is Displaying ---");
		assertTrue(element.iconOne.isDisplayed(), "Failed to verify Icon 1 is Displaying");
		test_steps.add("Verified Icon with '1' Label  is Displaying");
		}
	
	public void todayDropdownIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Effective Date' Dropdown is Displaying With Today---");
		assertTrue(element.effectiveDateDropdown.isDisplayed(), "Failed to verify Today Dropdown is Displaying");
		test_steps.add("Verified 'Effective Date' Dropdown is Displaying");
		}
	
	public void dateFieldButtonIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Effective Date' Calander Icon is Displaying ---");
		assertTrue(element.dateFieldButton.isDisplayed(), "Failed to verify Date Field Calender is Displaying");
		test_steps.add("Verified 'Effective Date'  Calander Icon is Displaying");
		}
	
	public void dateFieldInputIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Effective Date' date Field  is Displaying ---");
		assertTrue(element.dateFieldInput.isDisplayed(), "Failed to verify Date Field Input is Displaying");
		test_steps.add("Verified 'Effective Date' date Field  is Displaying");
		}
	
	public void effectiveDateIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Effective Date' Label is Displaying ---");
		assertTrue(element.effectiveDate.isDisplayed(), "Failed to verify Effective Date is Displaying");
		test_steps.add("Verified 'Effective Date' Label is Displaying");
		}
	
	public void iconTwoIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying icon with '2' Label is Displaying ---");
		assertTrue(element.iconTwo.isDisplayed(), "Failed to verify Icon Two is Displaying");
		test_steps.add("Verified icon with '2' Label is Displaying");
		reportLogger.info("Verified icon with '2' Label is Displaying");
		}
	
	public void selectInputsIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Select Inputs' Label is Displaying ---");
		assertTrue(element.selectInputs.isDisplayed(), "Failed to verify select Inputs is Displaying");
		test_steps.add("Verified 'Select Inputs' Label is Displaying");
		reportLogger.info("Verified 'Select Inputs' Label is Displaying");
		}
	
	public void includeReservationTypeTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("Verifying 'Include Reservation Type' Label is Displaying");
		assertTrue(element.includeReservationTypeText.isDisplayed(), "Failed to verify include Reservation Type is Displaying");
		test_steps.add("Verified 'Include Reservation Type' Label is Displaying");
		reportLogger.info("Verified 'Include Reservation Type' Label is Displaying");
		}
	
	public void includeReservationTypeIconIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Include Reservation Type' Icon is Displaying ---");
		assertTrue(element.includeReservationTypeIcon.isDisplayed(), "Failed to verify include Reservation Type Icon is Displaying");
		test_steps.add("Verified 'Include Reservation Type' Icon is Displaying");
		reportLogger.info("Verified 'Include Reservation Type' Icon is Displaying");
		}
	
	public void inHouseCheckBoxIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'In House' Check Box is Displaying ---");
		assertTrue(element.inHouseCheckBox.isDisplayed(), "Failed to verify InHouse Check Box is Displaying");
		test_steps.add("Verified 'In House' Check Box is Displaying");
		reportLogger.info("Verified 'In House' Check Box is Displaying");
		}
	
	public void departedCheckBoxIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Departed' Check Box is Displaying ---");
		assertTrue(element.departedCheckBox.isDisplayed(), "Failed to verify Departed Check Boxis Displaying");
		test_steps.add("Verified 'Departed' Check Box is Displaying");
		reportLogger.info("Verified 'Departed' Check Box is Displaying");
		}
	
	
	public void reservedCheckBoxIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Reserved' Check Box is Displaying ---");
		assertTrue(element.reservedCheckBox.isDisplayed(), "Failed to verify Reserved Check Box is Displaying");
		test_steps.add("Verified 'Reserved' Check Box is Displaying");
		reportLogger.info("Verified 'Reserved' Check Box is Displaying");
		}
	
	public void noShowCheckBoxIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'No Show' Check Box is Displaying ---");
		assertTrue(element.noShowCheckBox.isDisplayed(), "Failed to verify No Show Check Box is Displaying");
		test_steps.add("Verified 'No Show' Check Box is Displaying");
		reportLogger.info("Verified 'No Show' Check Box is Displaying");
		}
	
	public void confirmedCheckBoxIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Confirmed' Check Box is Displaying ---");
		assertTrue(element.confirmedCheckBox.isDisplayed(), "Failed to verify Confirmed Check Box is Displaying");
		test_steps.add("Verified 'Confirmed' Check Box is Displaying");
		reportLogger.info("Verified 'Confirmed' Check Box is Displaying");
		}
	
	public void onHoldCheckBoxIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'On Hold' Check Box is Displaying ---");
		assertTrue(element.onHoldCheckBox.isDisplayed(), "Failed to verify On Hold Check Box is Displaying");
		test_steps.add("Verified 'On Hold' Check Box is Displaying");
		reportLogger.info("Verified 'On Hold' Check Box is Displaying");
		}
	
	public void guaranteedCheckBoxIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Guaranteed' Check Box is Displaying ---");
		assertTrue(element.guaranteedCheckBox.isDisplayed(), "Failed to verify Guaranteed Check Box is Displaying");
		test_steps.add("Verified 'Guaranteed' Check Box is Displaying");
		reportLogger.info("Verified 'Guaranteed' Check Box is Displaying");
	}
	
	public void includedBalancesIconIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Included Balances' Icon is Displaying ---");
		assertTrue(element.onHoldCheckBox.isDisplayed(), "Failed to verify Included Balances Icon is Displaying");
	    test_steps.add("Verified 'Included Balances' Icon is Displaying");
	    reportLogger.info("Verified 'Included Balances' Icon is Displaying");
		}
	
	public void includedBalancesTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Included Balances' Label is Displaying ---");
		assertTrue(element.includedBalancesText.isDisplayed(), "Failed to verify included Balances is Displaying");
		test_steps.add("Verified 'Included Balances' Label is Displaying");
		reportLogger.info("Verified 'Included Balances' Label is Displaying");
	}
	
	
	public void iconThreeIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("Verifying icon with '3' Label is Displaying");
		assertTrue(element.iconThree.isDisplayed(), "Failed to verify icon Three is Displaying");
		test_steps.add("Verified icon with '3' Label is Displaying");
	}
	
	public void customizeDetailedViewIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'customize Detailed View' Label is Displaying ---");
		assertTrue(element.customizeDetailedView.isDisplayed(), "Failed to verify customize Detailed View is Displaying");
		test_steps.add("Verified 'Customize Detailed View' Label is Displaying");
	}
	
	public void sortReportByIconIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Sort Report By' Icon is Displaying ---");
		assertTrue(element.sortReportByIcon.isDisplayed(), "Failed to verify sort Report By Icon  is Displaying");
		test_steps.add("Verified 'Sort Report By' Icon is Displaying");
	}
	
	public void sortReportByTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Sort Report By' Label is Displaying ---");
		assertTrue(element.sortReportByText.isDisplayed(), "Failed to verify sort Report By Text is Displaying");
		test_steps.add("Verified 'Sort Report By' Label is Displaying");
	}
	
	public void customizeDetailedViewDropdownIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Customize Detailed View' Dropdown is Displaying ---");
		assertTrue(element.customizeDetailedViewDropdown.isDisplayed(), "Failed to verify customize Detailed View Dropdown is Displaying");
		test_steps.add("Verified 'Customize Detailed View' Dropdown is Displaying");
	}
	
	public void runReportButtonIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Run Report' Button is Displaying ---");
		assertTrue(element.runReportButton.isDisplayed(), "Failed to verify run Report Button  is Displaying");
		test_steps.add("Verified 'Run Report' Button is Displaying");
	}
	
	public void iconRightIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Advanced Inputs' Section icon  is Displaying ---");
		Wait.WaitForElement(driver, OR_Reports.iconRight);
		assertTrue(element.iconRight.isDisplayed(), "Failed to verify icon Right is Displaying");
		test_steps.add("Verified 'Advanced Inputs' Section Right is Displaying");
		reportLogger.info("Verified 'Advanced Inputs' Section Right is Displaying");
	}
	
	public void expandAllButtonIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Expand All' Button is Displaying ---");
		assertTrue(element.expandAllButton.isDisplayed(), "Failed to verify expand All Button is Displaying");
		test_steps.add("Verified 'Expand All' Button is Displaying");
		reportLogger.info("Verified 'Expand All' Button is Displaying");
	}
	
	public void displayAccountCompanyNameIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Display Account Company Name' Label is Displaying ---");
		assertTrue(element.displayAccountCompanyName.isDisplayed(), "Failed to verify display Account Company Name is Displaying");
		test_steps.add("Verified 'Display Account Company Name' Label is Displaying");
		reportLogger.info("Verified 'Display Account Company Name' Label is Displaying");
	}
	
	public void displayAccountNoIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Display Account No' Label is Displaying ---");
		assertTrue(element.displayAccountNoLabel.isDisplayed(), "Failed to verify display Account No is Displaying");
		test_steps.add("Verified 'Display Account No' Label is Displaying");
		reportLogger.info("Verified 'Display Account No' Label is Displaying");
	}
	public void displayAccountTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Display Account No' Label is Displaying ---");
		assertTrue(element.displayAccountNoText.isDisplayed(), "Failed to display Account No Text is Displaying");
		test_steps.add("Verified 'Display Account No' Label is Displaying");
		reportLogger.info("Verified 'Display Account No' Label is Displaying");
	}
	public String displayAccountNoText(WebDriver driver) {
		Elements_Reports element =new Elements_Reports(driver);
		return element.displayAccountNoText.getText();
	}
	
	public void displayAccountIconIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Display Account ' Icon is Displaying ---");
		assertTrue(element.displayAccountNoIcon.isDisplayed(), "Failed to verify display Account  Icon is Displaying");
		test_steps.add("Verified 'Display Account ' Icon is Displaying");
		reportLogger.info("Verified 'Display Account ' Icon is Displaying");
	}
	
	public void includePendingNoTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Include Pending No' Label is Displaying ---");
		assertTrue(element.includePendingNoText.isDisplayed(), "Failed to verify include Pending No Text is Displaying");
		test_steps.add("Verified 'Include Pending No' Label is Displaying");
		reportLogger.info("Verified 'Include Pending No' Label is Displaying");
	}
	
	public void includePendingYesTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Include Pending Yes' Label is Displaying ---");
		assertTrue(element.includePendingYesText.isDisplayed(), "Failed to verify include Pending Yes Text is Displaying");
		test_steps.add("Verified 'Include Pending Yes' Label is Displaying");
		reportLogger.info("Verified 'Include Pending Yes' Label is Displaying");
	}
	public String includePendingNoText(WebDriver driver) {
		Elements_Reports element =new Elements_Reports(driver);
		return element.includePendingNoText.getText();
	}
	
	public void includePendingCollapseExpandIconIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Include Pending Expand Or Collapse' Icon is Displaying ---");
		assertTrue(element.includePendingNoIcon.isDisplayed(), "Failed to verify include Pending Expand Or Collapse Icon is Displaying");
		test_steps.add("Verified 'Include Pending Expand Or Collapse' Icon is Displaying");
		reportLogger.info("Verified 'Include Pending Expand Or Collapse' Icon is Displaying");
	}
	
	
	public void departedTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Departed' Label is Displaying ---");
		assertTrue(element.departedText.isDisplayed(), "Failed to verify departed Text is Displaying");
		test_steps.add("Verified 'Departed' Label is Displaying");
		reportLogger.info("Verified 'Departed' Label is Displaying");
	}
	
	public void confirmedTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Confirmed' Label is Displaying ---");
		assertTrue(element.confirmedText.isDisplayed(), "Failed to verify confirmed Text is Displaying");
		test_steps.add("Verified 'Confirmed' Label is Displaying");
		reportLogger.info("Verified 'Confirmed' Label is Displaying");
	}
	
	public void displayAccountNoButtonIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Display Account No' Button is Displaying ---");
		assertTrue(element.displayAccountNoButton.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Display Account No' Button is Displaying");
		reportLogger.info("Verified 'Display Account No' Button is Displaying");
	}
	
	public void includePendingNoButtonIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Include Pending No' Button is Displaying ---");
		assertTrue(element.includePendingNoButton.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Include Pending No' Button is Displaying");
		reportLogger.info("Verified 'Include Pending No' Button is Displaying");
	}

	
	/************************************Section Element Verification**************************************************/

	public String generatedOnValue(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
//		test_steps.add("Click On Guaranteed Check Box");
		return element.generatedOnValue.getText();

	}
	public String reportSortByValue(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		return element.reportSortByValue.getText();

	}
	public void reportSortByValue(WebDriver driver, ArrayList<String> test_steps,String value) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the Value of 'Report Sort By' --- ");
		assertTrue(element.reportSortByValue.getText().equals(value),"Failed: Value of report Sort By");
		test_steps.add("Verified Value of 'Report Sort By': "+value);

	}
	
	public String includeAuthorizationsValue(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		return element.includeAuthorizationsValue.getText();

	}
	
	public void includeAuthorizationsValue(WebDriver driver, ArrayList<String> test_steps,String value) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the Value of 'include Authorizations' ---");
		assertTrue(element.displayAccountValue.getText().equals(value),"Failed: Value of include Authorizations");
        test_steps.add("Verified  Value of 'include Authorizations' :"+value);

	}
	public void reportTypeHeadingIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Report Type' Heading is Displaying ---");
		assertTrue(element.reportTypeHeading.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Report Type' Heading is Displaying");
	}
	public void effectiveDateHeadingIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Effective Date' Heading is Displaying ---");
		assertTrue(element.effectiveDateHeading.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Effective Date' Heading is Displaying");
	}
	public void reservationTypeHeadingIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Reservation Type' Heading is Displaying ---");
		assertTrue(element.reservationTypeHeading.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Reservation Type' Heading is Displaying");
	}

	public void generatedOnHeadingIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Generated On' Heading is Displaying ---");
		assertTrue(element.generatedOnHeading.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Generated On' Heading is Displaying");
	}
	public void reportSortByHeadingIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Report Sort By' Heading is Displaying ---");
		assertTrue(element.reportSortByHeading.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Report Sort By' Heading is Displaying");
	}
	
	public void includePendingHeadingIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Include Pending' Heading is Displaying ---");
		assertTrue(element.includePendingHeading.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified include Pending Heading is Displaying");
	}
	public void includeAuthorizationsHeadingIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Include Authorization' Heading is Displaying ");
		assertTrue(element.includeAuthorizationsHeading.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Include Authorization' Heading is Displaying");
	}
	
	public void cancelReservation(WebDriver driver, ArrayList<String> test_steps) {
		String expand = "//div[@class='dropdown ir-statusChange']//span[@class='btn btn-default dropdown-toggle']";
		Wait.waitForElementToBeClickable(By.xpath(expand), driver);
		driver.findElement(By.xpath(expand)).click();
		String status = "//div[@class='ng-statusChnage ir-statusMenu ul']//span//ul//span[text()='Cancel']";
		Wait.waitForElementToBeClickable(By.xpath(status), driver);
		driver.findElement(By.xpath(status)).click();
		test_steps.add("Clicking on cancel reservation button");
		reportLogger.info("Clicking on cancel reservation button");
	}
	
    public void folioBalancesLabelIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
         Elements_Reports element =new Elements_Reports(driver);
         test_steps.add("--- Verifying 'Folio Balances' Label is Displaying ---");
         assertTrue(element.folioBalancesLabel.isDisplayed(), "Failed to verify include Authorization is Displaying");
         test_steps.add("Verified 'Folio Balances' Label is Displaying");
     }
     public void receivableBalancesLabelIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
         Elements_Reports element =new Elements_Reports(driver);
         test_steps.add("--- Verifying 'Receivable Balances' Label is Displaying ---");
         assertTrue(element.receivableBalancesLabel.isDisplayed(), "Failed to verify include Authorization is Displaying");
         test_steps.add("Verified 'Receivable Balances' Label is Displaying");
     }
     public void payableBalancesLabelIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
         Elements_Reports element =new Elements_Reports(driver);
         test_steps.add("--- Verifying 'Payable Balances' Label is Displaying ---");
         assertTrue(element.payableBalancesLabel.isDisplayed(), "Failed to verify include Authorization is Displaying");
         test_steps.add("Verified 'Payable Balances' Label is Displaying");
     }
     public void folioBalancesReservationTable(WebDriver driver, ArrayList<String> test_steps) {
         Elements_Reports element =new Elements_Reports(driver);
         double sum =0;
         test_steps.add("--- Verifying 'Folio Balance' sum is equal to 'Account Subtotal' ---");
        
         List<WebElement> getFolioBalance = driver.findElements(By.xpath("(//table)[3]//tr//td[6]"));
         reportLogger.info("getFolioBalance.size() : " + getFolioBalance.size());
         
         for(int i=0;i<getFolioBalance.size();i++) {
              String value = getFolioBalance.get(i).getText();
              value = Utility.removeDollarBracketsAndSpaces(value);
              reportLogger.info("value : " + value + " : " + i);
             sum+=Double.parseDouble(value);
             	reportLogger.info("sum : " + sum + " : " + i);          
         }
         String countSum=String.valueOf(sum)+"0";
         reportLogger.info(sum);
         double TotalAmountDouble =0.0;
        reportLogger.info(element.accountSubtotalValue.getText());
        String total = Utility.removeDollarBracketsAndSpaces(element.accountSubtotalValue.getText());
 //       TotalAmountDouble=Double.parseDouble(total);
        total=Utility.removeCommaSign(total);
        countSum=String.valueOf(Utility.getRoundOffValueAfterDecimal(sum));
        total=Utility.convertDecimalFormat(countSum);
        total=Utility.convertDecimalFormat(total);
        
//       String sum1=String.valueOf(total); 
//       total.substring(0, total.length()-2);
         
         assertEquals(countSum, total, "Failed to verify Account Total");

         test_steps.add(" Verified 'Folio Balance' of all reservations "+sum+" is equal to 'Account Subtotal': "+total);
         reportLogger.info(" Verified 'Folio Balance' of all reservations "+sum+" is equal to 'Account Subtotal': "+total);
         
     }
     public void receivableBalance(WebDriver driver, ArrayList<String> test_steps) {
         Elements_Reports element =new Elements_Reports(driver);
         double sum =0.0;
         test_steps.add("--- Verifying 'Receivable Balances' sum is equal to 'Subtotal' ---");

         for(int i=0;i<element.getReceivableBalances.size();i++) {
             String value = element.getReceivableBalances.get(i).getText().substring(1).replace(",", "");
             sum+=Double.parseDouble(value);
             }
//         System.out.println(sum);
//         System.out.println(element.receivableSubtotalValue.getText().substring(1).replace(",", ""));
         DecimalFormat df = new DecimalFormat("###.#");
         double total = Double.parseDouble(element.receivableSubtotalValue.getText().substring(1).replace(",", ""));
         assertEquals(total, df.format(sum), "Failed to verify Receivable Total");
  
         test_steps.add(" Verified 'Receivable Balances' sum: "+sum+" is equal to 'Subtotal': "+total);
         
     }
     public void payableBalances(WebDriver driver, ArrayList<String> test_steps) {
         Elements_Reports element =new Elements_Reports(driver);
         double sum =0.0;
         test_steps.add("--- Verifying 'Payable Balances' sum is equal to 'Subtotal' ---");
         for(int i=0;i<element.getPayableBalances.size();i++) {
             String value = element.getPayableBalances.get(i).getText().substring(1).replace(",", "");
             sum+=Double.parseDouble(value);
             }
//         System.out.println(sum);
//         System.out.println(element.payableSubtotalValue.getText().substring(1).replace(",", ""));
         double total = Double.parseDouble(element.payableSubtotalValue.getText().substring(1).replace(",", ""));
         assertEquals(total, sum, "Failed to verify Payable Total");
         test_steps.add(" Verified 'Payable Balances' sum: "+sum+" is equal to 'Subtotal': "+total);
         
     }
     
     public void guestNameReservationTableSortedByAscending(WebDriver driver, ArrayList<String> test_steps) {
         Elements_Reports element =new Elements_Reports(driver);
         int i = 0;
         List<String> names = new ArrayList<String>();
         List<String> sortedNames = new ArrayList<String>();
         while (i < element.guestNameSortedReservationTable.size()) {
             String elementText = element.guestNameSortedReservationTable.get(i).getText().replace("|", "");
             if(elementText.equals("CHRISTOPHER BORECKI")) 
                 i++;
             else {
	             names.add(elementText);
	             sortedNames.add(elementText);
	             i++;
             }
        }    
         Collections.sort(sortedNames);
         test_steps.add("--- Verifying 'Guest Name' Column is Sorted Ascending ---");
         assertEquals(sortedNames, names, "Failed 'Guest Name' column is not sorted in acsending");
         test_steps.add(" Verified 'Guest Name' column is sorted in ascending order");

     }
     
 	public void customizedDetailedViewDropDownOptions(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		ArrayList<String> arr=new ArrayList<String>();
		for(int i=0; i<element.effectiveDateDropDownOptions.size();i++) {
			arr.add(element.effectiveDateDropDownOptions.get(i).getText());
		}

		test_steps.add("--- Verifying 'Customized Detailed View' Dropdown Value---");
		assertEquals(arr.get(5).trim(), "Guest Name", "Customized Detailed View'Dropdown Value");
		test_steps.add("Verified 'Customized Detailed View'Dropdown Value: "+arr.get(5));
		
		assertEquals(arr.get(6).trim(), "Reservation Number", "Customized Detailed View'Dropdown Value");
		test_steps.add("Verified 'Customized Detailed View'Dropdown Value: "+arr.get(6));
		
		assertEquals(arr.get(7).trim(), "Room Number", "Customized Detailed View'Dropdown Value");
		test_steps.add("Verified 'Customized Detailed View'Dropdown Value: "+arr.get(7));
		
		assertEquals(arr.get(8).trim(), "Arrival Date", "Customized Detailed View'Dropdown Value");
		test_steps.add("Verified 'Customized Detailed View'Dropdown Value: "+arr.get(8));
		
		assertEquals(arr.get(9).trim(), "Departed Date", "Customized Detailed View'Dropdown Value");
		test_steps.add("Verified 'Customized Detailed View'Dropdown Value: "+arr.get(9));
		
		assertEquals(arr.get(10).trim(), "Folio Balance", "Customized Detailed View'Dropdown Value");
		test_steps.add("Verified 'Customized Detailed View'Dropdown Value: "+arr.get(10));
		}
	
	public void includePendingFolioItemsIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Include Pending Folio Items' Label is Displaying ---");
		assertTrue(element.includePendingFolioItems.isDisplayed(), "Failed to verify include Pending Folio Items is Displaying");
		test_steps.add("Verified 'Include Pending Folio Items' Label is Displaying");
		reportLogger.info("Verified 'Include Pending Folio Items' Label is Displaying");
	}
	
	public void includeAuthorizationIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Include Authorization' Label is Displaying ---");
		assertTrue(element.includeAuthorization.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Include Authorization' Label is Displaying");
		reportLogger.info("Verified 'Include Authorization' Label is Displaying");
	}
	
	public void includeAuthorizationTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("Verifying 'Include Authorization ' Label is Displaying");
		assertTrue(element.includeAuthorizationNoText.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Include Authorization ' Label is Displaying");
		reportLogger.info("Verified 'Include Authorization ' Label is Displaying");
	}
	
	public void includeAuthorizationNoLabelIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("Verifying 'Include Authorization No' Label is Displaying");
		assertTrue(element.includeAuthorizationNoLabel.isDisplayed(), "Failed to verify include Authorization No is Displaying");
		test_steps.add("Verified 'Include Authorization No' Label is Displaying");
		reportLogger.info("Verified 'Include Authorization No' Label is Displaying");
	}
	public String includeAuthorizationNoText(WebDriver driver) {
		Elements_Reports element =new Elements_Reports(driver);
		return element.includeAuthorizationNoText.getText();
	}
	public void includeAuthorizationExpandIconIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Include Authorization Expand' Icon is Displaying ---");
		assertTrue(element.includeAuthorizationNoIcon.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Include Authorization Expand' Icon is Displaying");
	}
	public void inHouseTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying inHouse Text is Displaying ---");
		assertTrue(element.inHouseText.isDisplayed(), "Failed to verify inHouse Text is Displaying");
		test_steps.add("Verified 'In-House' Label is Displaying");
		reportLogger.info("Verified 'In-House' Label is Displaying");
	}
	
	public void reservedTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Reserved' Label is Displaying ---");
		assertTrue(element.reservedText.isDisplayed(), "Failed to verify reserved Text is Displaying");
		test_steps.add("Verified 'Reserved' Label is Displaying");
		reportLogger.info("Verified 'Reserved' Label is Displaying");
	}
	public void noShowTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'No Show' Label is Displaying ---");
		assertTrue(element.noShowText.isDisplayed(), "Failed to verify noShow Text is Displaying");
		test_steps.add("Verified 'No Show' Label is Displaying");
		reportLogger.info("Verified 'No Show' Label is Displaying");
	}
	
	public void clearAllButtonIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Clear All' Button is Displaying ---");
		assertTrue(element.clearAllButton.isDisplayed(), "Failed to verify Clear All Buttonis Displaying");
		test_steps.add("Verified 'Clear All' Button is Displaying");
		reportLogger.info("Verified 'Clear All' Button is Displaying");
		}
	
	
	public void cancelledCheckBoxIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Cancelled' Check Box is Displaying ---");
		assertTrue(element.cancelledCheckBox.isDisplayed(), "Failed to verify Cancelled Check Box is Displaying");
		test_steps.add("Verified 'Cancelled' Check Box is Displaying");
		reportLogger.info("Verified 'Cancelled' Check Box is Displaying");
		}
	
	public void allDropdownIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Included Balances' Dropdown is Displaying ---");
		assertTrue(element.includedBalancesDropdown.isDisplayed(), "Failed to verify All Dropdown  is Displaying");
		test_steps.add("Verified 'Included Balances' Dropdown is Displaying");
		reportLogger.info("Verified 'Included Balances' Dropdown is Displaying");
	}
	
	public void AdvancedInputsIconIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Advanced Inputs' Icon is Displaying ---");
		assertTrue(element.AdvancedInputsIcon.isDisplayed(), "Failed to verify Advanced Inputs Icon is Displaying");
		test_steps.add("Verified 'Advanced Inputs' Icon is Displaying");
		reportLogger.info("Verified 'Advanced Inputs' Icon is Displaying");
	}
	
	public void AdvancedInputsTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Advanced Inputs' Label Text is Displaying ---");
		assertTrue(element.AdvancedInputsText.isDisplayed(), "Failed to verify Advanced Inputs Text is Displaying");
		test_steps.add("Verified 'Advanced Inputs' Label is Displaying");
		reportLogger.info("Verified 'Advanced Inputs' Label is Displaying");
	}
	
	public void cancelledTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Cancelled' Label is Displaying ---");
		assertTrue(element.cancelledText.isDisplayed(), "Failed to verify cancelled Text is Displaying");
		test_steps.add("Verified 'Cancelled' Label is Displaying");
		reportLogger.info("Verified 'Cancelled' Label is Displaying");
	}
	
	public void guaranteedTextIconIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Guaranteed' Label is Displaying ---");
		assertTrue(element.guaranteedText.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Guaranteed' Label is Displaying");
		reportLogger.info("Verified 'Guaranteed' Label is Displaying");
	}
	
	public void displayAccountYesButtonIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Display Account Yes' Button is Displaying ---");
		assertTrue(element.displayAccountYesButton.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Display Account Yes' Button is Displaying");
		reportLogger.info("Verified 'Display Account Yes' Button is Displaying");
	}

	public void includeAuthorizationNoButtonIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Include Authorization No' Button is Displaying ---");
		assertTrue(element.includeAuthorizationNoButton.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Include Authorization No' Button is Displaying");
		reportLogger.info("Verified 'Include Authorization No' Button is Displaying");
	}
	public void includeAuthorizationYesButtonIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Include Authorization Yes' Button is Displaying ---");
		assertTrue(element.includeAuthorizationYesButton.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Include Authorization Yes' Button is Displaying");
		reportLogger.info("Verified 'Include Authorization Yes' Button is Displaying");
	}
	/************************************Section Element Enabled***********************************/
	public void includedBalancesDropdownClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Included Balances' Dropdown icon Clickable ---");
		assertTrue(element.includedBalancesDropdown.isEnabled(), "Failed to verify All Dropdown Clickable");
		test_steps.add("Verified 'Included Balances' Dropdown icon Clickable");
		reportLogger.info("Verified 'Included Balances' Dropdown icon Clickable");
	}
	public void effectiveDateDropdownClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Effective Date' Dropdown Icon Clickable ---");
		assertTrue(element.effectiveDateDropdown.isEnabled(), "Failed to verify Included Balances Dropdown Clickable");
		test_steps.add("Verified 'Effective Date' Dropdown icon Clickable");
		reportLogger.info("Verified 'Effective Date' Dropdown icon Clickable");
	}
	public void returnToDefaultClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Return To Default' Button Clickable ---");
		assertTrue(element.returnToDefaultButton.isEnabled(), "Failed to verify return To Default Button Clickable");
		test_steps.add("Verified 'Return To Default' Button Clickable");
		reportLogger.info("Verified 'Return To Default' Button Clickable");
	}
	public void collapseClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Collapse' Button Clickable ---");
		assertTrue(element.collapseButton.isEnabled(), "Failed to verify collapse Button Clickable");
		test_steps.add("Verified 'Collapse' Button Clickable");
		reportLogger.info("Verified 'Collapse' Button Clickable");
	}
	public void expandAllClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Expand All'  Button Clickable ---");
		assertTrue(element.expandAllButton.isEnabled(), "Failed to verify Expand All  ButtonClickable");
		test_steps.add("Verified 'Expand All' Button Clickable");
		reportLogger.info("Verified 'Expand All' Button Clickable");
	}
	public void companyNameNoClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Company Name No' Icon Clickable ---");
		assertTrue(element.displayAccountNoIcon.isEnabled(), "Failed to verify Company Name No Icon Clickable");
		test_steps.add("Verified 'Company Name No' Icon Clickable");
		reportLogger.info("Verified 'Company Name No' Icon Clickable");
	}
	public void includeAuthorizationNoIconClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Include Authorization No Icon' Icon Clickable ---");
		assertTrue(element.includeAuthorizationNoIcon.isEnabled(), "Failed to verify include Authorization No Icon Clickable");
		test_steps.add("Verified 'Include Authorization No Icon' Clickable");
		reportLogger.info("Verified 'Include Authorization No Icon' Clickable");
	}
	public void includePendingFolioItemsClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Include Pending Folio Items' icon Clickable ---");
		assertTrue(element.includePendingFolioItems.isEnabled(), "Failed to verify include Pending Folio Items Clickable");
		test_steps.add("Verified 'Include Pending Folio Items' icon Clickable");
		reportLogger.info("Verified 'Include Pending Folio Items' icon Clickable");
	}
	public void guestNameDropdownClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Sort Report By' Dropdown Clickable ---");
		assertTrue(element.customizeDetailedViewDropdown.isEnabled(), "Failed to verify Sort Report By Dropdown Clickable");
		test_steps.add("Verified 'Sort Report By' Dropdown Clickable");
		reportLogger.info("Verified 'Sort Report By' Dropdown Clickable");
	}
	public void runReportButtonClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Run Report' Button Clickable ---");
		assertTrue(element.runReportButton.isEnabled(), "Failed to verify run Report Button Dropdown Clickable");
		test_steps.add("Verified 'Run Report't Button Clickable");
		reportLogger.info("Verified 'Run Report't Button Clickable");
	}
	public void displayAccountNoButtonClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Display Account No' Button Clickable ---");
		assertTrue(element.displayAccountNoButton.isEnabled(), "Failed to verify run Report Button Dropdown Clickable");
		test_steps.add("Verified 'Display Account No' Button Clickable");
		reportLogger.info("Verified 'Display Account No' Button Clickable");
	}
	public void displayAccountYesButtonClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Display Account Yes' Button Clickable ---");
		assertTrue(element.displayAccountYesButton.isEnabled(), "Failed to verify run Report Button Dropdown Clickable");
		test_steps.add("Verified 'Display Account Yes' Button Clickable");
		reportLogger.info("Verified 'Display Account Yes' Button Clickable");
	}

	public void includePendingNoButtonClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Include Pending No' Button Clickable ---");
		assertTrue(element.includePendingNoButton.isEnabled(), "Failed to verify run Report Button Dropdown Clickable");
		test_steps.add("Verified 'Include Pending No' Button Clickable");
		reportLogger.info("Verified 'Include Pending No' Button Clickable");
	}
	public void includePendingYesButtonClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Include Pending Yes' Button Clickable ---");
		assertTrue(element.includePendingYesButton.isEnabled(), "Failed to verify run Report Button Dropdown Clickable");
		test_steps.add("Verified 'Include Pending Yes' Button Clickable");
		reportLogger.info("Verified 'Include Pending Yes' Button Clickable");
	}
	public void includeAuthorizationNoButtonClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Include Authorization No' Button Clickable ---");
		assertTrue(element.includeAuthorizationNoButton.isEnabled(), "Failed to verify run Report Button Dropdown Clickable");
		test_steps.add("Verified 'Include Authorization No' Button Clickable");
		reportLogger.info("Verified 'Include Authorization No' Button Clickable");
	}
	public void includeAuthorizationYesButtonClickable(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the 'Include Authorization Yes' Button Clickable ---");
		assertTrue(element.includeAuthorizationYesButton.isEnabled(), "Failed to verify run Report Button Dropdown Clickable");
		test_steps.add("Verified 'Include Authorization Yes' Button Clickable");
		reportLogger.info("Verified 'Include Authorization Yes' Button Clickable");
	}
	
	/************************************Section Click Element**************************************************/
	public void clickincludedBalancesDropdown(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.includedBalancesDropdown.click();
		test_steps.add("Click On 'Included Balance' Dropdown Arrow");
		reportLogger.info("Click On 'Included Balance' Dropdown Arrow");
	}
	public void clickeffectiveDateDropdown(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports element =new Elements_Reports(driver);
		Utility.ScrollToViewElementINMiddle(driver, element.effectiveDateDropdown);
		element.effectiveDateDropdown.click();
		test_steps.add("Click On 'Effective Date' Dropdown Arrow");
		reportLogger.info("Click On 'Effective Date' Dropdown Arrow");
	}
	
	public void clickreturnToDefaultButton(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.returnToDefaultButton.click();
		test_steps.add("Click On 'Return To Default' Button Arrow");
		reportLogger.info("Click On 'Return To Default' Button Arrow");
	}
	public void clickcollapseButton(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.collapseButton.click();
		test_steps.add("Click On 'Collapse Button' Arrow");
		reportLogger.info("Click On 'Collapse Button' Arrow");
	}
	
	public void clickdateFieldButton(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.dateFieldButton.click();
		test_steps.add("Click On 'Date Calender' Arrow");
		reportLogger.info("Click On 'Date Calender' Arrow");
	}
	public void clickcustomizeDetailedViewDropdown(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		Wait.waitForElementByXpath(driver, OR_Reports.customizeDetailedViewDropdown);
		element.customizeDetailedViewDropdown.click();
		test_steps.add("Click On 'Customize Detailed View' Dropdown Arrow");
		reportLogger.info("Click On 'Customize Detailed View' Dropdown Arrow");
	}
	public void clickdisplayAccountIcon(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		Wait.waitForElementByXpath(driver, OR_Reports.displayAccountNoIcon);
		element.displayAccountNoIcon.click();
		test_steps.add("Click On 'Display Account ' Icon");
		reportLogger.info("Click On 'Display Account ' Icon");
	}
	public void clickincludePendingIcon(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		Wait.waitForElementByXpath(driver, OR_Reports.includePendingNoIcon);
		element.includePendingNoIcon.click();
		test_steps.add("Click On 'Expand Or Collapse Include Pending ' Icon");
		reportLogger.info("Click On 'Expand Or Collapse Include Pending ' Icon");
	}
	public void clickincludeAuthorizationIcon(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		Wait.waitForElementByXpath(driver, OR_Reports.includeAuthorizationNoIcon);
		element.includeAuthorizationNoIcon.click();
		test_steps.add("Click On 'Include Authorization ' Icon");
		reportLogger.info("Click On 'Include Authorization ' Icon");
	}
	public void clickrunReportButton(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		Wait.waitForElementByXpath(driver, OR_Reports.runReportButton);
		element.runReportButton.click();
		test_steps.add("Click On 'Run Report' Button");
		reportLogger.info("Click On 'Run Report' Button");
	}
	
	public void clickexpandAllButton(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		Wait.waitForElementByXpath(driver, OR_Reports.expandAllButton);
		element.expandAllButton.click();
		test_steps.add("Click On 'Expand All' Button");
		reportLogger.info("Click On 'Expand All' Button");
	}
	
	public void clickInHouseCheckBox(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.checkInHouseCheckBox.click();
		test_steps.add("Click On 'In House' Check Box");
		reportLogger.info("Click On 'In House' Check Box");
	}
	
	public void clickDepartedCheckBox(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.checkdepartedCheckBox.click();
		test_steps.add("Click 'Departed' Check Box");
		reportLogger.info("Click 'Departed' Check Box");
	}
	
	public void clickCancelledCheckBox(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.checkcancelledCheckBox.click();
		test_steps.add("Click On 'Cancelled' Check Box");
		reportLogger.info("Click On 'Cancelled' Check Box");
	}
	
	public void clickReservedCheckBox1(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.checkreservedCheckBox.click();
		test_steps.add("Click On 'Reserved' Check Box");
		reportLogger.info("Click On 'Reserved' Check Box");
	}
	
	public void clickNoShowCheckBox(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.checknoShowCheckBox.click();
		test_steps.add("Click On 'No Show' Check Box");
		reportLogger.info("Click On 'No Show' Check Box");
	}
	public void clickConfirmedCheckBox(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.checkconfirmedCheckBox.click();
		test_steps.add("Click On 'Confirmed' Check Box");
		reportLogger.info("Click On 'Confirmed' Check Box");
	}
	public void clickOnHoldCheckBox(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.checkonHoldCheckBox.click();
		test_steps.add("Click On 'On Hold' Check Box");
		reportLogger.info("Click On 'On Hold' Check Box");
	}
	
	public void clickGuaranteedCheckBox(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.checkguaranteedCheckBox.click();
		test_steps.add("Click On 'Guaranteed' Check Box");
		reportLogger.info("Click On 'Guaranteed' Check Box");
	}
	
	public void clickDisplayAccountNoButton(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.displayAccountNoButton.click();
		test_steps.add("Click On 'Display Account No' Button ");
		reportLogger.info("Click On 'Display Account No' Button ");
	}
	
	public void clickDisplayAccountYesButton(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.displayAccountYesButton.click();
		test_steps.add("Click On 'Display Account Yes' Button ");
		reportLogger.info("Click On 'Display Account Yes' Button ");
	}
	
	public void clickIncludePendingNoButton(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.includePendingNoButton.click();	
		test_steps.add("Click On 'Include Pending No' Button");
		reportLogger.info("Click On 'Include Pending No' Button");
	}
	
	public void clickIncludePendingYesButton(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.includePendingYesButton.click();	
		test_steps.add("Click On 'Include Pending Yes' Button");
		reportLogger.info("Click On 'Include Pending Yes' Button");
	}
	public void clickIncludeAuthorizationNoButton(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.includeAuthorizationNoButton.click();
		test_steps.add("Click On 'Include Authorization No' Button");
		reportLogger.info("Click On 'Include Authorization No' Button");
	}
	public void clickIncludeAuthorizationYesButton(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		element.includeAuthorizationYesButton.click();
		test_steps.add("Click On 'Include Authorization Yes' Button");
		reportLogger.info("Click On 'Include Authorization Yes' Button");
	}
	
	/************************************Section Element Verification**************************************************/
	public void getTextEffectiveDateDropdown(WebDriver driver, ArrayList<String> test_steps, String day) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifing in Effective Date Dropdown  ---");
		assertTrue(element.effectiveDateDropdown.getText().trim().equals(day),"Failed to verify effecvtive day");		
		test_steps.add("Verified in Effective Date Dropdown  is Selected " + day);
		}
	public void getTextDateFieldInput(WebDriver driver, ArrayList<String> test_steps, String value) throws InterruptedException {
		 Elements_Reports element =new Elements_Reports(driver);
		 test_steps.add("--- Verifing in 'Effective Date' Input 'Current Date' is Selected By Default ---");
		 Utility.ScrollToViewElementINMiddle(driver, element.dateFieldInput);
		 reportLogger.info(element.dateFieldInput.getAttribute("Value"));
		 reportLogger.info(value);
		 assertTrue(element.dateFieldInput.getAttribute("Value").trim().equals(value),"Failed to verify Current Date");
	     test_steps.add("Verified 'Effective Date' Input 'Current Date' is Selected By Default: "+value);
		 }
	public void getTextIncludedBalancesDropdown(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver); 
		test_steps.add("--- Verifing is Included Balances Dropdown 'All' is Selected By default ---");
		assertTrue(element.includedBalancesDropdown.getText().trim().equals("All"),"Failed All is Not Selected By default");
		test_steps.add("Verified Included Balances Dropdown 'All' is Selected By default");
		reportLogger.info("Verified 'Effective Date' Dropdown is clicked");
		}
	public void getTextCustomizeDetailedViewDropdown(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifing Customize DetailedView Dropdown 'Guest Name' is Selected By default ---");
		assertTrue(element.customizeDetailedViewDropdown.getText().trim().equals("Guest Name"),"Failed Guest Name is Not Selected By default");
		test_steps.add("Verified Customize Detailed View Dropdown 'Guest Name' is Selected By default");
		}
	public String getTextCustomizeDetailedViewDropdown(WebDriver driver) {
		Elements_Reports element =new Elements_Reports(driver);
		return element.customizeDetailedViewDropdown.getText();
		}
	public String getTextEffectiveDateDropdown(WebDriver driver) {
		Elements_Reports element =new Elements_Reports(driver);
		return element.effectiveDateDropdown.getText().trim();
		}
	/************************************Section After Run Report**************************************************/
	public String reportTypeValue(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
//		test_steps.add("Click On Guaranteed Check Box");
		return element.reportTypeValue.getText();

	}
	public void reportTypeValue(WebDriver driver, ArrayList<String> test_steps,String value) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the Value of 'Report Type' ---");
		assertTrue(element.reportTypeValue.getText().trim().equals(value)," Failed: Value of effective Date");
		test_steps.add("Verified Value of 'Report Type': "+value);	
	}
	public String effectiveDateValue(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
//		test_steps.add("Click On Guaranteed Check Box");
		return element.effectiveDateValue.getText();

	}
	public void effectiveDateValue(WebDriver driver, ArrayList<String> test_steps,String value) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the Value of 'Effective Date' ---");
		assertTrue(element.effectiveDateValue.getText().trim().equals(value)," Failed: Value of effective Date");
		test_steps.add("Verified Value of 'Effective Date': "+value);	
	}
	public String reservationTypeValue(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
//		test_steps.add("Click On Guaranteed Check Box");
		return element.reservationTypeValue.getText();

	}
	public void reservationTypeValue(WebDriver driver, ArrayList<String> test_steps,String value) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the Value of 'Reservation Type ---");
		assertTrue(element.reservationTypeValue.getText().equals(value),"Failed: Value of include Authorizations");
        test_steps.add("Verified  Value of 'Reservation Type': "+value);

	}
	public String includedBalancesValue(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
//		test_steps.add("Click On Guaranteed Check Box");
		return element.includedBalancesValue.getText();

	}
	public void includedBalancesValue(WebDriver driver, ArrayList<String> test_steps,String value) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying the Value of 'Included Balances' ---");
		assertTrue(element.includedBalancesValue.getText().equals(value),"Failed: Value of include Authorizations");
        test_steps.add("Verified  Value of 'Included Balances' "+value);

	}

	public String includePendingValue(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
//		test_steps.add("Click On Guaranteed Check Box");
		return element.includePendingValue.getText();

	}
	public void includePendingValue(WebDriver driver, ArrayList<String> test_steps,String value) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("Verifying the Value of 'Include Pending' ");
		assertTrue(element.displayAccountValue.getText().equals(value)," Failed: Value of include Pending");
		test_steps.add("Verified  Value of 'Include Pending': "+value);

	}

	public void includedBalancesHeadingIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Included Balances' Heading is Displaying ---");
		assertTrue(element.includedBalancesHeading.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Included Balances' Heading is Displaying");
	}
	

	public void netReceiveablePayableBalances(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
	    DecimalFormat df2 = new DecimalFormat("#.##");
		double sum =0.0;
		test_steps.add("--- Verifying 'Receiveable-Payable Balances' is equal to 'Net Receiveable Payable Balance' ---");
		double payable = Double.parseDouble(element.payableSubtotalValue.getText().substring(1).replace(",", ""));
		double receiveable = Double.parseDouble(element.receivableSubtotalValue.getText().substring(1).replace(",", ""));
        sum =  receiveable - payable ;
        sum = Double.parseDouble(df2.format(sum));
//		System.out.println(sum);
//		System.out.println(element.netPayableReceiveableValue.getText().substring(1).replace(",", ""));
		double total = Double.parseDouble(element.netPayableReceiveableValue.getText().substring(1).replace(",", ""));
		assertTrue(total == sum, "Failed to verify Net Receiveable Payable Balance");
		test_steps.add(" Verified 'Receiveable-Payable Balances' sum: "+sum+" is equal to 'Net Receiveable Payable Balance': "+total);
		
	}
	
	public void reservationNumberReservationTableSortedByAscending(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		int i = 0;
		List<Integer> numbers = new ArrayList<Integer>();
		List<Integer> sortedNumbers = new ArrayList<Integer>();
		while (i < element.sortedReservationTable.size()) {
			int elementText = Integer.parseInt(element.sortedReservationTable.get(i).getText().trim());
			numbers.add(elementText);
			sortedNumbers.add(elementText);
			reportLogger.info("elementText"+elementText);
			
	    	i++;
        }	
		Collections.sort(sortedNumbers);
		test_steps.add("--- Verifying 'Reservation Number' Column is Sorted Ascending ---");
		assertEquals(sortedNumbers, numbers, "Failed 'Reservation Number' Sorting.");
		test_steps.add(" Verified 'Reservation Number' Column is Sorted Ascending");

	}
	public void folioBalanceReservationTableSortedByAscending(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		int i = 0;
		List<String> arr = new ArrayList<String>();
		List<String> sortedarr = new ArrayList<String>();
		while (i < element.sortedReservationTable.size()) {
			String elementText = element.sortedReservationTable.get(i).getText();
			arr.add(elementText);
			sortedarr.add(elementText);
	    	i++;
       }	
		Collections.sort(sortedarr);
		test_steps.add("--- Verifying 'Folio Balance' Column is Sorted Ascending ---");
		assertEquals(sortedarr, arr, "Failed 'Folio Balance' Sorting");
		test_steps.add(" Verified 'Folio Balance' Column is Sorted Ascending");

	}
	public void roomNumberReservationTableSortedByAscending(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		int i = 0;
		List<String> arr = new ArrayList<String>();
		List<String> sortedarr = new ArrayList<String>();
		while (i < element.sortedReservationTable.size()) {
			String elementText = element.sortedReservationTable.get(i).getText();
			arr.add(elementText);
			sortedarr.add(elementText);
	    	i++;
       }	
		Collections.sort(sortedarr);
		test_steps.add("--- Verifying 'Room Number' Column is Sorted Ascending ---");
		assertEquals(sortedarr, arr, "Failed 'Room Number' Sorting");
		test_steps.add(" Verified 'Room Number' Column is Sorted Ascending");
	}

	public void onHoldTextIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'On Hold' Label is Displaying ---");
		assertTrue(element.onHoldText.isDisplayed(), "Failed to verify onHold Text is Displaying");
		test_steps.add("Verified 'On Hold' Label is Displaying");
		reportLogger.info("Verified 'On Hold' Label is Displaying");
	}
	
	public HashMap<String, Boolean> includeReservationTypeCheckBoxesStatus(WebDriver driver) {
		Elements_Reports element =new Elements_Reports(driver);
		HashMap<String, Boolean> selectInputChekBoxStatus = new HashMap<String, Boolean>();
		String exxpectedClass = "ant-tree-checkbox-checked";
		List<String> myList = new ArrayList<String>();
		myList.add("In-House");
		myList.add("Departed");
		myList.add("Cancelled");
		myList.add("Reserved");
		myList.add("No Show");
		myList.add("Confirmed");
		myList.add("On Hold");
		myList.add("Guaranteed");
		for(int i=0;i<myList.size();i++) {
			String check="(//span[text()='"+myList.get(i)+"']//..//..//child::span)[3]";
			WebElement element1=driver.findElement(By.xpath(check));
			String get = element1.getAttribute("Class");
			if(get.contains(exxpectedClass)) {
				selectInputChekBoxStatus.put(myList.get(i), true);
			}
				else {selectInputChekBoxStatus.put(myList.get(i), false);}
		}

		return selectInputChekBoxStatus;
	}
	
	public void includePendingYesButtonIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'include Pending Yes' Button is Displaying ---");
		assertTrue(element.includePendingYesButton.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Include Pending Yes' Button is Displaying");
	}
	
	public void customizedDetailedViewDropDownSelect(WebDriver driver, ArrayList<String> test_steps, String value) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Select 'Customized Detailed View' Option---");
		ArrayList<String> arr=new ArrayList<String>();
		for(int i=0; i<element.effectiveDateDropDownOptions.size();i++) {
			if(element.effectiveDateDropDownOptions.get(i).getText().equals(value))
				element.effectiveDateDropDownOptions.get(i).click();
		}
			test_steps.add("'Customized Detailed View'Option Selected: "+value);
	}
	

	public String displayAccountValue(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		return element.displayAccountValue.getText();
	}
	public void displayAccountValue(WebDriver driver, ArrayList<String> test_steps,String value) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("Verifying the Value of 'Report Display Account' ");
		assertTrue(element.displayAccountValue.getText().trim().equals(value.trim())," Failed: Value of display Account");
		test_steps.add("Verified  Value of 'Report Display Account': "+value);

	}
	
	
	public void displayAccountHeadingIsDiplaying(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		test_steps.add("--- Verifying 'Display Account' Heading is Displaying ---");
		assertTrue(element.displayAccountHeading.isDisplayed(), "Failed to verify include Authorization is Displaying");
		test_steps.add("Verified 'Display Account' Heading is Displaying");
	}
		
	

	public void editButtonClick(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
		Elements_Reports element =new Elements_Reports(driver);
		Wait.WaitForElement(driver, OR_Reports.editButton);	
		Wait.wait2Second();
		element.editButton.click();
		Wait.wait5Second();
		test_steps.add("Click On Edit Button");

	}

	public void effectiveDateDropDownOptions(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		ArrayList<String> arr=new ArrayList<String>();
		for(int i=0; i<element.effectiveDateDropDownOptions.size();i++) {
			arr.add(element.effectiveDateDropDownOptions.get(i).getText());
			Utility.printString(arr.get(i));
		}
		
		test_steps.add("--- Verifying 'Effective Date' Dropdown Value---");
		assertEquals(arr.get(0).trim(), "Today", "Failed Effective Date");
		test_steps.add("Verified 'Effective Date'Dropdown Value: "+arr.get(0));
		
		assertEquals(arr.get(1).trim(), "Yesterday", "Failed Effective Date");
		test_steps.add("Verified 'Effective Date'Dropdown Value: "+arr.get(1));
		}
	public void includedBalancesDropDownOptions(WebDriver driver, ArrayList<String> test_steps) {
		Elements_Reports element =new Elements_Reports(driver);
		ArrayList<String> arr=new ArrayList<String>();
		for(int i=0; i<element.effectiveDateDropDownOptions.size();i++) {
			arr.add(element.effectiveDateDropDownOptions.get(i).getText());
		}
		test_steps.add("--- Verifying 'Included Balances' Dropdown Value---");
		assertTrue(arr.get(2).equals("All"), "'Included Balances' Dropdown Value");
		test_steps.add("Verified 'Included Balances' Dropdown Value: "+arr.get(2));
		reportLogger.info("Verified 'Included Balances' Dropdown Value: "+arr.get(2));
		assertTrue(arr.get(3).equals("Receivable balances"), "'Included Balances' Dropdown Value");
		test_steps.add("Verified 'Included Balances' Dropdown Value: "+arr.get(3));
		reportLogger.info("Verified 'Included Balances' Dropdown Value: "+arr.get(3));
		assertTrue(arr.get(4).equals("Payable balances"), "'Included Balances' Dropdown Value");
		test_steps.add("Verified 'Included Balances' Dropdown Value: "+arr.get(4));
		reportLogger.info("Verified 'Included Balances' Dropdown Value: "+arr.get(4));
		}
     
    public void reservationTableSortedByArrivalDateColumn(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
        Elements_Reports element =new Elements_Reports(driver);
        int i = 0;
        List<String> names = new ArrayList<String>();
        List<String> sortedNames = new ArrayList<String>();
        Wait.wait5Second();
        while (i < element.arrivalDateColumnList.size()) {
            String elementText = element.arrivalDateColumnList.get(i).getText().trim();
            names.add(elementText);
            sortedNames.add(elementText);
            i++;
       }    
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM dd, yyyy");
        Collections.sort(sortedNames, (s1, s2) -> LocalDate.parse(s1, formatter).
                compareTo(LocalDate.parse(s2, formatter)));
        Collections.reverse(sortedNames);
        test_steps.add("--- Verifying 'Arrival Date' Column is Sorted in descending ---");
        assertEquals(names, sortedNames, "Failed 'Arrival Date' column is not sorted in descending");
        test_steps.add(" Verified 'Arrival Date' column is sorted in descending order");
    }
    
    public void reservationTableSortedByDepartureDateColumn(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
        Elements_Reports element =new Elements_Reports(driver);
        int i = 0;
        List<String> names = new ArrayList<String>();
        List<String> sortedNames = new ArrayList<String>();
        Wait.wait5Second();
        while (i < element.departureDateColumnList.size()) {
            String elementText = element.departureDateColumnList.get(i).getText().trim();
            names.add(elementText);
            sortedNames.add(elementText);
            i++;
       }    
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM dd, yyyy");
        Collections.sort(sortedNames, (s1, s2) -> LocalDate.parse(s1, formatter).
                compareTo(LocalDate.parse(s2, formatter)));
        Collections.reverse(sortedNames);
        test_steps.add("--- Verifying 'Departure Date' Column is Sorted in descending ---");
        assertEquals(names, sortedNames, "Failed 'Departure Date' column is not sorted in descending");
        test_steps.add(" Verified 'Departure Date' column is sorted in descending order");
    }
    public void reservationTableSortedByRoomNoColumn(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
        Elements_Reports element =new Elements_Reports(driver);
        int i = 0;
        List<String> names = new ArrayList<String>();
        List<String> sortedNames = new ArrayList<String>();
        Wait.wait5Second();
        while (i < element.roomNoColumnList.size()) {
            String elementText = element.roomNoColumnList.get(i).getText().trim();
            names.add(elementText);
            sortedNames.add(elementText);
            i++;
       }    
       
        Collections.sort(sortedNames);
        test_steps.add("--- Verifying 'Room Number' Column is Sorted in descending ---");
        assertEquals(names, sortedNames, "Failed 'Departure Date' column is not sorted in descending");
        test_steps.add(" Verified 'Room Number' column is sorted in descending order");
    }
    
    
    public void reservationTableSortedByFolioBalanceColumn(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
        Elements_Reports element =new Elements_Reports(driver);
        int i = 0;
        List<String> numbers = new ArrayList<String>();
        List<String> sortedNumbers = new ArrayList<String>();
        Wait.wait5Second();
        while (i < element.folioColumnList.size()) {
        	String elementText = element.folioColumnList.get(i).getText().trim();
			numbers.add(elementText);
			sortedNumbers.add(elementText);
	    	i++;
        }	
		Collections.sort(sortedNumbers);
        test_steps.add("--- Verifying 'Folio Balance' Column is Sorted in descending ---");
        assertEquals(numbers, sortedNumbers, "Failed 'Departure Date' column is not sorted in descending");
        test_steps.add(" Verified 'Folio Balance' column is sorted in descending order");
        reportLogger.info(" Verified 'Folio Balance' column is sorted in descending order");
    }
    
    //Abubakar
    public void VerifyAccountButtonisClicked(WebDriver driver, ArrayList<String> test_steps) {
		
    	Elements_Reports element =new Elements_Reports(driver);
		String noRadioButton="((//span[text()='No'])[1]//..)[1]";
		String className=driver.findElement(By.xpath(noRadioButton)).getAttribute("class");
		if(className.contains("ant-radio-wrapper-checked")) {
			test_steps.add("Verified 'Display Account No Button iS Selected");
			reportLogger.info("Verified 'Display Account No Button iS Selected");
		}
		else {
			test_steps.add("Verified 'Display Account Yes Button iS Selected");
			reportLogger.info("Verified 'Display Account Yes Button iS Selected");
		}
		
		
	}
    
 public void VerifyIncludePendingFolioItemsisClicked(WebDriver driver, ArrayList<String> test_steps) {
		
    	Elements_Reports element =new Elements_Reports(driver);
		String noRadioButton="((//span[text()='No'])[2]//..)[1]";
		String className=driver.findElement(By.xpath(noRadioButton)).getAttribute("class");
		if(className.contains("ant-radio-wrapper-checked")) {
			test_steps.add("Verified Include Pending Folio Items No Button iS Selected");
			reportLogger.info("Verified Include Pending Folio Items No Button iS Selected");
		}
		else {
			test_steps.add("Verified Include Pending Folio Items Yes Button iS Selected");
			reportLogger.info("Verified Include Pending Folio Items Yes Button iS Selected");
		}
	}
 
 public void VerifyIncludeAuthorizationisClicked(WebDriver driver, ArrayList<String> test_steps) {
		
	 	Elements_Reports element =new Elements_Reports(driver);
			String noRadioButton="((//span[text()='No'])[3]//..)[1]";
			String className=driver.findElement(By.xpath(noRadioButton)).getAttribute("class");
			if(className.contains("ant-radio-wrapper-checked")) {
				test_steps.add("Verified Include Authorization No Button iS Selected");
			}
			else {
				test_steps.add("Verified Include Authorization Yes Button iS Selected");
			}
		}
 
 		public String getEffectiveDateHeader(WebDriver driver) {
	 	Elements_Reports element =new Elements_Reports(driver);
	 	Wait.waitForElementByXpath(driver, OR_Reports.effectiveDateHeader);
	 	return Utility.getElementText(element.effectiveDateHeader);
	 	
	 }

	 public String getReservationTypeHeader(WebDriver driver) {
	 	Elements_Reports element =new Elements_Reports(driver);
	 	Wait.waitForElementByXpath(driver, OR_Reports.reservationTypeHeader);
	 	return Utility.getElementText(element.reservationTypeHeader);
	 	
	 }

	 public String getIncludeBalancesHeader(WebDriver driver) {
	 	Elements_Reports element =new Elements_Reports(driver);
	 	Wait.waitForElementByXpath(driver, OR_Reports.includeBalancesHeader);    	
	 	return Utility.getElementText(element.includeBalancesHeader);
	 	
	 }

	 public String getSortReportByHeader(WebDriver driver) {
	 	Elements_Reports element =new Elements_Reports(driver);
	 	Wait.waitForElementByXpath(driver, OR_Reports.sortReportByHeader);
	 	return Utility.getElementText(element.sortReportByHeader);
	 	
	 }
	 
	 public String getProptyName(WebDriver driver, ArrayList<String> test_steps) {
			Elements_Reports element =new Elements_Reports(driver);
			test_steps.add("Property Name "+element.ProptyName.getText());
			return element.ProptyName.getText();

		}
	 
	 public void header(WebDriver driver, ArrayList<String> test_steps,String value) {
			Elements_Reports element =new Elements_Reports(driver);
			test_steps.add("--- Verifying the Value of 'Report Type' ---");
			if(element.Heading.getText().contains(value)) {
				test_steps.add("Verified Value of 'Header Contain Property Name: "+value);
			}	
		}
	 
	 public String generatedOnValue(WebDriver driver) {
			Elements_Reports element =new Elements_Reports(driver);
			return element.generatedOnValue.getText();

		}
	 
	 public void inHouseCheckBoxIsCheckedOrUnchecked(WebDriver driver, ArrayList<String> test_steps) {
			Elements_Reports element =new Elements_Reports(driver);
			test_steps.add("--- Verifying 'In House' Check Box is Checked Or Unchecked ---");
			String xpath ="//span[text()='In-House']/./../../../..";
			try {
			assertTrue(driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify InHouse Check Box is Checked");
			test_steps.add("Verified 'In House' Check Box is Checked");
			}catch(Exception e) {				
				assertTrue(!driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify InHouse Check Box is Unchecked");
				test_steps.add("Verified 'In House' Check Box is Unchecked");
			}
			}
		
	 public void cancelledCheckBoxIsCheckedOrUnchecked(WebDriver driver, ArrayList<String> test_steps) {
			Elements_Reports element =new Elements_Reports(driver);
			test_steps.add("--- Verifying 'Cancelled' Check Box is  Checked Or Unchecked ---");
			String xpath ="//span[@title='Cancelled']/preceding-sibling::span[1]";
			try {
			assertTrue(driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify Cancelled Check Box is Checked");
			test_steps.add("Verified 'Cancelled' Check Box is Checked");
			}catch(Exception e) {				
				assertTrue(!driver.findElement(By.xpath(xpath)).isSelected(),"Failed to verify Cancelled Check Box is Unchecked");
				test_steps.add("Verified 'Cancelled' Check Box is Unchecked");
			}
			}
	 
		public void departedCheckBoxIsCheckedOrUnchecked(WebDriver driver, ArrayList<String> test_steps) {
			Elements_Reports element =new Elements_Reports(driver);
			test_steps.add("--- Verifying 'Departed' Check Box is Checked Or Unchecked ---");
			String xpath ="//span[@title='Departed']/preceding-sibling::span[1]";
			try {
			assertTrue(driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify Departed Check Boxis Checked");
			test_steps.add("Verified 'Departed' Check Box is Checked");}
			catch(Exception e) {				
				assertTrue(!driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify Departed Check Boxis Unchecked");
				test_steps.add("Verified 'Departed' Check Box is Unchecked");
			}
			}
		
		
		public void reservedCheckBoxIsCheckedOrUnchecked(WebDriver driver, ArrayList<String> test_steps) {
			Elements_Reports element =new Elements_Reports(driver);
			test_steps.add("--- Verifying 'Reserved' Check Box is Checked Or Unchecked ---");
			String xpath ="//span[@title='Reserved']/preceding-sibling::span[1]";
			try {
			assertTrue(driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify Reserved Check Box is Checked");
			test_steps.add("Verified 'Reserved' Check Box is Checked");
			}catch(Exception e) {				
				assertTrue(!driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify Reserved Check Box is Unchecked");
				test_steps.add("Verified 'Reserved' Check Box is Unchecked");
			}
			}
		
		public void noShowCheckBoxIsCheckedOrUnchecked(WebDriver driver, ArrayList<String> test_steps) {
			Elements_Reports element =new Elements_Reports(driver);
			test_steps.add("--- Verifying 'No Show' Check Box is Checked Or Unchecked ---");
			String xpath ="//span[@title='No Show']/preceding-sibling::span[1]";
			try {
			assertTrue(driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify No Show Check Box is Checked");
			test_steps.add("Verified 'No Show' Check Box is Checked");
			}catch(Exception e){				
				assertTrue(!driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify No Show Check Box is Unchecked");
				test_steps.add("Verified 'No Show' Check Box is Unchecked");
			}
			}
		
		public void confirmedCheckBoxIsCheckedOrUnchecked(WebDriver driver, ArrayList<String> test_steps) {
			Elements_Reports element =new Elements_Reports(driver);
			test_steps.add("--- Verifying 'Confirmed' Check Box is Checked Or Unchecked ---");
			String xpath ="//span[@title='Confirmed']/preceding-sibling::span[1]";
			try {
			assertTrue(driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify Confirmed Check Box is Checked");
			test_steps.add("Verified 'Confirmed' Check Box is Checked");
			}catch(Exception e) {				
				assertTrue(!driver.findElement(By.xpath(xpath)).isSelected(),  "Failed to verify Confirmed Check Box is Unchecked");
				test_steps.add("Verified 'Confirmed' Check Box is Unchecked");
			}
			}
		
		public void onHoldCheckBoxIsCheckedOrUnchecked(WebDriver driver, ArrayList<String> test_steps) {
			Elements_Reports element =new Elements_Reports(driver);
			test_steps.add("--- Verifying 'On Hold' Check Box is Checked Or Unchecked ---");
			String xpath ="//span[@title='On Hold']/preceding-sibling::span[1]";
			try {
			assertTrue(driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify On Hold Check Box is Checked");
			test_steps.add("Verified 'On Hold' Check Box is Checked");
			}catch(Exception e) {				
				assertTrue(!driver.findElement(By.xpath(xpath)).isSelected(),  "Failed to verify On Hold Check Box is Unchecked");
				test_steps.add("Verified 'On Hold' Check Box is Unchecked");
			}
			}
		
		public void guaranteedCheckBoxIsCheckedOrUnchecked(WebDriver driver, ArrayList<String> test_steps) {
			Elements_Reports element =new Elements_Reports(driver);
			test_steps.add("--- Verifying 'Guaranteed' Check Box is Checked Or Unchecked ---");
			String xpath ="//span[@title='Guaranteed']/preceding-sibling::span[1]";
			try {				
			assertTrue(driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify Guaranteed Check Box is Checked");
			test_steps.add("Verified 'Guaranteed' Check Box is Checked");
			}catch(Exception e) {				
				assertTrue(!driver.findElement(By.xpath(xpath)).isSelected(), "Failed to verify Guaranteed Check Box is Unchecked");
				test_steps.add("Verified 'Guaranteed' Check Box is Unchecked");
			}
		}
		
		/*
		 * #############################################################################
		 * #############################################################################
		 * ################ Method Name: <navigateToNetSalesReport> Description: <This
		 * method navigates to Daily Net Sales Report> Input parameters: <WebDriver
		 * driver> Return value: <void> Created By: <Naveen Kadthala> Created
		 * On:<07/27/2020>
		 * 
		 * #############################################################################
		 * #############################################################################
		 * ################
		 */
		public ArrayList<String> navigateToNetSalesReport(WebDriver driver, ArrayList<String> testSteps)
				throws InterruptedException {
			Elements_Reports res = new Elements_Reports(driver);
			res.NetSalesReport.click();
			testSteps.add("Clicked on Net Sales Report");
			Wait.wait2Second();
			Utility.switchTab(driver, 1);
			Wait.WaitForElement(driver, OR_Reports.NetSalesReportHeader);
			return testSteps;
		}
				
		public void validateDefaultInput(WebDriver driver, String timeZone, String dateFormat, String StayonDateRange,
				String selectedGroupNetSalesBy, String selectedSortReportBy, String selectedGroupRowBy,
				String selectedBookOnDateRange, ArrayList<String> test_steps) throws InterruptedException, ParseException {

			Elements_Reports report = new Elements_Reports(driver);
			SimpleDateFormat format = new SimpleDateFormat(dateFormat);
			String expectedStartDate = "";
			String foundStartDate = "";
			String expectedEndDate = "";
			String foundEndDate = "";
			test_steps.add("Verify date range values for option Month To Date");
			// selectDateRange(driver, "Month To Date", test_steps);
			String getExpected = report.selectedStayOnDateRange.getText();
			test_steps.add("Expected Stay On Date Range: " + "");
			test_steps.add("Found: " + getExpected);
			if (getExpected.equals(StayonDateRange)) {
				test_steps.add("Verified Stay On Date Range defualt value");
			} else {
				test_steps.add("Failed:Stay On Date Range defualt value is mismatching!");
			}
			Calendar monthToDate = Calendar.getInstance();
			monthToDate.add(Calendar.MONTH, +1);
			Date dd = new Date(monthToDate.get(Calendar.MONTH) + "/" + 1 + "/" + monthToDate.get(Calendar.YEAR));
			String start = format.format(dd);
			expectedEndDate = Utility.getCurrentDate(dateFormat, timeZone);
			foundEndDate = report.dateEnd.getAttribute("value");
			foundStartDate = format.format(new Date(report.dateStart.getAttribute("value")));

			test_steps.add("Expected Start Date: " + start);
			test_steps.add("Found: " + foundStartDate);
			if (foundStartDate.equals(start)) {
				test_steps.add("Successfully verified start date values are matching for <b>Month To Date</b> option");
			}
			else {
				test_steps.add("Failed : Start Date Values are mismatching for option Month To Date.");
			}
			
			test_steps.add("Expected End Date: " + expectedEndDate);
			test_steps.add("Found: " + foundEndDate);
			
			Assert.assertEquals(foundEndDate, expectedEndDate,
					"Failed : End Date Values are mismatching for option Month To Date.");
			test_steps.add("Successfully verified End date values are matching for <b>Month To Date</b> option");

			getExpected = report.selectedGroupNetSalesBy.getText();
			test_steps.add("Expected Group Net Sales By: " + "");
			test_steps.add("Found: " + getExpected);
			if (getExpected.equals(selectedGroupNetSalesBy)) {
				test_steps.add("Verified  Group Net Sales By defualt value");
			} else {
				test_steps.add("Failed: Group Net Sales By defualt value is mismatching!");
			}

			getExpected = report.selectedSortReportBy.getText();
			test_steps.add("Expected Sort Report By: " + selectedSortReportBy);
			test_steps.add("Found: " + getExpected);
			if (getExpected.equals(selectedSortReportBy)) {
				test_steps.add("Verified Sort Report By defualt value");
			} else {
				test_steps.add("Failed: Sort Report By defualt value is mismatching!");
			}

			getExpected = report.selectedGroupRowBy.getText();
			test_steps.add("Expected Group Rows By: " + selectedGroupRowBy);
			test_steps.add("Found: " + getExpected);
			if (getExpected.equals(selectedGroupRowBy)) {
				test_steps.add("Verified Group Rows By defualt value");
			} else {
				test_steps.add("Failed: Group Rows By defualt value is mismatching!");
			}

			CollapseAll(driver,test_steps);
			Wait.wait1Second();
			getExpected = report.selectedBookOnDateRange.getText();
			test_steps.add("Expected Group Rows By: " + selectedBookOnDateRange);
			test_steps.add("Found: " + getExpected);
			if (getExpected.equals(selectedBookOnDateRange)) {
				test_steps.add("Verified Group Rows By defualt value");
			} else {
				test_steps.add("Failed: Group Rows By defualt value is mismatching!");
			}
			if (report.radioBtnIncludeInactive.getAttribute("class").contains("ant-radio-checked")) {
				test_steps.add("Default Include Inactive/ Obsolete Rooms No radio button by default checked");
			} else {
				test_steps.add("Failed: Default Include Inactive/ Obsolete Rooms No radio button not checked");
			}

		}
		
		public void CollapseAll(WebDriver driver,ArrayList<String> testStep) {
			Elements_Reports report = new Elements_Reports(driver);
			try {
				Wait.waitForElementToBeClickable(By.xpath(OR_Reports.ExpandAll), driver);
				Utility.clickThroughAction(driver, report.ExpandAll);
				testStep.add("Click on All collapse");
			} catch (Exception e) {
				testStep.add("All collapse button already clicked");
			}

		}
		
		public void selectGroupNetSalesByOption(WebDriver driver, ArrayList<String> test_steps, String groupNetSalesBy)
				throws InterruptedException {
			Elements_Reports res = new Elements_Reports(driver);
			Wait.WaitForElement(driver, OR_Reports.GroupNetSalesByOptionsExpand);
			Utility.ScrollToViewElementINMiddle(driver, res.groupNetSalesByOptionsExpand);
			//res.groupNetSalesByOptionsExpand.click();
			Utility.clickThroughAction(driver, res.groupNetSalesByOptionsExpand);
			reportLogger.info("Click Group Net Sales Drop Down Box");
			test_steps.add("Click Group Net Sales Drop Down Box");
			
			Wait.WaitForElement(driver, "//div[@id='groupBy_list']/following-sibling::div/div/div/div/div");
			Wait.waitForElementToBeVisibile(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div"),
					driver);			
			String path="//div[@class='ant-select-item ant-select-item-option' and @title='"+groupNetSalesBy+"']";	
			Actions action = new Actions(driver);
		   // boolean isExist= Utility.isElementPresent(driver, By.xpath(path));
		    boolean isExist= Utility.isElementDisplayed(driver, By.xpath(path));
		    if(!isExist) {
			while(!isExist){
				action.sendKeys(Keys.ARROW_DOWN).build().perform();		
				if(Utility.isElementPresent(driver, By.xpath(path)))
				{
					assertEquals(Utility.isElementPresent(driver, By.xpath(path)),true,"Failed to verify  Option " + groupNetSalesBy);
					reportLogger.info("Verify Group Net Sales By Option " + groupNetSalesBy);
					test_steps.add("Verify Group Net Sales By Option " + groupNetSalesBy);
					try {
					Utility.scrollAndClick(driver, By.xpath(path));
					}catch(Exception e) {
						Utility.ScrollToViewElementINMiddle(driver, driver.findElement(By.xpath(path)));
						driver.findElement(By.xpath(path)).click();
					}
					isExist=true;
					test_steps.add("Selected Group Net Sales By as : <b>"+groupNetSalesBy+"</b>");
					reportLogger.info("Selected Group Net Sales By as : <b>"+groupNetSalesBy+"</b>");
				}				
			}	}
		    else {
		    	assertEquals(Utility.isElementPresent(driver, By.xpath(path)),true,"Failed to verify  Option " + groupNetSalesBy);
				reportLogger.info("Verify Group Net Sales By Option " + groupNetSalesBy);
				test_steps.add("Verify Group Net Sales By Option " + groupNetSalesBy);
				try {
					Utility.scrollAndClick(driver, By.xpath(path));
					}catch(Exception e) {
						Utility.ScrollToViewElementINMiddle(driver, driver.findElement(By.xpath(path)));
						driver.findElement(By.xpath(path)).click();
					}
				test_steps.add("Selected Group Net Sales By as : <b>"+groupNetSalesBy+"</b>");
				reportLogger.info("Selected Group Net Sales By as : <b>"+groupNetSalesBy+"</b>");
		    }
			}
		
		public void selectSortReportByOption(WebDriver driver, ArrayList<String> test_steps, String sortReportBy)
				throws InterruptedException {
			Elements_Reports res = new Elements_Reports(driver);
			Wait.WaitForElement(driver, OR_Reports.SortReportByOptionsExpand);
			Utility.ScrollToViewElementINMiddle(driver, res.SortReportByOptionsExpand);
			Utility.clickThroughAction(driver, res.SortReportByOptionsExpand);
			reportLogger.info("Click on Sort Report By");
			test_steps.add("Click on Sort Report By");			
			Wait.WaitForElement(driver, "//div[@id='sortBy_list']/following-sibling::div/div/div/div/div");
			Wait.waitForElementToBeVisibile(By.xpath("//div[@id='sortBy_list']/following-sibling::div/div/div/div/div"),
					driver);
			String path="//div[contains(@class,'ant-select-item ant-select-item-option') and @title='"+sortReportBy+"']";		
			Actions action = new Actions(driver);
			assertEquals(Utility.isElementPresent(driver, By.xpath(path)),true,"Failed to verify  Option " + sortReportBy);
			reportLogger.info("Verify Sort Report By Option " + sortReportBy);
			test_steps.add("Verify Sort Report By Option " + sortReportBy);
			Utility.scrollAndClick(driver, By.xpath(path));
			test_steps.add("Selected Sort Report By as : <b>"+sortReportBy+"</b>");
			reportLogger.info("Selected Sort Report By as : <b>"+sortReportBy+"</b>");
			
		}

		public void selectGroupRowsByOption(WebDriver driver, ArrayList<String> test_steps, String groupRowBy)
				throws InterruptedException {
			Elements_Reports res = new Elements_Reports(driver);
			Utility.ScrollToViewElementINMiddle(driver, res.RowsGroupByInNetSales);
			Utility.clickThroughAction(driver, res.RowsGroupByInNetSales);
			reportLogger.info("Click on Group Rows By");
			test_steps.add("Click on Group Rows By");			
			Wait.wait5Second();
			String path="//div[contains(@class,'ant-select-item ant-select-item-option') and @title='"+groupRowBy+"']";		
			Wait.WaitForElement(driver, path);
				Actions action = new Actions(driver);
			assertEquals(Utility.isElementPresent(driver, By.xpath(path)),true,"Failed to verify  Option " + groupRowBy);
			reportLogger.info("Verify Group Rows By Option " + groupRowBy);
			test_steps.add("Verify Group Rows By Option " + groupRowBy);
			Utility.scrollAndClick(driver, By.xpath(path));
			test_steps.add("Selected Group Rows By as : <b>"+groupRowBy+"</b>");
			reportLogger.info("Selected Group Rows By as : <b>"+groupRowBy+"</b>");
		}
		
		public void selectBookedOnDateRange(WebDriver driver, ArrayList<String> test_steps, String sortReportBy)
				throws InterruptedException {
			Elements_Reports res = new Elements_Reports(driver);
			Utility.clickThroughAction(driver, res.bookOnDateRangeExpand);
			Wait.waitForElementToBeVisibile(By.xpath("//div[@id='rc_select_4_list']/following-sibling::div/div/div/div/div/div"),
					driver);
			List<WebElement> options = driver
					.findElements(By.xpath("//div[@id='rc_select_4_list']/following-sibling::div/div/div/div/div/div"));
			for (int i = 0; i < options.size(); i++) {
				if (sortReportBy.equalsIgnoreCase(options.get(i).getText())) {
					Utility.clickThroughAction(driver, options.get(i));
					reportLogger.info("Entered Sort By Option : " + options.get(i).getText());
					test_steps.add("Entered Booked On Date Range: " + options.get(i).getText());
					break;

				}

			}
		}
		
		public void radioYesBtnIncludeInactive(WebDriver driver,ArrayList<String> testStep) {
			Elements_Reports report = new Elements_Reports(driver);
			Wait.waitForElementToBeClickable(By.xpath(OR_Reports.radioYesBtnIncludeInactive), driver);
			report.radioYesBtnIncludeInactive.click();;
			testStep.add("Click radio Yes button Include Inactive Rooms");

		}

		public void clickOnReturnToDefaultButton(WebDriver driver)
				throws InterruptedException {
			Elements_Reports reports = new Elements_Reports(driver);
			Wait.WaitForElement(driver, OR_Reports.returnToDefaultButton);
			Wait.waitForElementToBeClickable(By.xpath(OR_Reports.returnToDefaultButton), driver);
			reports.returnToDefaultButton.click();
		}
		
		// This method is to validate Net Sales Report Header availability
		public void validateNetSalesReportInMainHeader(WebDriver driver, ArrayList<String> test_steps)
				throws InterruptedException {

			String strName = "//div[contains(text(),'Net Sales Report')]";
			assertTrue(driver.findElement(By.xpath(strName)).isDisplayed(), "Failed to verify Net Sales Report");
			reportLogger.info("Success - Net Sales Report is available in Main header");
			test_steps.add("Success - Net Sales Report is available in Main header");			
		}
		
		public void validateMainHeaderToolTipinNetSaleReport(WebDriver driver, ArrayList<String> test_steps) {
			Elements_Reports res = new Elements_Reports(driver);
			Wait.WaitForElement(driver, OR_Reports.netSalesReportMainHeader);
			if ((res.netSalesReportMainHeader.getAttribute("title")).equals("Report name")) {
				reportLogger.info("Success - validation of Tool tip of Main Header in Net Sales Report");
				test_steps.add("Success - validation of Tool tip of Main Header in Net Sales Report");
			} else {
				reportLogger.info("Failed - validation of Tool tip of Main Header in Net Sales Report");
				test_steps.add("AssertionError - Failed - validation of Tool tip of Main Header in Net Sales Report");
			}

		}
		
		// This method is to validate Net Sales Advanced Inputs availability
		public void validateNetSalesAdvancedInputsAvailability(WebDriver driver, ArrayList<String> test_steps)
				throws InterruptedException {
			try {
				Wait.WaitForElement(driver, OR_Reports.advancedInputs);
				reportLogger.info("Success - Advanced Inputs is available in Net Sales Report page");
				test_steps.add("Success - Advanced Inputs is available in Net Sales Report page");
			} catch (Exception e) {
				reportLogger.info("Failed - Advanced Inputs is not available in Net Sales Report page");
				test_steps.add("AssertionError Failed - Advanced Inputs is not available in Net Sales Report page");
			}

		}
		
		// This method is to validate Advanced Inputs Tooltip
		public ArrayList<String> validateNetSalesAdvancedInputsToolTip(WebDriver driver, ArrayList<String> test_steps) {
			WebElement e = driver.findElement(By.xpath("//*[text()='Advanced Inputs']/../span/span"));
			Utility.hoverOnElement(driver, e);
			Wait.waitForElementToBeVisibile(
					By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Advanced Inputs')]"), driver);
			String act1 = driver
					.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Advanced Inputs')]"))
					.getText();
			String act2 = driver.findElement(By.xpath(
					"//div[@class='ant-popover-inner-content']/p[contains(text(),'Expand this section to view the')]"))
					.getText().replaceAll("[\\t\\n\\r]+", " ");
			String exp1 = "Advanced Inputs";
			String exp2 = "Expand this section to view the list of advanced options you can choose from, to narrow down your search and filter the report data further.";

			if ((exp1.equals(act1)) && (exp2.equals(act2))) {
				reportLogger.info("Success - Advanced Inputs tooltip validation");
				test_steps.add("Sucess - Advanced Inputs tooltip validation");
			} else {
				reportLogger.info("Failed - Advanced Inputs tooltip validation. Expected: " + exp2 + " But found: " + act2);
				test_steps.add("AssertionError Failed - Advanced Inputs tooltip validation. Expected: " + exp2
						+ " But found: " + act2);
			}
			return test_steps;
		}
		
		// This method is to validate Advanced Inputs - Booked On Date Range
		// Tooltip
		public void validateNetSalesBookedOnDateRangeToolTip(WebDriver driver, ArrayList<String> test_steps) {
			Wait.WaitForElement(driver, OR_Reports.bookedDateRange);
			WebElement e = driver.findElement(By.xpath("//*[text()='Booked On Date Range']//following-sibling::span"));
			Utility.hoverOnElement(driver, e);
			Wait.waitForElementToBeVisibile(
					By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Booked on Date Range')]"), driver);
			String act1 = driver
					.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Booked on Date Range')]"))
					.getText();
			String act2 = driver.findElement(By.xpath(
					"//div[@class='ant-popover-inner-content']/p[contains(text(),'Generates report based on reservation')]"))
					.getText().replaceAll("[\\t\\n\\r]+", " ");
			String exp1 = "Booked on Date Range";
			String exp2 = "Generates report based on reservation booked-on date range. If you would like to include reservations from all time without any restriction, select “All” from the dropdown.";

			if ((exp1.equals(act1)) && (exp2.equals(act2))) {
				reportLogger.info("Success - Booked On Date Range tooltip validation");
				test_steps.add("Sucess - Booked On Date Range tooltip validation");
			} else {
				reportLogger.info("Failed - Booked On Date Range tooltip validation");
				test_steps.add("AssertionError Failed - Booked On Date Range tooltip validation");
			}
		}
		
		
		// This method is to validate Advanced Inputs - Booked On Date Range
		// Tooltip
		public void validateIncludeInactiveObsoleteRoomsToolTip(WebDriver driver, ArrayList<String> test_steps) {
			Wait.WaitForElement(driver, OR_Reports.includeInactiveObseleteRooms);
			WebElement e = driver
					.findElement(By.xpath("//*[text()='Include Inactive/ Obsolete  Rooms']//following-sibling::span"));
			Utility.hoverOnElement(driver, e);
			Wait.waitForElementToBeVisibile(
					By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Include Inactive Rooms')]"), driver);
			String act1 = driver
					.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Include Inactive Rooms')]"))
					.getText();
			String act2 = driver
					.findElement(By.xpath(
							"//div[@class='ant-popover-inner-content']/p[contains(text(),'Includes data for inactive')]"))
					.getText().replaceAll("[\\t\\n\\r]+", " ");
			String exp1 = "Include Inactive Rooms";
			String exp2 = "Includes data for inactive/ obsolete roomclasses";

			if ((exp1.equals(act1)) && (exp2.equals(act2))) {
				reportLogger.info("Success - Include Inactive/ Obsolete  Rooms tooltip validation");
				test_steps.add("Sucess - Include Inactive/ Obsolete  Rooms tooltip validation");
			} else {
				reportLogger.info("Failed - Include Inactive/ Obsolete  Rooms tooltip validation");
				test_steps.add("AssertionError Failed - Include Inactive/ Obsolete  Rooms tooltip validation");
			}
		}
		
		// This method is to validate Expand All Advanced Inputs for Include Inactive/
		// Obsolete Rooms
		public void validateNetSalesExpandAllAdvancedOptionsForIncludeInactiveObsoleteRooms(WebDriver driver,
				ArrayList<String> test_steps) {
			Elements_Reports res = new Elements_Reports(driver);

			try {
				Wait.explicit_wait_elementToBeClickable(res.ExpandAll, driver);
				Utility.clickThroughAction(driver, res.ExpandAll);
				Wait.WaitForElement(driver, "//span[contains(text(),'Yes')]");
				boolean condition1 = Utility.isElementDisplayed(driver, By.xpath("//span[contains(text(),'Yes')]"));
				boolean condition2 = Utility.isElementDisplayed(driver, By.xpath("//span[contains(text(),'No')]"));

				if (condition1 && condition2) {
					reportLogger.info(
							"Success - Validaion of Expand All Advanced Inputs functionality for Include Inactive/ Obsolete  Rooms");
					test_steps.add(
							"Sucess - Validaion of Expand All Advanced Inputs functionality Include Inactive/ Obsolete  Rooms");
				} else {
					reportLogger.info(
							"Failed - Validaion of Expand All Advanced Inputs functionality Include Inactive/ Obsolete  Rooms");
					test_steps.add(
							"AssertionError Failed - Validaion of Expand All Advanced Inputs functionality Include Inactive/ Obsolete  Rooms");
				}
			} catch (Exception e) {
				test_steps.add(e.toString());
			} catch (Error e) {
				test_steps.add(e.toString());
			}
		}
		
		// This method is to validate Choose Date Range availability - Net Sales Report
		public boolean validateChooseDateRangeAvailabilityNSR(WebDriver driver, ArrayList<String> test_steps)
				throws InterruptedException {
			boolean flag = false;
			try {
				Wait.WaitForElement(driver, OR_Reports.chooseDateRange);
				reportLogger.info("Success - Choose Date Range is available in Net Sales Report page");
				test_steps.add("Success - Choose Date Range is available in Net Sales Report page");
				flag = true;
			} catch (Exception e) {
				reportLogger.info("Failed - Choose Date Range is not available in Net Sales Report page");
				test_steps.add("AssertionError Failed - Choose Date Range is not available in Net Sales Report page");
				flag = false;
			}

			return flag;
		}

		
		// This method is to validate Date range
		public void validateAllDateRangesForNetSaleReport(WebDriver driver, String startDayOfWeek, String timeZone,
				String dateFormat, String dFormat, ArrayList<String> test_steps)
				throws InterruptedException, ParseException {

			Elements_Reports report = new Elements_Reports(driver);
			SimpleDateFormat format = new SimpleDateFormat(dateFormat);
			String expectedStartDate = "";
			String foundStartDate = "";
			String expectedEndDate = "";
			String foundEndDate = "";

			try {

				test_steps.add("Verify date range values for option Today");
				selectDateRange(driver, "Today", test_steps);
				expectedStartDate = Utility.getCurrentDate(dateFormat, timeZone);
				foundStartDate = format.format(new Date(report.dateStart.getAttribute("value")));
				expectedEndDate = Utility.getCurrentDate(dateFormat, timeZone);
				foundEndDate = format.format(new Date(report.dateEnd.getAttribute("value")));
				test_steps.add("Expected Start Date for option Today : " + expectedStartDate);
				test_steps.add("Found Start Date for option Today : " + foundStartDate);
				Assert.assertEquals(foundStartDate, expectedStartDate,
						"Failed : Start Date Values are mismatching for option Today.");
				test_steps.add("Successfully verified start date values are matching for <b>Today</b> option");

				test_steps.add("Expected End Date for option Today : " + expectedEndDate);
				test_steps.add("Found End Date for option Today : " + foundEndDate);
				Assert.assertEquals(foundEndDate, expectedEndDate,
						"Failed : End Date Values are mismatching for option Today.");
				test_steps.add("Successfully verified End date values are matching for <b>Today</b> option");
			} catch (Exception e) {
				test_steps.add("AssertionError: Today date selection validation failed");
			} catch (Error e) {
				test_steps.add("AssertionError: Today date selection validation failed");
			}

			try {
				test_steps.add("Verify date range values for option Last Month");
				selectDateRange(driver, "Last Month", test_steps);
				Calendar lastMonth = Calendar.getInstance();
				lastMonth.add(Calendar.MONTH, -1);

				String lastMonthFirst = format.format(
						new Date((lastMonth.get(Calendar.MONTH) + 1) + "/" + 01 + "/" + lastMonth.get(Calendar.YEAR)));
				String d = (lastMonth.get(Calendar.MONTH) + 1) + "/" + lastMonth.getActualMaximum(Calendar.DATE) + "/"
						+ lastMonth.get(Calendar.YEAR);
				String lastMonthLast = new SimpleDateFormat(dateFormat).format(new Date(d));
				foundStartDate = format.format(new Date(report.dateStart.getAttribute("value")));
				foundEndDate = report.dateEnd.getAttribute("value");

				test_steps.add("Expected Start Date for option Last Month : " + lastMonthFirst);
				test_steps.add("Found Start Date for option Last Month : " + foundStartDate);
				Assert.assertEquals(foundStartDate, lastMonthFirst,
						"Failed : Start Date Values are mismatching for option Last Month.");
				test_steps.add("Successfully verified start date values are matching for <b>Last Month</b> option");

				test_steps.add("Expected End Date for option Last Month : " + lastMonthLast);
				test_steps.add("Found End Date for option Last Month : " + foundEndDate);
				Assert.assertEquals(foundEndDate, lastMonthLast,
						"Failed : End Date Values are mismatching for option Last Month.");
				test_steps.add("Successfully verified End date values are matching for <b>Last Month</b> option");

			} catch (Exception e) {
				test_steps.add("AssertionError: Last Month date selection validation failed");
			} catch (Error e) {
				test_steps.add("AssertionError: Last Month date selection validation failed");
			}

			try {

				test_steps.add("Verify date range values for option Month To Date");
				selectDateRange(driver, "Month To Date", test_steps);
				Calendar monthToDate = Calendar.getInstance();
				monthToDate.add(Calendar.MONTH, +1);
				Date dd = new Date(monthToDate.get(Calendar.MONTH) + "/" + 1 + "/" + monthToDate.get(Calendar.YEAR));
				String start = format.format(dd);
				expectedEndDate = Utility.getCurrentDate(dateFormat, timeZone);
				foundEndDate = report.dateEnd.getAttribute("value");
				foundStartDate = format.format(new Date(report.dateStart.getAttribute("value")));

				test_steps.add("Expected Start Date for option Month To Date : " + start);
				test_steps.add("Found Start Date for option Month To Date : " + foundStartDate);
				Assert.assertEquals(foundStartDate, start,
						"Failed : Start Date Values are mismatching for option Month To Date.");
				test_steps.add("Successfully verified start date values are matching for <b>Month To Date</b> option");

				test_steps.add("Expected End Date for option Month To Date : " + expectedEndDate);
				test_steps.add("Found End Date for option Month To Date : " + foundEndDate);
				Assert.assertEquals(foundEndDate, expectedEndDate,
						"Failed : End Date Values are mismatching for option Month To Date.");
				test_steps.add("Successfully verified End date values are matching for <b>Month To Date</b> option");

			} catch (Exception e) {
				test_steps.add("AssertionError " + e.toString());
				reportLogger.info("AssertionError " + e.toString());
			} catch (Error e) {
				test_steps.add("AssertionError " + e.toString());
				reportLogger.info("AssertionError " + e.toString());
			}

			try {

				test_steps.add("Verify date range values for option Year To Date");
				selectDateRange(driver, "Year To Date", test_steps);
				Calendar yearToDate = Calendar.getInstance();

				String startYear = format.format(new Date(1 + "/" + 1 + "/" + yearToDate.get(Calendar.YEAR)));
				foundStartDate = format.format(new Date(report.dateStart.getAttribute("value")));
				foundEndDate = report.dateEnd.getAttribute("value");
				expectedEndDate = Utility.getCurrentDate(dateFormat);

				test_steps.add("Expected Start Date for option Year To Date : " + startYear);
				test_steps.add("Found Start Date for option Year To Date : " + foundStartDate);
				Assert.assertEquals(foundStartDate, startYear,
						"Failed : Start Date Values are mismatching for option Year To Date.");
				test_steps.add("Successfully verified start date values are matching for <b>Year To Date</b> option");

				test_steps.add("Expected End Date for option Year To Date : " + expectedEndDate);
				test_steps.add("Found End Date for option Year To Date : " + foundEndDate);
				Assert.assertEquals(foundEndDate, expectedEndDate,
						"Failed : End Date Values are mismatching for option Year To Date.");
				test_steps.add("Successfully verified End date values are matching for <b>Year To Date</b> option");

			} catch (Exception e) {
				test_steps.add("AssertionError: Year To Date date selection validation failed");
			} catch (Error e) {
				test_steps.add("AssertionError: Year To Date date selection validation failed");
			}

			try {

				test_steps.add("Verify date range values for option Last Week");
				selectDateRange(driver, "Last Week", test_steps);
				int dayFrom = 0;
				GregorianCalendar dayBeforeThisWeek = new GregorianCalendar();
				if (startDayOfWeek.equalsIgnoreCase("Monday")) {
					dayFrom = (dayBeforeThisWeek.get(Calendar.DAY_OF_WEEK) + 7 - Calendar.MONDAY) % 7;
				} else if (startDayOfWeek.equalsIgnoreCase("Sunday")) {
					dayFrom = (dayBeforeThisWeek.get(Calendar.DAY_OF_WEEK) + 7 - Calendar.SUNDAY) % 7;
				}

				dayBeforeThisWeek.add(Calendar.DATE, -dayFrom - 1);
				String end = new SimpleDateFormat(dateFormat).format(dayBeforeThisWeek.getTime());
				System.out.println(end);
				dayBeforeThisWeek.add(Calendar.DATE, -6);
				String start = new SimpleDateFormat(dateFormat).format(dayBeforeThisWeek.getTime());
				System.out.println(start);
				foundStartDate = format.format(new Date(report.dateStart.getAttribute("value")));
				foundEndDate = format.format(new Date(report.dateEnd.getAttribute("value")));

				test_steps.add("Expected Start Date for option Last Week : " + start);
				test_steps.add("Found Start Date for option Last Week : " + foundStartDate);
				Assert.assertEquals(foundStartDate, start,
						"Failed : Start Date Values are mismatching for option Last Week.");
				test_steps.add("Successfully verified start date values are matching for <b>Last Week</b> option");

				test_steps.add("Expected End Date for option Last Week : " + end);
				test_steps.add("Found End Date for option Last Week : " + foundEndDate);
				Assert.assertEquals(foundEndDate, end, "Failed : End Date Values are mismatching for option Last Week.");
				test_steps.add("Successfully verified End date values are matching for <b>Last Week</b> option");
			} catch (Exception e) {
				reportLogger.info("Last Week date selection validation failed");
				test_steps.add("AssertionError: Last Week date selection validation failed");
			} catch (Error e) {
				test_steps.add("AssertionError: Last Week date selection validation failed");
			}

			try {

				test_steps.add("Verify date range values for option Last Year");
				selectDateRange(driver, "Last Year", test_steps);

				String start = null, end = null;

				Calendar c = Calendar.getInstance();
				c.add(Calendar.YEAR, -1);
				int firstDate = c.getActualMinimum(Calendar.DATE);
				int month = c.getActualMinimum(Calendar.MONTH) + 1;

				int year = c.get(Calendar.YEAR);
				String firstDay = firstDate + "/" + month + "/" + year;
				System.out.println(firstDay);

				if (dFormat.equalsIgnoreCase("USA")) {
					start = "Jan 01, " + c.get(Calendar.YEAR);
					end = "Dec 31, " + c.get(Calendar.YEAR);
				} else if (dFormat.equalsIgnoreCase("International")) {
					start = "01 Jan, " + c.get(Calendar.YEAR);
					end = "31 Dec, " + c.get(Calendar.YEAR);
				}
				foundEndDate = report.dateEnd.getAttribute("value");
				foundStartDate = format.format(new Date(report.dateStart.getAttribute("value")));

				test_steps.add("Expected Start Date for option Last Year : " + start);
				test_steps.add("Found Start Date for option Last Year : " + foundStartDate);
				Assert.assertEquals(foundStartDate, start,
						"Failed : Start Date Values are mismatching for option Last Year.");
				test_steps.add("Successfully verified start date values are matching for <b>Last Year</b> option");

				test_steps.add("Expected End Date for option Last Year : " + end);
				test_steps.add("Found End Date for option Last Year : " + foundEndDate);
				Assert.assertEquals(foundEndDate, end, "Failed : End Date Values are mismatching for option Last Year.");
				test_steps.add("Successfully verified End date values are matching for <b>Last Year</b> option");

			} catch (Exception e) {
				test_steps.add("AssertionError: Last Year date selection validation failed");
			} catch (Error e) {
				test_steps.add("AssertionError: Last Year date selection validation failed");
			}

		}

		
		public void validateGroupNetSalesByToolTipInNetSalesReport(WebDriver driver, ArrayList<String> test_steps) {
			Wait.WaitForElement(driver, OR_Reports.groupNetSaleBy);
			WebElement e = driver.findElement(By.xpath("//*[text()='Group Net Sales By']/../following-sibling::span"));
			Utility.hoverOnElement(driver, e);
			Wait.waitForElementToBeVisibile(
					By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Group Net Sales By')]"), driver);
			String act1 = driver
					.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Group Net Sales By')]"))
					.getText();
			String act2 = driver
					.findElement(By.xpath(
							"//div[@class='ant-popover-inner-content']/p[contains(text(),'Groups the Summary section')]"))
					.getText().replaceAll("[\\t\\n\\r]+", " ");
			String exp1 = "Group Net Sales By";
			String exp2 = "Groups the Summary section of the report based on the option selected from the drop down list.";

			if ((exp1.equals(act1)) && (exp2.equals(act2))) {
				reportLogger.info("Success - Group Net Sales By tooltip validation");
				test_steps.add("Sucess - Group Net Sales By tooltip validation");
			} else
				Assert.assertTrue(false, "Fail - Group Net Sales By tooltip validation");
		}

		public ArrayList<String> validateGroupNetSalesByOptionsForNetSalesReport(WebDriver driver,
				ArrayList<String> test_steps) throws InterruptedException {
			Elements_Reports res = new Elements_Reports(driver);
			ArrayList<String> actOptions = new ArrayList<>();
			actOptions.add("Channel");
			actOptions.add("Corporate/Member Account");
			actOptions.add("Group");
			actOptions.add("Guest Profile Account");
			actOptions.add("Travel Agent");
			actOptions.add("Guest Country");
			actOptions.add("User Booked");
			/*
			 * actOptions.add("Consumption Day"); actOptions.add("Booking Day");
			 * actOptions.add("Market Segment"); actOptions.add("Promo Code");
			 * actOptions.add("Rate Plan"); actOptions.add("Referral");
			 * actOptions.add("Room Class"); actOptions.add("Room Number");
			 * actOptions.add("State"); actOptions.add("Zip Code");
			 */

			ArrayList<String> foundOptions = new ArrayList<>();
			Utility.clickThroughAction(driver, res.groupNetSalesByOptionsExpand);
			Wait.waitForElementToBeVisibile(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div"),
					driver);
			List<WebElement> expoptions = driver
					.findElements(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div"));
			for (int i = 0; i < expoptions.size() - 1; i++) {
				foundOptions.add(expoptions.get(i).getText());
			}
			Utility.clickThroughAction(driver, res.groupNetSalesByOptionsExpand);
			test_steps.add("Expected Group Net Sales drop down options : " + actOptions);
			reportLogger.info("Expected Group Net Sales drop down options : " + actOptions);
			test_steps.add("Found Group Net Sales drop down options : " + foundOptions);
			reportLogger.info("Found Group Net Sales drop down options : " + foundOptions);
			Assert.assertEquals(foundOptions, actOptions, "Failed : Group Net Sales by options are not mismatching");
			reportLogger.info("Successfully verified All Group Net Sales By drop down options are showing.");
			test_steps.add("Successfully verified All Group Net Sales By drop down options are showing.");
			return test_steps;
		}

		public ArrayList<String> ValidateSelectionOfGivenGroupNetSalesByOption(WebDriver driver,
				ArrayList<String> test_steps, String s) throws InterruptedException {
			int flag = 0;
			Elements_Reports res = new Elements_Reports(driver);
			Utility.clickThroughAction(driver, res.groupNetSalesByOptionsExpand);
			test_steps.add("Clicked on Group Net Sale by Option Expand Icon");
			Wait.waitForElementToBeVisibile(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div"),
					driver);
			List<WebElement> options = driver
					.findElements(By.xpath("//div[@id='groupBy_list']/following-sibling::div/div/div/div/div"));
			for (int i = 0; i < options.size(); i++) {
				if (s.equalsIgnoreCase(options.get(i).getText())) {
					Utility.clickThroughAction(driver, options.get(i));
					reportLogger.info("Successfully clicked on Group Net Sales By Option : " + options.get(i).getText());
					test_steps.add("Successfully clicked on Group Net Sales By Option : " + options.get(i).getText());
					flag = 1;
					break;

				}

			}
			if (flag == 0)
				Assert.assertTrue(false, "Fail - Selection of given Group Net Sales By Option");

			return test_steps;
		}

		public void validateSortReportByToolTipInNetSalesReport(WebDriver driver, ArrayList<String> test_steps) {
			Wait.WaitForElement(driver, OR_Reports.SortReportByOptionsExpand);
			WebElement e = driver.findElement(By.xpath("//*[text()='Sort Report By']/../following-sibling::span"));
			Utility.hoverOnElement(driver, e);
			Wait.waitForElementToBeVisibile(
					By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Sort Report By')]"), driver);
			String act1 = driver
					.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Sort Report By')]"))
					.getText();
			String act2 = driver.findElement(By.xpath(
					"//div[@class='ant-popover-inner-content']/p[contains(text(),'Sorts the Summary section of the report')]"))
					.getText().replaceAll("[\\t\\n\\r]+", " ");
			String exp1 = "Sort Report By";
			String exp2 = "Sorts the Summary section of the report based on the option selected from the drop down list.";

			if ((exp1.equals(act1)) && (exp2.equals(act2))) {
				reportLogger.info("Success - Sort Report By tooltip validation");
				test_steps.add("Sucess - Sort Report By tooltip validation");
			} else
				Assert.assertTrue(false, "Fail - Sort Report By tooltip validation");
		}
		
		public ArrayList<String> validateSortReportbyOptionsForNetSalesReport(WebDriver driver,
				ArrayList<String> test_steps) throws InterruptedException {
			Elements_Reports res = new Elements_Reports(driver);
			ArrayList<String> actOptions = new ArrayList<>();
			ArrayList<String> foundOptions = new ArrayList<>();
			actOptions.add("Name");
			actOptions.add("Booking Nights %");
			actOptions.add("Total Revenue");
			actOptions.add("Cancel %");
			actOptions.add("Average Stay");
			actOptions.add("ADR");
			// actOptions.add("RevPAR");

			Utility.clickThroughAction(driver, res.SortReportByOptionsExpand);
			Wait.waitForElementToBeVisibile(By.xpath("//div[@id='sortBy_list']/following-sibling::div/div/div/div/div"),
					driver);
			List<WebElement> expoptions = driver
					.findElements(By.xpath("//div[@id='sortBy_list']/following-sibling::div/div/div/div/div/div"));
			for (int i = 0; i < expoptions.size() - 1; i++) {
				foundOptions.add(expoptions.get(i).getText());
			}
			Utility.clickThroughAction(driver, res.SortReportByOptionsExpand);
			reportLogger.info("Expected Sort Report By drop down options : " + actOptions);
			test_steps.add("Expected Sort Report By drop down options : " + actOptions);
			reportLogger.info("Found Sort Report By drop down options : " + foundOptions);
			test_steps.add("Found Sort Report By drop down options : " + foundOptions);
			Assert.assertEquals(foundOptions, actOptions, "Failed : Sort Report By drop down options are mismatching. ");
			reportLogger.info("Successfuly verified all Sort Report By drop down options are displaying");
			test_steps.add("Successfuly verified all Sort Report By drop down options are displaying");
			return test_steps;
		}
		
		public ArrayList<String> validateGroupRowsbyToolTipInNetSalesReport(WebDriver driver,
				ArrayList<String> test_steps) {
			Wait.WaitForElement(driver, OR_Reports.groupRowsBy);
			WebElement e = driver.findElement(By.xpath("//*[text()='Group Rows By']/../following-sibling::span"));
			Utility.hoverOnElement(driver, e);
			Wait.waitForElementToBeVisibile(
					By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Group Rows By')]"), driver);
			String act1 = driver
					.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Group Rows By')]"))
					.getText();
			String act2 = driver.findElement(By.xpath(
					"//div[@class='ant-popover-inner-content']/p[contains(text(),'Groups the Detailed section of the report')]"))
					.getText().replaceAll("[\\t\\n\\r]+", " ");
			String exp1 = "Group Rows By";
			String exp2 = "Groups the Detailed section of the report based on options selected in the drop down list. Example: If week consumed is selected from the drop down, then each row is a week and displays report data based on reservations staying each week.";

			if ((exp1.equals(act1)) && (exp2.equals(act2))) {
				reportLogger.info("Success - Group Rows By tooltip validation");
				test_steps.add("Sucess - Group Rows By tooltip validation");
			} else
				Assert.assertTrue(false, "Fail - Group Rows By tooltip validation");
			return test_steps;
		}

		public ArrayList<String> validateGroupRowsbyOptionsInNetSalesReport(WebDriver driver,
				ArrayList<String> test_steps) {
			ArrayList<String> actOptions = new ArrayList<>();
			actOptions.add("Day");
			actOptions.add("Week");
			actOptions.add("Month");
			actOptions.add("Year");
			ArrayList<String> foundOptions = new ArrayList<>();
			Elements_Reports res = new Elements_Reports(driver);
			Utility.clickThroughAction(driver, res.RowsGroupByInNetSales);
			Wait.waitForElementToBeVisibile(
					By.xpath("//div[@id='rowsGroupBy_list']/following-sibling::div/div/div/div/div/div"), driver);
			List<WebElement> expoptions = driver
					.findElements(By.xpath("//div[@id='rowsGroupBy_list']/following-sibling::div/div/div/div/div/div"));
			for (int i = 0; i < expoptions.size(); i++) {
				foundOptions.add(expoptions.get(i).getText());
			}

			reportLogger.info("Expected Group Rows By drop down options : " + actOptions);
			test_steps.add("Expected Group Rows By drop down options : " + actOptions);
			reportLogger.info("Found Group Rows By drop down options : " + foundOptions);
			test_steps.add("Found Group Rows By drop down options : " + foundOptions);
			Assert.assertEquals(foundOptions, actOptions, "Failed : Group Rows By drop down options are mismatching");
			test_steps.add("Successfully evrified Group Rows By drop down options are matching.");
			Utility.clickThroughAction(driver, res.RowsGroupByInNetSales);
			return test_steps;
		}
		
		public boolean runReportToasterMessageDisplays(WebDriver driver) throws InterruptedException {
			Wait.wait2Second();
			String toastrMessageElementPath = "//div[contains(text(),'Please update report inputs and try running the report again')]";
			return driver.findElements(By.xpath(toastrMessageElementPath)).size() > 0 ? true : false;
		}
		
		public boolean runReportNoDataAvailableDisplayed(WebDriver driver) throws InterruptedException {
			Wait.wait2Second();
			String toastrMessageElementPath = "//article[contains(text(),'No Report Data Available')]";
			return driver.findElements(By.xpath(toastrMessageElementPath)).size() > 0 ? true : false;
		}
		public boolean getSelectedGroupNetSalesByRecord(WebDriver driver, String groupNetSalesByOption,
				String commonNetSalesValue) {
			String path = "";

			if (commonNetSalesValue.equals("Group")) {
				path = "//a[text()='" + groupNetSalesByOption + "']";
			} else {
				path = "//td[text()='" + groupNetSalesByOption + "']";
			}
			return driver.findElements(By.xpath(path)).size() > 0 ? true : false;
		}
		
		public HashMap<String, String> setDefaultDataForSummaryViewNetSalesReport() {
			HashMap<String, String> expChanges = new LinkedHashMap<>();
			String zero = "0.00";

			expChanges.put("Net Reservations", "0");
			expChanges.put("Net Room Nights", "0");
			expChanges.put("Booking Nights %", zero + "%");
			expChanges.put("Room Revenue", "$" + zero);
			expChanges.put("Other Revenue", "$" + zero);
			expChanges.put("Total Revenue", "$" + zero);

			expChanges.put("Cancel %", zero + "%");
			expChanges.put("Avg Stay", "1");
			expChanges.put("Avg Daily Rate", "0");
			expChanges.put("Rev PAR", zero);

			return expChanges;
		}

		
		public HashMap<String, String> setDefaultDataForDetailedViewNetSalesReport() {
			HashMap<String, String> expChanges = new LinkedHashMap<>();
			String zero = "0.00";
			expChanges.put("Net Reservation", "0");
			expChanges.put("Net Room Nights", "0");
			expChanges.put("Booking Nights", zero + "%");
			expChanges.put("Room Revenue", "$" + zero);
			expChanges.put("Other Revenue", "$" + zero);
			expChanges.put("Total Revenue", "$" + zero);

			expChanges.put("Cancel", zero + "%");
			expChanges.put("Avg Stay", "1");
			expChanges.put("Avg Daily Rate", "0");
			expChanges.put("Rev PAR", zero);

			return expChanges;
		}
		
		public HashMap<String, String> getSummaryViewDataForNetSaleReport(WebDriver driver,
				String selectedGroupNetSalesByOption) throws InterruptedException {
			Elements_Reports elements = new Elements_Reports(driver);
			HashMap<String, String> data = new LinkedHashMap();
			data.put("Net Reservations",
					driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[2]"))
							.getText());
			data.put("Net Room Nights",
					driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[3]"))
							.getText());
			data.put("Booking Nights %",
					driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[4]"))
							.getText());
			data.put("Room Revenue",
					driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[5]"))
							.getText().replaceAll(",", ""));
			data.put("Other Revenue",
					driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[6]"))
							.getText());
			data.put("Total Revenue",
					driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[7]"))
							.getText().replaceAll(",", ""));
			data.put("Cancel %",
					driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[8]"))
							.getText());
			data.put("Avg Stay",
					driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[9]"))
							.getText());
			data.put("Avg Daily Rate",
					driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[10]"))
							.getText());
			data.put("Rev PAR",
					driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[11]"))
							.getText());

			/*try {
				data.put("Net Reservations",
						driver.findElement(By.xpath("//a[text()='" + selectedGroupNetSalesByOption + "']//..//../td[2]"))
								.getText());
				data.put("Net Room Nights",
						driver.findElement(By.xpath("//a[text()='" + selectedGroupNetSalesByOption + "']//..//../td[3]"))
								.getText());
				data.put("Booking Nights %",
						driver.findElement(By.xpath("//a[text()='" + selectedGroupNetSalesByOption + "']//..//../td[4]"))
								.getText());
				data.put("Room Revenue",
						driver.findElement(By.xpath("//a[text()='" + selectedGroupNetSalesByOption + "']//..//../td[5]"))
								.getText().replaceAll(",", ""));
				data.put("Other Revenue",
						driver.findElement(By.xpath("//a[text()='" + selectedGroupNetSalesByOption + "']//..//../td[6]"))
								.getText());
				data.put("Total Revenue",
						driver.findElement(By.xpath("//a[text()='" + selectedGroupNetSalesByOption + "']//..//../td[7]"))
								.getText().replaceAll(",", ""));
				data.put("Cancel %",
						driver.findElement(By.xpath("//a[text()='" + selectedGroupNetSalesByOption + "']//..//../td[8]"))
								.getText());
				data.put("Avg Stay",
						driver.findElement(By.xpath("//a[text()='" + selectedGroupNetSalesByOption + "']//..//../td[9]"))
								.getText());
				data.put("Avg Daily Rate",
						driver.findElement(By.xpath("//a[text()='" + selectedGroupNetSalesByOption + "']//..//../td[10]"))
								.getText());
				data.put("Rev PAR",
						driver.findElement(By.xpath("//a[text()='" + selectedGroupNetSalesByOption + "']//..//../td[11]"))
								.getText());
			} catch (Exception e) {
				reportLogger.info("Report data not available for given date");
				System.out.println("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[2]");
				data.put("Net Reservations",
						driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[2]"))
								.getText());
				data.put("Net Room Nights",
						driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[3]"))
								.getText());
				data.put("Booking Nights %",
						driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[4]"))
								.getText());
				data.put("Room Revenue",
						driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[5]"))
								.getText().replaceAll(",", ""));
				data.put("Other Revenue",
						driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[6]"))
								.getText());
				data.put("Total Revenue",
						driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[7]"))
								.getText().replaceAll(",", ""));
				data.put("Cancel %",
						driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[8]"))
								.getText());
				data.put("Avg Stay",
						driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[9]"))
								.getText());
				data.put("Avg Daily Rate",
						driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[10]"))
								.getText());
				data.put("Rev PAR",
						driver.findElement(By.xpath("//td[text()='" + selectedGroupNetSalesByOption + "']//..//../td[11]"))
								.getText());

			}*/
			return data;
		}
		
		public HashMap<String, String> getDetailedViewTotalDataForNetSaleReport(WebDriver driver, String requiredDateFormat,
				String option) throws InterruptedException {
			Elements_Reports elements = new Elements_Reports(driver);
			HashMap<String, String> data = new LinkedHashMap();

			try {
				Wait.waitForElementToBeVisibile(
						By.xpath("//td[text()='" + requiredDateFormat + "']/following-sibling::td[1]"), driver, 5);
				data.put("Net Reservation",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[1]"))
								.getText());
				data.put("Net Room Nights",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[2]"))
								.getText());
				data.put("Booking Nights",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[3]"))
								.getText());
				data.put("Room Revenue", driver
						.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[4]"))
						.getText().replaceAll(",", ""));
				data.put("Other Revenue",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[5]"))
								.getText());
				data.put("Total Revenue", driver
						.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[6]"))
						.getText().replaceAll(",", ""));

				data.put("Cancel",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[7]"))
								.getText());
				data.put("Avg Stay",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[8]"))
								.getText());
				data.put("Avg Daily Rate",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[9]"))
								.getText());
				data.put("Rev PAR",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[10]"))
								.getText());

			} catch (Exception e) {
				reportLogger.info("Report data not available for given date");
			}
			return data;
		}
		
		public HashMap<String, String> getSummaryViewDataForTotalNetSaleReport(WebDriver driver)
				throws InterruptedException {
			Elements_Reports elements = new Elements_Reports(driver);
			HashMap<String, String> totalRecord = new LinkedHashMap<>();
			try {

				
				totalRecord.put("Net Reservations", elements.totalNetReservationForNetSaleReport.getText());
				totalRecord.put("Net Room Nights", elements.totalNetRoomNightsForNetSaleReport.getText());
				totalRecord.put("Booking Nights %", elements.totalBookingNightsForNetSaleReport.getText());
				totalRecord.put("Room Revenue", elements.totalRoomRevenueForNetSaleReport.getText().replaceAll(",", ""));
				totalRecord.put("Other Revenue", elements.totalOtherRevenueForNetSaleReport.getText());
				totalRecord.put("Total Revenue", elements.totalRevenueForNetSaleReport.getText().replaceAll(",", ""));
				totalRecord.put("Cancel %", elements.totalCancelForNetSaleReport.getText());
				totalRecord.put("Avg Stay", elements.totalAvgStayForNetSaleReport.getText());
				totalRecord.put("Avg Daily Rate", elements.totalAvgDailyRateForNetSaleReport.getText());
				totalRecord.put("Rev PAR", elements.totalRevPARForNetSaleReport.getText());
			} catch (Exception e) {
				reportLogger.info("Report data not available for given date");
				totalRecord.put("Net Reservations", "0");
				totalRecord.put("Net Room Nights", "0");
				totalRecord.put("Booking Nights %", "0%");
				totalRecord.put("Room Revenue", "$0");
				totalRecord.put("Other Revenue", "$0");
				totalRecord.put("Total Revenue", "$0");
				totalRecord.put("Cancel %", "0%");
				totalRecord.put("Avg Stay", "0");
				totalRecord.put("Avg Daily Rate", "0");
				totalRecord.put("Rev PAR", "0");
			}
			return totalRecord;
		}
		
		public String getValueAfterTrailingAndRoundUp(String value) {
			BigDecimal bigDecimal = new BigDecimal(value);
			BigDecimal roundedWithScale = bigDecimal.setScale(2,BigDecimal.ROUND_HALF_UP);
			if (value.contains(".")) {
			if (value.split("\\.")[1].length() > 2) {
					roundedWithScale = bigDecimal.setScale(2,BigDecimal.ROUND_HALF_UP);
				}
			}
				value = roundedWithScale.stripTrailingZeros().toPlainString();
			return value;

		}
		
		public int getTotalNoOfReservation(WebDriver driver) {

			String totalReservationPath = "//td[text()='Total']//..//../td[3]";
			if (driver.findElements(By.xpath(totalReservationPath)).size() > 0) {
				return Integer.parseInt(driver.findElement(By.xpath(totalReservationPath)).getText());
			} else {
				return 0;
			}
		}
		
		public ArrayList<String> getNumberOfChanelFromSummaryViewPanel(WebDriver driver) {
			String path = "(//h2[text()='Summary View | Net Sales Report']//..//following-sibling::div)[1]//tr[contains(@class,'ant-table-row')]//td[1]";
			List<WebElement> listOfChannelName = driver.findElements(By.xpath(path));
			ArrayList<String> getChannelName = new ArrayList<>();
			for (int i = 0; i < listOfChannelName.size(); i++) {
				getChannelName.add(listOfChannelName.get(i).getText());
			}
			return getChannelName;
		}
		
		public ArrayList<String> getNumberOfChanelFromDetailsView(WebDriver driver, String channel) {
			String path = "//div[contains(text(),'" + channel + "')]//..//..//..//..//following-sibling::tbody//tr//td[1]";
			List<WebElement> listOfChannelName = driver.findElements(By.xpath(path));
			ArrayList<String> getChannelName = new ArrayList<>();
			for (int i = 0; i < listOfChannelName.size(); i++) {
				getChannelName.add(listOfChannelName.get(i).getText());
			}
			return getChannelName;
		}
		
		public HashMap<String, String> getDetailedViewTotalDataForNetSaleReportForRowBy(WebDriver driver, String requiredDateFormat,
				String option) throws InterruptedException {
			Elements_Reports elements = new Elements_Reports(driver);
			HashMap<String, String> data = new LinkedHashMap();
	System.out.println("//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"+requiredDateFormat +"']//following-sibling::td[7]");
			try {
				Wait.waitForElementToBeVisibile(
						By.xpath("//td[text()='" + requiredDateFormat + "']/following-sibling::td[1]"), driver, 5);
				Wait.wait2Second();
				data.put("Net Reservation",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[1]"))
								.getText());
				data.put("Net Room Nights",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[2]"))
								.getText());
				data.put("Booking Nights",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[3]"))
								.getText());
				data.put("Room Revenue", driver
						.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[4]"))
						.getText().replaceAll(",", ""));
				data.put("Other Revenue",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[5]"))
								.getText());
				data.put("Total Revenue", driver
						.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[6]"))
						.getText().replaceAll(",", ""));

				data.put("Cancel",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[7]"))
								.getText());
				data.put("Avg Stay",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[8]"))
								.getText());
				data.put("Avg Daily Rate",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[9]"))
								.getText());
				data.put("Rev PAR",
						driver.findElement(By.xpath(
								"//div[contains(text(),'" + option + "')]/..//..//..//..//following-sibling::tbody//td[text()='"
										+ requiredDateFormat + "']//following-sibling::td[10]"))
								.getText());

			} catch (Exception e) {
				reportLogger.info("Report data not available for given date");
			}
			return data;
		}

		
		public void verifyLoadingReport(WebDriver driver) throws InterruptedException {
			
			Elements_Reports elements = new Elements_Reports(driver);
			Wait.wait1Second();
			int count = 0;

			try {
				reportLogger.info("in try");
				while (count < 20) {
					reportLogger.info(count);
					if (!elements.reportLoading.isDisplayed()) {
						break;
					}
					count = count + 1;
					Wait.wait2Second();
				}
			} catch (Exception e) {
				reportLogger.info("in cathc");
			}
		}
		
		public void verifyHeaderofAnyReport(WebDriver driver,ArrayList<String> test_steps, String stringValue) {
			String path="//p[@class='FilterHeader_valueText_hFFyV' and text()='"+stringValue+"']";
			Wait.WaitForElement(driver, path);
			assertTrue(driver.findElement(By.xpath(path)).isDisplayed(), "Failed to verify" + stringValue);
			reportLogger.info("Verify " +stringValue);
			test_steps.add("Verify "+ stringValue);			
		}
		
		public void verifyNetSalesDateRangeOption(WebDriver driver,ArrayList<String> test_steps) throws InterruptedException {
			Elements_Reports report = new Elements_Reports(driver);
			Utility.ScrollToViewElementINMiddle(driver, report.effectiveDateDropdown);
			report.effectiveDateDropdown.click();
			test_steps.add("Click Day drop down box");
			reportLogger.info("Click Day drop down box");
			String allOption= "//div[@class='ant-select-item-option-content' and text()='All']";
			assertTrue(driver.findElement(By.xpath(allOption)).isEnabled(), "Failed to verify All Option");
			reportLogger.info("Verify All Option");
			test_steps.add("Verify All Option");
			String todayOption= "//div[@class='ant-select-item-option-content' and text()='Today']";
			assertTrue(driver.findElement(By.xpath(todayOption)).isEnabled(), "Failed to verify Today Option");
			reportLogger.info("Verify Today Option");
			test_steps.add("Verify Today Option");	
			String lastWeekOption= "//div[@class='ant-select-item-option-content' and text()='Last Week']";
			assertTrue(driver.findElement(By.xpath(lastWeekOption)).isEnabled(), "Failed to verify Last Week Option");
			reportLogger.info("Verify Last Week Option");
			test_steps.add("Verify Last Week Option");	
			String monthtoDateOption= "//div[@class='ant-select-item-option-content' and text()='Month To Date']";
			assertTrue(driver.findElement(By.xpath(monthtoDateOption)).isEnabled(), "Failed to verify Month To Date Option");
			reportLogger.info("Verify Month To Date Option");
			test_steps.add("Verify Month To Date Option");	
			String yeartoDateOption= "//div[@class='ant-select-item-option-content' and text()='Year To Date']";
			assertTrue(driver.findElement(By.xpath(yeartoDateOption)).isEnabled(), "Failed to verify Year To Date Option");
			reportLogger.info("Verify Year To Date Option");
			test_steps.add("VerifyYear To Date Option");
			String lastMonthOption= "//div[@class='ant-select-item-option-content' and text()='Last Month']";
			assertTrue(driver.findElement(By.xpath(lastMonthOption)).isEnabled(), "Failed to verify Last Month Option");
			reportLogger.info("Verify Last Month Option");
			test_steps.add("Verify Last Month Option");	
			String lastYearOption= "//div[@class='ant-select-item-option-content' and text()='Last Year']";
			assertTrue(driver.findElement(By.xpath(lastYearOption)).isEnabled(), "Failed to verify Last Year Option");
			reportLogger.info("Verify Last Year Option");
			test_steps.add("Verify Last Year Option");			
			Utility.ScrollToViewElementINMiddle(driver, report.effectiveDateDropdown);
			report.effectiveDateDropdown.click();
			test_steps.add("Click Day drop down box");
			reportLogger.info("Click Day drop down box");
		}
		
		public List<String>  getNetSalesReportViewWise(WebDriver driver, String viewName, String reportName, int columnNo) {
			 List<String> data = new ArrayList<String>();
			String path="//div/h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div//td["+columnNo+"]";
			List<WebElement> elements= driver.findElements(By.xpath(path));
			 for(WebElement str : elements) {
				 data.add(str.getText());
			 }
			return data;
		}
		
		public List<String>  getReportsSummaryViewWise(WebDriver driver, String viewName, String reportName, int columnNo) {
			 List<String> data = new ArrayList<String>();
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td["+columnNo+"]";
			List<WebElement> elements= driver.findElements(By.xpath(path));
			 for(WebElement str : elements) {
				 data.add(str.getText());
			 }
			return data;
		}		
		public String calculateOutofOderAsperDays(WebDriver driver,String startDate, String endDate, String totalRooms) throws ParseException {
			String outOfOrder=null;
			if(Utility.validateString(totalRooms)) {			
			SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
			Date d1 = format.parse(startDate);
			Date d2 = format.parse(endDate);
			//in milliseconds
			long diff = d2.getTime() - d1.getTime();
			long diffDays = diff / (24 * 60 * 60 * 1000);					
			reportLogger.info(diffDays);    
	    	int daysCount = (int) diffDays;
	    	daysCount=daysCount+1;
	    	reportLogger.info(daysCount);   
			outOfOrder= String.valueOf(Integer.parseInt(totalRooms)*daysCount);
			}
			return outOfOrder;			
		}
		public String calcualteRevPAR(WebDriver driver, String roomRevenue, String totalRoom, String OutofOrderCount, String inactiveRoomClassCount, String startDate, String endDate, String roomClassAdded, String roomsAfterAddClass) throws ParseException {
			double totalrooms = 0.00;
			String revPAR=null;			
			SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
			Date d1 = format.parse(startDate);
			Date d2 = format.parse(endDate);
			//in milliseconds
			long diff = d2.getTime() - d1.getTime();
			long diffDays = diff / (24 * 60 * 60 * 1000);					
			reportLogger.info(diffDays);    
	    	int days = (int) diffDays;
	    	days=days+1;
	    	reportLogger.info(days); 
	    	if(Utility.validateString(OutofOrderCount)) {
	    	if(OutofOrderCount!="0") {
	    		totalrooms= Double.parseDouble(totalRoom)-Double.parseDouble(OutofOrderCount);
	    	}}
	    	if(Utility.validateString(roomClassAdded)) {				
				if(days>1) {					
					totalrooms=Double.parseDouble(totalRoom)*(days-1);
				}
				totalrooms=totalrooms + Double.parseDouble(roomsAfterAddClass);
			}
			else if(days>1) {
				totalrooms=Double.parseDouble(totalRoom)*days;
			}else {
				totalrooms=Double.parseDouble(totalRoom);
			}
			reportLogger.info(totalrooms);	
			double revenue=Double.parseDouble(roomRevenue)/totalrooms;
			revenue = Math.round(revenue * 100.0) / 100.0;
			revPAR=String.valueOf(revenue);	
			reportLogger.info(revPAR);	
			return revPAR;
		}
		
		
		public String calculateAVGStay(WebDriver driver, String netRoomNights, String netRes) {			
			String avgStay=null;
			avgStay= String.valueOf(Double.parseDouble(netRoomNights)/Double.parseDouble(netRes));
			avgStay=Utility.convertDecimalFormat(avgStay);
			reportLogger.info(avgStay);	
			return avgStay;
		}
		
		public String calculateAvgDailyRate(WebDriver driver, String roomRevenue,String netRoomNights) {
			String avgDailyRate=null;
			avgDailyRate= String.valueOf(Double.parseDouble(roomRevenue)/Double.parseDouble(netRoomNights));
			avgDailyRate=Utility.convertDecimalFormat(avgDailyRate);
			reportLogger.info(avgDailyRate);	
			return avgDailyRate;			
		}
		
		public String calculateTotalRevenue(WebDriver driver, String roomRevenue, String otherRevenue) {			
			String totalRevenue=null;
			totalRevenue= String.valueOf(Double.parseDouble(roomRevenue)+Double.parseDouble(otherRevenue));
			reportLogger.info(totalRevenue);	
			return totalRevenue;
		}				
		public String calculateCancelPercentage(WebDriver driver, String totalReservation, String CancelReservation) {
			String cancelPer=null;
			double cancelPercentage=0.00;
			cancelPercentage= Double.parseDouble(CancelReservation)/Double.parseDouble(totalReservation);
			cancelPercentage = Math.round(cancelPercentage * 100.0) / 100.0;
			cancelPer=String.valueOf(cancelPercentage);					
			reportLogger.info(cancelPer);	
			return cancelPer;
			
		}
		
		public String calculateBokingNights(WebDriver driver, String totalNights, String netNights) {
			String bookNights=null;
			double bookingNights=0.00;
			bookingNights= (Double.parseDouble(netNights)/Double.parseDouble(totalNights))*100;
			bookNights= String.format("%.2f", bookingNights);
			reportLogger.info(bookNights);	
			return bookNights;
			
		}
		public HashMap<String, String> getMainHeaderNetSalesReport(WebDriver driver,ArrayList<String> test_steps){
			Elements_Reports report = new Elements_Reports(driver);
			HashMap<String, String> mainHeader= new HashMap<String, String>();
			mainHeader.put("StayOnDateRange", report.netSalesReportTopHeader.get(0).getText());
			mainHeader.put("GroupNetSalesBy", report.netSalesReportTopHeader.get(1).getText());
			mainHeader.put("SortReportBy", report.netSalesReportTopHeader.get(2).getText());
			mainHeader.put("GroupRowBy", report.netSalesReportTopHeader.get(3).getText());
			mainHeader.put("BookedOnDateRange", report.netSalesReportTopHeader.get(4).getText());
			return mainHeader;
		}
		
		public HashMap<String, String> getMiddleHeaderNetSalesReport(WebDriver driver,ArrayList<String> test_steps){
			Elements_Reports report = new Elements_Reports(driver);
			HashMap<String, String> middleHeader= new HashMap<String, String>();
			middleHeader.put("ReportType", report.netSalesReportMiddleHeader.get(0).getText());
			middleHeader.put("StayOnDateRange", report.netSalesReportMiddleHeader.get(1).getText());
			middleHeader.put("GroupNetSalesBy", report.netSalesReportMiddleHeader.get(2).getText());
			middleHeader.put("SortReportBy", report.netSalesReportMiddleHeader.get(3).getText());
			middleHeader.put("GeneratedON", report.netSalesReportMiddleHeader.get(4).getText());
			middleHeader.put("BookedOnDateRange", report.netSalesReportMiddleHeader.get(5).getText());
			middleHeader.put("GroupRowBy", report.netSalesReportMiddleHeader.get(6).getText());
			middleHeader.put("InactiveObsoleteRoomClasses", report.netSalesReportMiddleHeader.get(7).getText());
			return middleHeader;	
		}
		public void verifyMainHeaderData(WebDriver driver,ArrayList<String> test_steps, HashMap<String, String> headersValue, String dateRange, String groupNetSalesBY,
				String sortReportBY, String groupRowBY, String bookedOnDateRange) {			
			Elements_Reports report = new Elements_Reports(driver);
			Wait.WaitForElement(driver, OR_Reports.netSalesReportTopHeader);
			if(Utility.validateString(dateRange)) {
			Utility.verifyEquals(headersValue.get("StayOnDateRange"), dateRange, test_steps);
			reportLogger.info("Verify Stay on Date Range =" + dateRange);}
			if(Utility.validateString(groupNetSalesBY)) {
				Utility.verifyEquals(headersValue.get("GroupNetSalesBy"), groupNetSalesBY, test_steps);
				reportLogger.info("Verify Group Net Sales By =" + groupNetSalesBY);
			}if(Utility.validateString(sortReportBY)) {
				Utility.verifyEquals(headersValue.get("SortReportBy"), sortReportBY, test_steps);
				reportLogger.info("Verify Sort Report By =" + sortReportBY);
			}if(Utility.validateString(groupRowBY)) {
				Utility.verifyEquals(headersValue.get("GroupRowBy"), groupRowBY, test_steps);
				reportLogger.info("Verify Group Rows By =" + groupRowBY);
			}if(Utility.validateString(bookedOnDateRange)) {
				Utility.verifyEquals(headersValue.get("BookedOnDateRange"), bookedOnDateRange, test_steps);
				reportLogger.info("Verify Booked On Date Range =" + groupRowBY);
			}
			}		
		public void verifyMiddleHeader(WebDriver driver,ArrayList<String> test_steps, HashMap<String, String> headersValue, String reportType, String stayOnDateRange,
				String groupNetSalesBy, String sortReportBy, String generatedON, String bookedOnDateRange, String groupRowBy,String inactiveObsoleteRoomClasses) throws ParseException {		
			if(Utility.validateString(reportType)) {
				Utility.verifyEquals(headersValue.get("ReportType"), reportType, test_steps);}
				if(Utility.validateString(stayOnDateRange)) {
					ArrayList<String> str= Utility.splitInputData(stayOnDateRange);
					Utility.verifyEquals(str.get(0), stayOnDateRange, test_steps);
					reportLogger.info("Verify Stay On Date Range =" + stayOnDateRange);
				}if(Utility.validateString(groupNetSalesBy)) {
					Utility.verifyEquals(headersValue.get("GroupNetSalesBy"), groupNetSalesBy, test_steps);
					reportLogger.info("Verify Group Net Sales by =" + groupNetSalesBy);
				}if(Utility.validateString(sortReportBy)) {
					Utility.verifyEquals(headersValue.get("SortReportBy"), sortReportBy, test_steps);
					reportLogger.info("Verify Sort Report by =" + sortReportBy);
				}if(Utility.validateString(generatedON)) {
					Utility.verifyEquals(headersValue.get("GeneratedON"), generatedON, test_steps);
					reportLogger.info("Verify Generated On =" + generatedON);
				}if(Utility.validateString(bookedOnDateRange)) {
					Utility.verifyEquals(headersValue.get("BookedOnDateRange"), bookedOnDateRange, test_steps);
					reportLogger.info("Verify Booked On Date Range =" + bookedOnDateRange);
				}if(Utility.validateString(groupRowBy)) {
					Utility.verifyEquals(headersValue.get("GroupRowBy"), groupRowBy, test_steps);
					reportLogger.info("Verify Group Rows by =" + groupRowBy);
				}if(Utility.validateString(inactiveObsoleteRoomClasses)) {
					Utility.verifyEquals(headersValue.get("InactiveObsoleteRoomClasses"), inactiveObsoleteRoomClasses, test_steps);
					reportLogger.info("Verify Include Inactive/Obsolete Room Classes =" + inactiveObsoleteRoomClasses);
				}
		}
		
		public void verifyNetSalesReportSummaryViewWise(WebDriver driver, String viewName, String reportName, int columnNo, String expectedValue,ArrayList<String> testSteps) {
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td["+columnNo+"]";
			String actualValue=driver.findElements(By.xpath(path)).get(0).getText();
			if(actualValue.toString().contains(",") && actualValue.toString().contains("$")) {
				actualValue=Utility.convertDecimalFormat(actualValue.replace("$", "").replace(",", ""));
				}else if(actualValue.toString().contains("$")){
					actualValue=Utility.convertDecimalFormat(actualValue.replace("$", ""));}
				else if(actualValue.matches("^\\d+\\.\\d+") ){
					actualValue=Utility.convertDecimalFormat(actualValue);
				}
			Utility.verifyText(actualValue, expectedValue, viewName+" -- "+reportName +" -- " + columnNo , testSteps, reportLogger);
		}
		
		public void verifyNetSalesReportDetailViewHeader(WebDriver driver, String viewName, String reportName,String header,ArrayList<String> testSteps) {
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//th//div";
			String expectedValue=driver.findElement(By.xpath(path)).getText().trim();			
			Utility.verifyText(header, expectedValue, viewName+" -- "+reportName +" -- " + header , testSteps, reportLogger);
		}
		public void verifyNetSalesReportDetailedViewWise(WebDriver driver, String viewName, String reportName, int columnNo, ArrayList<String> expectedValue,ArrayList<String> testSteps) {
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td["+columnNo+"]";
			List<WebElement> elements= driver.findElements(By.xpath(path));
			for(int i=0;i<elements.size();i++) {
				String actualValue=elements.get(i).getText();
				if(actualValue.toString().contains(",") && actualValue.toString().contains("$")) {
					actualValue=Utility.convertDecimalFormat(actualValue.replace("$", "").replace(",", ""));
					}else if(actualValue.toString().contains("$")){
						actualValue=Utility.convertDecimalFormat(actualValue.replace("$", ""));}
					else if(actualValue.matches("^\\d+\\.\\d+") ){
						actualValue=Utility.convertDecimalFormat(actualValue);
					}
					Utility.verifyText(actualValue, expectedValue.get(i), viewName+" -- "+reportName +" -- " + columnNo , testSteps, reportLogger);

			} 		
		}
		
		public void verifyNetSalesReportSummaryViewWiseAvgStay(WebDriver driver, String viewName, String reportName, int columnNo, String expectedValue,ArrayList<String> testSteps) {
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td["+columnNo+"]";
			String actualValue=driver.findElements(By.xpath(path)).get(0).getText();
				actualValue=Utility.convertDecimalFormat(actualValue);
			Utility.verifyText(actualValue, expectedValue, viewName+" -- "+reportName +" -- " + columnNo , testSteps, reportLogger);
		}
		
		public void verifyNetSalesReportDetailedViewWiseAvgStay(WebDriver driver, String viewName, String reportName, int columnNo, ArrayList<String> expectedValue,ArrayList<String> testSteps) {
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td["+columnNo+"]";
			List<WebElement> elements= driver.findElements(By.xpath(path));
			for(int i=0;i< elements.size();i++) {
				String actualValue=elements.get(i).getText();
					actualValue=Utility.convertDecimalFormat(actualValue);
				Utility.verifyText(actualValue, expectedValue.get(i), viewName+" -- "+reportName +" -- " + columnNo , testSteps, reportLogger);

			} 		
		}
		
		public void verifyNetSalesReportDetailedViewWiseDate(WebDriver driver, String viewName, String reportName, int columnNo, ArrayList<String> expectedValue,ArrayList<String> testSteps) {
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td["+columnNo+"]";
			List<WebElement> elements= driver.findElements(By.xpath(path));
			for(int i=0;i< elements.size();i++) {
				String actualValue=elements.get(i).getText();				
				Utility.verifyText(actualValue, expectedValue.get(i), viewName+" -- "+reportName +" -- " + columnNo , testSteps, reportLogger);

			} 		
		}
		
		public HashMap<String, String>  getNetSalesSummaryViewDataClassWiseRowWise(WebDriver driver, String viewName, String reportName, String roomClass) {
			HashMap<String, String>  data = new HashMap<String, String> ();
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//tr[contains(@class,'ant-table-row')]//td[contains(text(),'"+roomClass+"')]//following-sibling::td";
			List<WebElement> elements= driver.findElements(By.xpath(path));
			if(Utility.isElementPresent(driver, By.xpath(path))) {
				 data.put("Net Res",elements.get(0).getText());
				 data.put("Net Room Nights",elements.get(1).getText());
				 if(elements.get(3).getText().toString().contains(",") && elements.get(3).getText().toString().contains("$")) {
						 data.put("Room Revenue",elements.get(3).getText().replace("$", "").replace(",", ""));
						}else if(elements.get(3).getText().toString().contains("$")){
							data.put("Room Revenue",elements.get(3).getText().replace("$", ""));}				 
				 if(elements.get(4).getText().toString().contains(",") && elements.get(4).getText().toString().contains("$")) {
					 data.put("Other Revenue",elements.get(4).getText().replace("$", "").replace(",", ""));
					}else if(elements.get(3).getText().toString().contains("$")){
						data.put("Other Revenue",elements.get(4).getText().replace("$", ""));}}
			else {
					data.put("Net Res","0");
					data.put("Net Room Nights","0");
					data.put("Room Revenue","0");
					data.put("Other Revenue","0");
			}
				return data;
		}
		
		public List<String>  verifyNetSalesSummaryViewDataClassWiseRowWise(WebDriver driver, String viewName, String reportName, String roomClass, int coumnNO,String expectedValues,ArrayList<String> testSteps) {
			 List<String> data = new ArrayList<String>();
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//tr[contains(@class,'ant-table-row')]//td[contains(text(),'"+roomClass+"')]//following-sibling::td["+coumnNO+"]";
			WebElement elements= driver.findElement(By.xpath(path));
				 String actualValue=elements.getText();
					if(actualValue.toString().contains(",") && actualValue.toString().contains("$")) {
						actualValue=Utility.convertDecimalFormat(actualValue.replace("$", "").replace(",", ""));
						}else if(actualValue.toString().contains("$")){
							actualValue=Utility.convertDecimalFormat(actualValue.replace("$", ""));}
						else if(actualValue.matches("^\\d+\\.\\d+") ){
							actualValue=Utility.convertDecimalFormat(actualValue);
						}else if(actualValue.toString().contains("%")) {
							actualValue=Utility.convertDecimalFormat(actualValue.replace("%", ""));
						}
					Utility.verifyText(actualValue, expectedValues, viewName+" -- "+reportName +" -- " + roomClass , testSteps, reportLogger);			 
			return data;
		}
		
		
		public HashMap<String, String>  getNetSalesDetailViewDataClassWiseRowWise(WebDriver driver, String roomClass) {
			HashMap<String, String>  data = new HashMap<String, String> ();
			String path="//div[contains(text(),'"+roomClass+"')]/../../../..//following-sibling::tbody/tr//td";
			List<WebElement> elements= driver.findElements(By.xpath(path));
			if(Utility.isElementPresent(driver, By.xpath(path))) {
					 data.put("Date",elements.get(0).getText());
					 data.put("Net Res",elements.get(1).getText());
					 data.put("Net Room Nights",elements.get(2).getText());
					 data.put("Booking Nights ",elements.get(3).getText());
					 data.put("Room Revenue",elements.get(4).getText());
					 data.put("Other Revenue",elements.get(5).getText());
					 data.put("Total Revenue",elements.get(6).getText());
					 data.put("Cancel",elements.get(7).getText());
					 data.put("Avg Stay",elements.get(8).getText());
					 data.put("Avg Daily Rate",elements.get(9).getText());
					 data.put("Rev PAR",elements.get(10).getText());
			}else {
			
				 data.put("Net Res","0");
				 data.put("Net Room Nights","0");
				 data.put("Booking Nights ","0");
				 data.put("Room Revenue","0");
				 data.put("Other Revenue","0");
				 data.put("Total Revenue","0");
				 data.put("Cancel","0");
				 data.put("Avg Stay","0");
				 data.put("Avg Daily Rate","0");
				 data.put("Rev PAR","0");
				}
			return data;
		}
		
		public List<String>  verifyNetSalesDetailViewDataClassWiseRowWise(WebDriver driver, String roomClass,int tdcoumnNo,String expectedValues,ArrayList<String> testSteps) {
			 List<String> data = new ArrayList<String>();
			 String path="//div[contains(text(),'"+roomClass+"')]/../../../..//following-sibling::tbody/tr//td["+tdcoumnNo+"]";
			WebElement elements= driver.findElement(By.xpath(path));
				 String actualValue=elements.getText();
					if(actualValue.toString().contains(",") && actualValue.toString().contains("$")) {
						actualValue=Utility.convertDecimalFormat(actualValue.replace("$", "").replace(",", ""));
						}else if(actualValue.toString().contains("$")){
							actualValue=Utility.convertDecimalFormat(actualValue.replace("$", ""));}
						else if(actualValue.matches("^\\d+\\.\\d+") ){
							actualValue=Utility.convertDecimalFormat(actualValue);
						}else if(actualValue.toString().contains("%")) {
							actualValue=Utility.convertDecimalFormat(actualValue.replace("%", ""));
						}
					Utility.verifyText(actualValue, expectedValues,"-- "+roomClass , testSteps, reportLogger);			 
			return data;
		}
		
		public void verifyNetSalesReportSummaryViewCategoryWise(WebDriver driver, String viewName, String reportName, int columnNo, String expectedValue,ArrayList<String> testSteps) {
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td["+columnNo+"][text()='"+expectedValue+"']";
			String actualValue=driver.findElement(By.xpath(path)).getText();
			Utility.verifyText(actualValue, expectedValue, viewName+" -- "+reportName +" -- " + columnNo , testSteps, reportLogger);
		}

		
		public void validateDailyFlashReportPaymentsMethodTypes_RV2(WebDriver driver, String PaymentMethod, HashMap<String, ArrayList<String>> beforePaymentDetails,
				HashMap<String, ArrayList<String>> afterPaymentDetails, HashMap<String, String> ledgerAccounts,
				HashMap<String, Double> ledgerAmounts, HashMap<String, String> folioItemValues, int numberOfRooms,
				ArrayList<String> test_steps) throws InterruptedException, ParseException {

			Set<String> ledgers = ledgerAccounts.keySet();
			ArrayList<String> paymentTypes = new ArrayList<>();
			paymentTypes.add("Cash"); paymentTypes.add("Check"); paymentTypes.add("Credit Cards");
			
			Double beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
			Double afterSelectedDate, afterMonthToDate, afterYearToDate;
			Double expValue = (Double.parseDouble(Utility.convertDollarToNormalAmount(driver,folioItemValues.get(PaymentMethod))));
			
			reportLogger.info("Before: "+beforePaymentDetails);
			reportLogger.info("After: "+afterPaymentDetails);
			
			if (PaymentMethod.equalsIgnoreCase("Cash")) {
				beforeSelectedDate = Double.parseDouble(beforePaymentDetails.get("Cash").get(0).replaceAll(",", ""));
				beforeMonthToDate = Double.parseDouble(beforePaymentDetails.get("Cash").get(1).replaceAll(",", ""));
				beforeYearToDate = Double.parseDouble(beforePaymentDetails.get("Cash").get(2).replaceAll(",", ""));
				
				afterSelectedDate = Double.parseDouble(afterPaymentDetails.get("Cash").get(0).replaceAll(",", ""));
				afterMonthToDate = Double.parseDouble(afterPaymentDetails.get("Cash").get(1).replaceAll(",", ""));
				afterYearToDate = Double.parseDouble(afterPaymentDetails.get("Cash").get(2).replaceAll(",", ""));
			}else if(PaymentMethod.equalsIgnoreCase("Check")) {
				beforeSelectedDate = Double.parseDouble(beforePaymentDetails.get("Check").get(0).replaceAll(",", ""));
				beforeMonthToDate = Double.parseDouble(beforePaymentDetails.get("Check").get(1).replaceAll(",", ""));
				beforeYearToDate = Double.parseDouble(beforePaymentDetails.get("Check").get(2).replaceAll(",", ""));
				
				afterSelectedDate = Double.parseDouble(afterPaymentDetails.get("Check").get(0).replaceAll(",", ""));
				afterMonthToDate = Double.parseDouble(afterPaymentDetails.get("Check").get(1).replaceAll(",", ""));
				afterYearToDate = Double.parseDouble(afterPaymentDetails.get("Check").get(2).replaceAll(",", ""));
			}else if(PaymentMethod.equalsIgnoreCase("MC") || PaymentMethod.equalsIgnoreCase("Visa") || PaymentMethod.equalsIgnoreCase("Amex")) {
				beforeSelectedDate = Double.parseDouble(beforePaymentDetails.get("Credit Cards").get(0).replaceAll(",", ""));
				beforeMonthToDate = Double.parseDouble(beforePaymentDetails.get("Credit Cards").get(1).replaceAll(",", ""));
				beforeYearToDate = Double.parseDouble(beforePaymentDetails.get("Credit Cards").get(2).replaceAll(",", ""));
				
				afterSelectedDate = Double.parseDouble(afterPaymentDetails.get("Credit Cards").get(0).replaceAll(",", ""));
				afterMonthToDate = Double.parseDouble(afterPaymentDetails.get("Credit Cards").get(1).replaceAll(",", ""));
				afterYearToDate = Double.parseDouble(afterPaymentDetails.get("Credit Cards").get(2).replaceAll(",", ""));
			}else {
				beforeSelectedDate = Double.parseDouble(beforePaymentDetails.get("Other Payment Methods").get(0).replaceAll(",", ""));
				beforeMonthToDate = Double.parseDouble(beforePaymentDetails.get("Other Payment Methods").get(1).replaceAll(",", ""));
				beforeYearToDate = Double.parseDouble(beforePaymentDetails.get("Other Payment Methods").get(2).replaceAll(",", ""));
				
				afterSelectedDate = Double.parseDouble(afterPaymentDetails.get("Other Payment Methods").get(0).replaceAll(",", ""));
				afterMonthToDate = Double.parseDouble(afterPaymentDetails.get("Other Payment Methods").get(1).replaceAll(",", ""));
				afterYearToDate = Double.parseDouble(afterPaymentDetails.get("Other Payment Methods").get(2).replaceAll(",", ""));
			}
			
			reportLogger.info("beforeSelectedDate: "+beforeSelectedDate);
			reportLogger.info("beforeMonthToDate: "+beforeMonthToDate);
			reportLogger.info("beforeYearToDate: "+beforeYearToDate);
			reportLogger.info("afterSelectedDate: "+afterSelectedDate);
			reportLogger.info("afterMonthToDate: "+afterMonthToDate);
			reportLogger.info("afterYearToDate: "+afterYearToDate);
			
			Double selectedDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
			if (selectedDateValue.equals(expValue)) {
				assertEquals(selectedDateValue,expValue,"Failed - "+"Payments Method Type - "+PaymentMethod + " amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
				reportLogger.info("Payments Method Type - "+PaymentMethod + " amount validated successfully for Selected date");
				test_steps.add("Payments Method Type - "+PaymentMethod + " amount validated successfully for Selected date");
			}
			
			Double monthToDateValue = Utility.getRoundOffValueAfterDecimal(afterMonthToDate-beforeMonthToDate);
			if (monthToDateValue.equals(expValue)) {
				
				assertEquals(monthToDateValue,expValue,"Failed - "+"Payments Method Type - "+PaymentMethod + " amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
				reportLogger.info("Payments Method Type - "+PaymentMethod + " amount validated successfully for Month To date");
				test_steps.add("Payments Method Type - "+PaymentMethod + " amount validated successfully for Month To date");
			}
			
			Double yearToDateValue = Utility.getRoundOffValueAfterDecimal(afterYearToDate-beforeYearToDate);
			if (yearToDateValue.equals(expValue)) {
				assertEquals(yearToDateValue,expValue,"Failed - "+"Payments Method Type - "+PaymentMethod + " amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
				reportLogger.info("Payments Method Type - "+PaymentMethod + " amount validated successfully for Year To date");
				test_steps.add("Payments Method Type - "+PaymentMethod + " amount validated successfully for Year To date");
			}

			try {

				//expValue = (Double.parseDouble(folioItemValues.get(PaymentMethod)));
				
				reportLogger.info("Before: "+beforePaymentDetails);
				reportLogger.info("After: "+afterPaymentDetails);
				
				beforeSelectedDate = Double.parseDouble(beforePaymentDetails.get("Payments Method Types Totals").get(0).replaceAll(",", ""));
				beforeMonthToDate = Double.parseDouble(beforePaymentDetails.get("Payments Method Types Totals").get(1).replaceAll(",", ""));
				beforeYearToDate = Double.parseDouble(beforePaymentDetails.get("Payments Method Types Totals").get(2).replaceAll(",", ""));
				
				afterSelectedDate = Double.parseDouble(afterPaymentDetails.get("Payments Method Types Totals").get(0).replaceAll(",", ""));
				afterMonthToDate = Double.parseDouble(afterPaymentDetails.get("Payments Method Types Totals").get(1).replaceAll(",", ""));
				afterYearToDate = Double.parseDouble(afterPaymentDetails.get("Payments Method Types Totals").get(2).replaceAll(",", ""));
				
				reportLogger.info("beforeSelectedDate: "+beforeSelectedDate);
				reportLogger.info("beforeMonthToDate: "+beforeMonthToDate);
				reportLogger.info("beforeYearToDate: "+beforeYearToDate);
				reportLogger.info("afterSelectedDate: "+afterSelectedDate);
				reportLogger.info("afterMonthToDate: "+afterMonthToDate);
				reportLogger.info("afterYearToDate: "+afterYearToDate);
				
				selectedDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
			
					assertEquals(selectedDateValue,expValue,"Failed - "+"Payments Method Type - Payments Method Types Totals amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
					reportLogger.info("Payments Method Type - Payments Method Types Totals amount validated successfully for Selected date");
					test_steps.add("Payments Method Type - Payments Method Types Totals amount validated successfully for Selected date");
				
				
				monthToDateValue = Utility.getRoundOffValueAfterDecimal(afterMonthToDate-beforeMonthToDate);
				
					assertEquals(monthToDateValue,expValue,"Failed - "+"Payments Method Type - Payments Method Types Totals amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
					reportLogger.info("Payments Method Type - Payments Method Types Totals amount validated successfully for Month To date");
					test_steps.add("Payments Method Type - Payments Method Types Totals amount validated successfully for Month To date");
				
				yearToDateValue = Utility.getRoundOffValueAfterDecimal(afterYearToDate-beforeYearToDate);
				
					assertEquals(yearToDateValue,expValue,"Failed - "+"Payments Method Type - Payments Method Types Totals amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);

					reportLogger.info("Payments Method Type - Payments Method Types Totals amount validated successfully for Year To date");
					test_steps.add("Payments Method Type - Payments Method Types Totals amount validated successfully for Year To date");
				
			}catch(Exception e) {
				test_steps.add("AssertionError - "+e.toString());
				reportLogger.info("AssertionError - "+e.toString());
			}
		}
		public void validateDailyFlashReportPropertyStatistics_RV2(WebDriver driver, HashMap<String, ArrayList<String>> beforePropertyStatisticsDetails,
				HashMap<String, ArrayList<String>> afterPropertyStatisticsDetails, String rowValue, int roomCount, 
				ArrayList<String> test_steps) throws InterruptedException, ParseException {

			int selectedDateValue, monthToDateValue, yearToDateValue;
			int beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
			int afterSelectedDate, afterMonthToDate, afterYearToDate;
			int expValue = 0;
			int daysMonthToDate , daysYearToDate;
			
			Calendar c = Calendar.getInstance();
			daysMonthToDate = c.get(Calendar.DAY_OF_MONTH);
			daysYearToDate = c.get(Calendar.DAY_OF_YEAR);
			
			expValue = roomCount;
				
			reportLogger.info("Before: "+beforePropertyStatisticsDetails);
			reportLogger.info("After: "+afterPropertyStatisticsDetails);
			
			try {
				
				beforeSelectedDate = Integer.parseInt(beforePropertyStatisticsDetails.get(rowValue).get(0).replaceAll(",", ""));
				beforeMonthToDate = Integer.parseInt(beforePropertyStatisticsDetails.get(rowValue).get(1).replaceAll(",", ""));
				beforeYearToDate = Integer.parseInt(beforePropertyStatisticsDetails.get(rowValue).get(2).replaceAll(",", ""));
				
				afterSelectedDate = Integer.parseInt(afterPropertyStatisticsDetails.get(rowValue).get(0).replaceAll(",", ""));
				afterMonthToDate = Integer.parseInt(afterPropertyStatisticsDetails.get(rowValue).get(1).replaceAll(",", ""));
				afterYearToDate = Integer.parseInt(afterPropertyStatisticsDetails.get(rowValue).get(2).replaceAll(",", ""));
				
				reportLogger.info("beforeSelectedDate: "+beforeSelectedDate);
				reportLogger.info("beforeMonthToDate: "+beforeMonthToDate);
				reportLogger.info("beforeYearToDate: "+beforeYearToDate);
				reportLogger.info("afterSelectedDate: "+afterSelectedDate);
				reportLogger.info("afterMonthToDate: "+afterMonthToDate);
				reportLogger.info("afterYearToDate: "+afterYearToDate);
				
				selectedDateValue = (afterSelectedDate)-(beforeSelectedDate);
				
					assertEquals(selectedDateValue,expValue,"Failed - "+"Property Statistics - "+rowValue+" validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
					reportLogger.info("Property Statistics - "+rowValue+" validated successfully for Selected date");
					test_steps.add("Property Statistics - "+rowValue+" validated successfully for Selected date");
				
				
				monthToDateValue = afterMonthToDate-beforeMonthToDate;
				if (rowValue.equalsIgnoreCase("Total Room Nights")) {
					int expMonthToDateValue = roomCount * daysMonthToDate;
					
						assertEquals(monthToDateValue,expMonthToDateValue,"Failed - "+"Property Statistics - "+rowValue+" amount validation for Month To date. Expected: "+expMonthToDateValue+" But found: "+monthToDateValue);
						reportLogger.info("Property Statistics - "+rowValue+" amount validated successfully for Month To date");
						test_steps.add("Property Statistics - "+rowValue+" amount validated successfully for Month To date");
					
				}else {
				
						assertEquals(selectedDateValue,expValue,"Failed - "+"Property Statistics - "+rowValue+" amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
						reportLogger.info("Property Statistics - "+rowValue+" amount validated successfully for Month To date");
						test_steps.add("Property Statistics - "+rowValue+" amount validated successfully for Month To date");
					
				}
				
				yearToDateValue = afterYearToDate-beforeYearToDate;
				if (rowValue.equalsIgnoreCase("Total Room Nights")) {
					int expYearToDateValue = roomCount * daysYearToDate;
						
						assertEquals(yearToDateValue,expYearToDateValue,"Failed - "+"Property Statistics - "+rowValue+" amount validation for Year To date. Expected: "+expYearToDateValue+" But found: "+yearToDateValue);
						reportLogger.info("Property Statistics - "+rowValue+" amount validated successfully for Year To date");
						test_steps.add("Property Statistics - "+rowValue+" amount validated successfully for Year To date");
					
				}else {
					
						assertEquals(selectedDateValue,expValue,"Property Statistics - "+rowValue+" amount validated successfully for Year To date");
						reportLogger.info("Property Statistics - "+rowValue+" amount validated successfully for Year To date");
						test_steps.add("Property Statistics - "+rowValue+" amount validated successfully for Year To date");
					
				}
			}catch(Exception e) {
				test_steps.add("AssertionError - "+e.toString());
				reportLogger.info("AssertionError - "+e.toString());
			}
		}
		
		public void validateDailyFlashReportRevenueTypes_RV2(WebDriver driver, HashMap<String, ArrayList<String>> beforeRevenueDetails,
				HashMap<String, ArrayList<String>> afterRevenueDetails, HashMap<String, String> ledgerAccounts,
				HashMap<String, Double> ledgerAmounts, HashMap<String, String> folioItemValues, int numberOfRooms,
				ArrayList<String> test_steps) throws InterruptedException, ParseException {

			Set<String> ledgers = ledgerAccounts.keySet();

			for (String ledger : ledgers) {

				//ArrayList<String> date = new ArrayList<>();
				Double beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
				Double afterSelectedDate, afterMonthToDate, afterYearToDate;
				reportLogger.info("Ledger: "+ledger);
				beforeSelectedDate = Double.parseDouble(beforeRevenueDetails.get(ledger).get(0).replaceAll(",", ""));
				beforeMonthToDate = Double.parseDouble(beforeRevenueDetails.get(ledger).get(1).replaceAll(",", ""));
				beforeYearToDate = Double.parseDouble(beforeRevenueDetails.get(ledger).get(2).replaceAll(",", ""));
				reportLogger.info("Before: "+beforeSelectedDate+"  "+beforeMonthToDate+"  "+beforeYearToDate);
				
				afterSelectedDate = Double.parseDouble(afterRevenueDetails.get(ledger).get(0).replaceAll(",", ""));
				afterMonthToDate = Double.parseDouble(afterRevenueDetails.get(ledger).get(1).replaceAll(",", ""));
				afterYearToDate = Double.parseDouble(afterRevenueDetails.get(ledger).get(2).replaceAll(",", ""));
				reportLogger.info("After: "+afterSelectedDate+"  "+afterMonthToDate+"  "+afterYearToDate);
				//Double expValue = (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms);
				Double expValue = ledgerAmounts.get(ledger);
				
				//Double selectedDateValue = afterSelectedDate-beforeSelectedDate;
				Double selectedDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
				
					assertEquals(selectedDateValue,expValue,"Failed - "+"Revenue Type - "+ledger + " amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
					reportLogger.info("Revenue Type - "+ledger + " amount validated successfully for Selected date");
					test_steps.add("Revenue Type - "+ledger + " amount validated successfully for Selected date");
				
				
				Double monthToDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
				
					assertEquals(selectedDateValue,expValue,"Failed - "+"Revenue Type - "+ledger + " amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
					reportLogger.info("Revenue Type - "+ledger + " amount validated successfully for Month To date");
					test_steps.add("Revenue Type - "+ledger + " amount validated successfully for Month To date");
				
				Double yearToDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
			
					assertEquals(selectedDateValue,expValue,"Failed - "+"Revenue Type - "+ledger + " amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
					reportLogger.info("Revenue Type - "+ledger + " amount validated successfully for Year To date");
					test_steps.add("Revenue Type - "+ledger + " amount validated successfully for Year To date");
				
			}
			
			try {
				
				Double expTotalRevenue = (ledgerAmounts.get("Room Charges")+ledgerAmounts.get("Incidentals")+ledgerAmounts.get("Taxes")+ledgerAmounts.get("Fees"));
				
				reportLogger.info("Total before: "+beforeRevenueDetails);
				reportLogger.info("Total After: "+afterRevenueDetails);
				
				Double beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
				Double afterSelectedDate, afterMonthToDate, afterYearToDate;
				beforeSelectedDate = Double.parseDouble(beforeRevenueDetails.get("Revenue Types Totals").get(0).replaceAll(",", ""));
				beforeMonthToDate = Double.parseDouble(beforeRevenueDetails.get("Revenue Types Totals").get(1).replaceAll(",", ""));
				beforeYearToDate = Double.parseDouble(beforeRevenueDetails.get("Revenue Types Totals").get(2).replaceAll(",", ""));
				reportLogger.info("Before: "+beforeSelectedDate+"  "+beforeMonthToDate+"  "+beforeYearToDate);
				
				afterSelectedDate = Double.parseDouble(afterRevenueDetails.get("Revenue Types Totals").get(0).replaceAll(",", ""));
				afterMonthToDate = Double.parseDouble(afterRevenueDetails.get("Revenue Types Totals").get(1).replaceAll(",", ""));
				afterYearToDate = Double.parseDouble(afterRevenueDetails.get("Revenue Types Totals").get(2).replaceAll(",", ""));
				reportLogger.info("After: "+afterSelectedDate+"  "+afterMonthToDate+"  "+afterYearToDate);
				//Double expValue = (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms);
				
				Double selectedDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
				
					assertEquals(selectedDateValue,expTotalRevenue,"Failed - "+"Revenue Type - Revenue Types Totals amount validation for Selected date. Expected: "+expTotalRevenue+" But found: "+selectedDateValue);
					reportLogger.info("Revenue Type - Revenue Types Totals amount validated successfully for Selected date");
					test_steps.add("Revenue Type - Revenue Types Totals amount validated successfully for Selected date");
				
				
				Double monthToDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
			
					assertEquals(selectedDateValue,expTotalRevenue,"Failed - "+"Revenue Type - Revenue Types Totals amount validation for Month To date. Expected: "+expTotalRevenue+" But found: "+monthToDateValue);
					reportLogger.info("Revenue Type - Revenue Types Totals amount validated successfully for Month To date");
					test_steps.add("Revenue Type - Revenue Types Totals amount validated successfully for Month To date");
				
				
				Double yearToDateValue = Utility.getRoundOffValueAfterDecimal(afterSelectedDate-beforeSelectedDate);
				
					assertEquals(selectedDateValue,expTotalRevenue,"Failed - "+"Revenue Type - Revenue Types Totals amount validation for Year To date. Expected: "+expTotalRevenue+" But found: "+yearToDateValue);
					reportLogger.info("Revenue Type - Revenue Types Totals amount validated successfully for Year To date");
					test_steps.add("Revenue Type - Revenue Types Totals amount validated successfully for Year To date");
				
			}catch (Exception e) {
				reportLogger.info(e.toString());
				test_steps.add(e.toString());
			}


		}
		
		public void validateDailyFlashEffectiveDateToolTip_RV2(WebDriver driver, ArrayList<String> test_steps) {
			Wait.WaitForElement(driver, OR_Reports.txtDailyFlashDate);
			WebElement e = driver
					.findElement(By.xpath("//*[text()='Effective date']/../span/span"));
			Utility.hoverOnElement(driver, e);
			Wait.waitForElementToBeVisibile(
					By.xpath("//*[contains(text(),'Effective date')]"), driver);
			String act1 = driver
					.findElement(By.xpath("//*[contains(text(),'Effective date')]"))
					.getText();
			String act2 = driver.findElement(By.xpath(
					"//div[@class='ant-popover-inner-content']/p[contains(text(),'Select a pre-defined date or enter a custom date.')]"))
					.getText().replaceAll("[\\t\\n\\r]+", " ");
			String exp1 = "Effective date";
			String exp2 = "Select a pre-defined date or enter a custom date.";
			

			
				assertEquals(exp1,act1,"Failed - Effective date tooltip validation");
				assertEquals(exp2,act2,"Failed - Effective date tooltip validation");
				reportLogger.info("Success - Effective date tooltip validation");
				test_steps.add("Sucess - Effective date tooltip validation");
			

		}
		
		public void validateDailyFlashDefaultDateSelection_RV2(WebDriver driver, String timeZone, String dateFormat, ArrayList<String> test_steps) {

			Elements_Reports report = new Elements_Reports(driver);
			//String dateFormat = "dd MMM, YYYY EEEE";
			String actual = report.dayCurrentSelected.getText();

			
				assertEquals("Today",actual,"Failed, Today is not selected by default in date Dropdown. Expected: Today, but Found: " + actual);
				
				reportLogger.info("Today is selected by default in date Dropdown");
				test_steps.add("Today is selected by default in date Dropdown");

			

			String actualDate = report.dateDailyFlash.getAttribute("value");
			// String expectedDate = new SimpleDateFormat("MMM dd, YYYY, EEEE").format(new
			// Date(Utility.getCurrentDate("MM/dd/YYYY")));
			String expectedDate = Utility.getCurrentDate(dateFormat, timeZone);
			reportLogger.info("Today date: "+expectedDate);

		
				assertEquals(expectedDate,actualDate,"Failed, Current date not selected by default in date Selection. Expected: "
						+ expectedDate + " , but Found: " + actualDate);
				
				reportLogger.info("Current date " + expectedDate + " selected by default in date Selection");
				test_steps.add("Current date " + expectedDate + " selected by default in date Selection");


		}
		
		public void validateDailyFlashTomorrowDateSelection_RV2(WebDriver driver, String timeZone, String dateFormat, ArrayList<String> test_steps) throws ParseException {

			Elements_Reports report = new Elements_Reports(driver);
			//String dateFormat = "dd MMM, YYYY EEEE";
			
			try {
				selectDateRange(driver, "Tomorrow", test_steps);
				
				String actual = report.dayCurrentSelected.getText();

				
					assertEquals("Tomorrow",actual,"Failed, Tomorrow is not selected in date Dropdown after clicking on Tomorrow. Expected: Tomorrow, but Found: "
							+ actual);
					reportLogger.info("Tomorrow is selected in date Dropdown after clicking on Tomorrow");
					test_steps.add("Tomorrow is selected in date Dropdown after clicking on Tomorrow");

				
			} catch (Exception e) {

			} catch (Error e) {

			}

			try {
				String actualDate = report.dateDailyFlash.getAttribute("value");
				reportLogger.info("Actual Tomarrow date: "+actualDate);
				// String expectedDate = new SimpleDateFormat("MMM dd, YYYY, EEEE").format(new
				// Date(Utility.getCurrentDate("MM/dd/YYYY")));
				String expectedDate = Utility.parseDate(Utility.getDatePast_FutureDate(1, timeZone), "MM/dd/yyyy", dateFormat);
				reportLogger.info("Expected Tomarrow date: "+expectedDate);
				

					assertEquals(expectedDate,actualDate,"Failed, Tomorrow date " + expectedDate
							+ " not selected in date Selection after clicking on Tomorrow. Expected: " + expectedDate
							+ " , but Found: " + actualDate);
					reportLogger.info(
							"Tomorrow date " + expectedDate + " selected in date Selection after clicking on Tomorrow");
					test_steps.add(
							"Tomorrow date " + expectedDate + " selected in date Selection after clicking on Tomorrow");

				
			} catch (Exception e) {

			} catch (Error e) {

			}

		}

		public void validateDailyFlashYesterdayDateSelection_RV2(WebDriver driver, String timeZone, String dateFormat, ArrayList<String> test_steps) throws ParseException {

			Elements_Reports report = new Elements_Reports(driver);
			//String dateFormat = "dd MMM, YYYY EEEE";
			
			try {
				selectDateRange(driver, "Yesterday", test_steps);

				String actual = report.dayCurrentSelected.getText();

					assertEquals("Yesterday",actual,"Failed, Yesterday is not selected in date Dropdown after clicking on Yesterday. Expected: Yesterday, but Found: "
							+ actual);
					reportLogger.info("Yesterday is selected in date Dropdown after clicking on Yesterday");
					test_steps.add("Yesterday is selected in date Dropdown after clicking on Yesterday");

				
			} catch (Exception e) {

			} catch (Error e) {

			}

			try {
				String actualDate = report.dateDailyFlash.getAttribute("value");
				reportLogger.info("Actual Ysterday date: "+actualDate);
				// String expectedDate = new SimpleDateFormat("MMM dd, YYYY, EEEE").format(new
				// Date(Utility.getCurrentDate("MM/dd/YYYY")));
				String expectedDate = Utility.parseDate(Utility.getDatePast_FutureDate(-1, timeZone), "MM/dd/yyyy", dateFormat);
				reportLogger.info("Expected Yesterday date: "+expectedDate);
				
				reportLogger.info("Expected date: " + expectedDate);
				reportLogger.info("Actual date: " + actualDate);

				
					assertEquals(expectedDate,actualDate,"Failed, Yesterday date " + expectedDate
							+ " not selected in date Selection after clicking on Yesterday. Expected: " + expectedDate
							+ " , but Found: " + actualDate);
					reportLogger.info(
							"Yesterday date " + expectedDate + " selected in date Selection after clicking on Yesterday");
					test_steps.add(
							"Yesterday date " + expectedDate + " selected in date Selection after clicking on Yesterday");

			
			} catch (Exception e) {

			} catch (Error e) {

			}

		}
		
		public void validateDailyFlashCustomDateSelection_RV2(WebDriver driver, String dateStart, String dateFormat, ArrayList<String> test_steps)
				throws InterruptedException {

			Elements_Reports report = new Elements_Reports(driver);
			selectDateDailyFlash(driver, dateStart, test_steps);

			String actualDate = report.dateSelectDailyFlash.getAttribute("value");
			reportLogger.info("Actual date: " + actualDate);
			String expecteddate = Utility.parseDate(dateStart, "dd/MM/yyyy", dateFormat);
			reportLogger.info("Expected date: " + expecteddate);

			
				assertEquals(expecteddate,actualDate,"Failed - Daily Flash Custom date selection Validation failed. Expected: " + expecteddate
						+ " But found: " + actualDate);
				reportLogger.info("Daily Flash Custom date selection Validated Successfully");
				test_steps.add("Daily Flash Custom date selection Validated Successfully");
			
		}
		
		public void validateDailyFlashAdvancedInputsToolTip_RV2(WebDriver driver, ArrayList<String> test_steps) {
			Wait.WaitForElement(driver, OR_Reports.txtDailyAdvancedInputs);
			WebElement e = driver
					.findElement(By.xpath("//*[text()='Advanced Inputs']/../span/span"));
			Utility.hoverOnElement(driver, e);
			Wait.waitForElementToBeVisibile(
					By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Advanced Inputs')]"), driver);
			String act1 = driver
					.findElement(By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Advanced Inputs')]"))
					.getText();
			String act2 = driver.findElement(By.xpath(
					"//div[@class='ant-popover-inner-content']/p[contains(text(),'Expand this section to view the')]"))
					.getText().replaceAll("[\\t\\n\\r]+", " ");
			String exp1 = "Advanced Inputs";
			String exp2 = "Expand this section to view the list of advanced inputs you can choose from, to narrow down your search and filter the report data further.";

		
				assertEquals(exp1,act1,"Failed - Advanced Inputs tooltip validation. Expected: "+exp2+" But found: "+act1);
				assertEquals(exp2,act2,"Failed - Advanced Inputs tooltip validation. Expected: "+exp2+" But found: "+act2);
				reportLogger.info("Success - Advanced Inputs tooltip validation");
				test_steps.add("Sucess - Advanced Inputs tooltip validation");
			
		}
		
		public void validateDailyFlashBreakOutTaxExemptRevenueToolTip_RV2(WebDriver driver, ArrayList<String> test_steps) {
			Wait.WaitForElement(driver, OR_Reports.txtBreakOutTaxExemptRevenue);
			WebElement e = driver
					.findElement(By.xpath("//*[text()='Break Out Tax-Exempt Revenue']//following-sibling::span"));
			Utility.hoverOnElement(driver, e);
			Wait.waitForElementToBeVisibile(
					By.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Break Out Tax-Exempt Revenue')]"),
					driver);
			String act1 = driver
					.findElement(By
							.xpath("//div[@class='ant-popover-title']/b[contains(text(),'Break Out Tax-Exempt Revenue')]"))
					.getText();
			String act2 = driver.findElement(By.xpath(
					"//div[@class='ant-popover-inner-content']/p[contains(text(),'Choose this option to display the')]"))
					.getText().replaceAll("[\\t\\n\\r]+", " ");
			String exp1 = "Break Out Tax-Exempt Revenue";
			String exp2 = "Choose this option to display the taxable and non-taxable room revenue for the selected date, Month To Date and Year To Date.";

			
				assertEquals(exp1,act1,"Failed - Advanced Inputs tooltip validation. Expected: "+exp2+" But found: "+act1);
				assertEquals(exp2,act2,"Failed - Advanced Inputs tooltip validation. Expected: "+exp2+" But found: "+act2);
				reportLogger.info("Success - Break Out Tax-Exempt Revenue tooltip validation");
				test_steps.add("Sucess - Break Out Tax-Exempt Revenue tooltip validation");
			
		}
		
		public void validateDailyFlashExpandAllAdvancedOptions_RV2(WebDriver driver, ArrayList<String> test_steps) {
			Elements_Reports res = new Elements_Reports(driver);

			try {
				Wait.explicit_wait_elementToBeClickable(res.ExpandAll, driver);
				Utility.clickThroughAction(driver, res.ExpandAll);
				Wait.WaitForElement(driver, "//span[contains(text(),'Yes')]");
				boolean condition1 = Utility.isElementDisplayed(driver, By.xpath("//span[contains(text(),'Yes')]"));
				boolean condition2 = Utility.isElementDisplayed(driver, By.xpath("//span[contains(text(),'No')]"));

			
					assertEquals(condition1,true,"Failed - Validaion of Expand All Advanced Inputs functionlity");
					assertEquals(condition2,true,"Failed - Validaion of Expand All Advanced Inputs functionlity");
					reportLogger.info("Success - Validaion of Expand All Advanced Inputs functionlity");
					test_steps.add("Sucess - Validaion of Expand All Advanced Inputs functionlity");
				
			} catch (Exception e) {
				test_steps.add(e.toString());
			} catch (Error e) {
				test_steps.add(e.toString());
			}
		}
		public void validatePropertyStatisticsBookableRoomNights_RV2(WebDriver driver, 
				HashMap<String, ArrayList<String>> afterPropertyStatisticsDetails,
				ArrayList<String> test_steps) throws InterruptedException, ParseException {

			int totalRoomRoomNights, outOfOrderRoomNights, bookableRoomNights, expBookableRoomNights;
					
			reportLogger.info("After: "+afterPropertyStatisticsDetails);
			
			String[] dates = {"Selected Date", "Month to Date", "Year to Date"};
			
			for (int i = 0; i < dates.length; i++) {
				try {
					totalRoomRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Total Room Nights").get(i).replaceAll(",", ""));
					outOfOrderRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Out of Order Room Nights").get(i).replaceAll(",", ""));
					bookableRoomNights = Integer.parseInt(afterPropertyStatisticsDetails.get("Bookable Room Nights").get(i).replaceAll(",", ""));
					
					expBookableRoomNights = totalRoomRoomNights - outOfOrderRoomNights;
					
				
						assertEquals(expBookableRoomNights,bookableRoomNights,"Failed - Property Statistics - Bookable Room Nights - validation for "+dates[i]+". Expected: "+expBookableRoomNights+" But found: "+bookableRoomNights);
						reportLogger.info("Property Statistics - Bookable Room Nights - validated successfully for "+dates[i]);
						test_steps.add("Property Statistics - Bookable Room Nights - validated successfully for "+dates[i]);
								
					
				}catch(Exception e) {
					test_steps.add("AssertionError - "+e.toString());
					reportLogger.info("AssertionError - "+e.toString());
				}
			}	
		}
		
		public void validateDailyFlashReportRoomsRevenue_RV2(WebDriver driver, HashMap<String, ArrayList<String>> beforeRoomsRevenue,
				HashMap<String, ArrayList<String>> afterRoomsRevenue, HashMap<String, String> ledgerAccounts,
				HashMap<String, Double> ledgerAmounts, HashMap<String, String> folioItemValues, int numberOfRooms,
				String isTaxExempt,
				ArrayList<String> test_steps) throws InterruptedException, ParseException {
			
			String ledger = "Room Charges";
			
			//ArrayList<String> date = new ArrayList<>();

			Double expValue = 0.0;
			String[] rooms = {"Exempt", "Taxable"};
			
			for (int i = 0; i < rooms.length; i++) {
				Double beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
				Double afterSelectedDate, afterMonthToDate, afterYearToDate;
				reportLogger.info("Ledger: "+ledger);
				beforeSelectedDate = Double.parseDouble(beforeRoomsRevenue.get(rooms[i]).get(0).replaceAll(",", ""));
				beforeMonthToDate = Double.parseDouble(beforeRoomsRevenue.get(rooms[i]).get(1).replaceAll(",", ""));
				beforeYearToDate = Double.parseDouble(beforeRoomsRevenue.get(rooms[i]).get(2).replaceAll(",", ""));
				reportLogger.info("Before: "+beforeSelectedDate+"  "+beforeMonthToDate+"  "+beforeYearToDate);
				
				afterSelectedDate = Double.parseDouble(afterRoomsRevenue.get(rooms[i]).get(0).replaceAll(",", ""));
				afterMonthToDate = Double.parseDouble(afterRoomsRevenue.get(rooms[i]).get(1).replaceAll(",", ""));
				afterYearToDate = Double.parseDouble(afterRoomsRevenue.get(rooms[i]).get(2).replaceAll(",", ""));
				reportLogger.info("After: "+afterSelectedDate+"  "+afterMonthToDate+"  "+afterYearToDate);
				//Double expValue = (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms);
				
				if (isTaxExempt.equalsIgnoreCase("Yes")) {
					if (rooms[i].equalsIgnoreCase("Exempt")) {
						expValue = ledgerAmounts.get(ledger);
					}
				}else {
					if (rooms[i].equalsIgnoreCase("Taxable")) {
						expValue = ledgerAmounts.get(ledger);
					}
				}
				
				Double selectedDateValue = afterSelectedDate-beforeSelectedDate;
				assertEquals(selectedDateValue,expValue,"Failed - "+"Rooms Revenue - "+rooms[i] + " amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
				reportLogger.info("Rooms Revenue - "+rooms[i] + " amount validated successfully for Selected date");
				test_steps.add("Rooms Revenue - "+rooms[i] + " amount validated successfully for Selected date");
				
				
				Double monthToDateValue = afterSelectedDate-beforeSelectedDate;
				assertEquals(monthToDateValue,expValue,"Failed - "+"Rooms Revenue - "+rooms[i] + " amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
					reportLogger.info("Rooms Revenue - "+rooms[i] + " amount validated successfully for Month To date");
					test_steps.add("Rooms Revenue - "+rooms[i] + " amount validated successfully for Month To date");
				
				
				Double yearToDateValue = afterSelectedDate-beforeSelectedDate;
				assertEquals(yearToDateValue,expValue,"Failed - "+"Rooms Revenue - "+rooms[i] + " amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
					reportLogger.info("Rooms Revenue - "+rooms[i] + " amount validated successfully for Year To date");
					test_steps.add("Rooms Revenue - "+rooms[i] + " amount validated successfully for Year To date");
				
			}
			
			
			try {
				
				Double expTotalRevenue = (ledgerAmounts.get("Room Charges"));
				
				reportLogger.info("Total before: "+beforeRoomsRevenue);
				reportLogger.info("Total After: "+afterRoomsRevenue);
				
				Double beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
				Double afterSelectedDate, afterMonthToDate, afterYearToDate;
				beforeSelectedDate = Double.parseDouble(beforeRoomsRevenue.get("Rooms Revenue Totals").get(0).replaceAll(",", ""));
				beforeMonthToDate = Double.parseDouble(beforeRoomsRevenue.get("Rooms Revenue Totals").get(1).replaceAll(",", ""));
				beforeYearToDate = Double.parseDouble(beforeRoomsRevenue.get("Rooms Revenue Totals").get(2).replaceAll(",", ""));
				reportLogger.info("Before: "+beforeSelectedDate+"  "+beforeMonthToDate+"  "+beforeYearToDate);
				
				afterSelectedDate = Double.parseDouble(afterRoomsRevenue.get("Rooms Revenue Totals").get(0).replaceAll(",", ""));
				afterMonthToDate = Double.parseDouble(afterRoomsRevenue.get("Rooms Revenue Totals").get(1).replaceAll(",", ""));
				afterYearToDate = Double.parseDouble(afterRoomsRevenue.get("Rooms Revenue Totals").get(2).replaceAll(",", ""));
				reportLogger.info("After: "+afterSelectedDate+"  "+afterMonthToDate+"  "+afterYearToDate);
				//Double expValue = (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms);
				
				Double selectedDateValue = afterSelectedDate-beforeSelectedDate;
				assertEquals(selectedDateValue,expTotalRevenue,"Failed - "+"Rooms Revenue - Rooms Revenue Totals amount validation for Selected date. Expected: "+expTotalRevenue+" But found: "+selectedDateValue);
		
					reportLogger.info("Rooms Revenue - Rooms Revenue Totals amount validated successfully for Selected date");
					test_steps.add("Rooms Revenue - Rooms Revenue Totals amount validated successfully for Selected date");
				
				
				Double monthToDateValue = afterSelectedDate-beforeSelectedDate;
				assertEquals(monthToDateValue,expTotalRevenue,"Failed - "+"Rooms Revenue - Rooms Revenue Totals amount validation for Month To date. Expected: "+expTotalRevenue+" But found: "+monthToDateValue);

					reportLogger.info("Rooms Revenue - Rooms Revenue Totals amount validated successfully for Month To date");
					test_steps.add("Rooms Revenue - Rooms Revenue Totals amount validated successfully for Month To date");
				
				
				Double yearToDateValue = afterSelectedDate-beforeSelectedDate;
				assertEquals(yearToDateValue,expTotalRevenue,"Failed - "+"Rooms Revenue - Rooms Revenue Totals amount validation for Year To date. Expected: "+expTotalRevenue+" But found: "+yearToDateValue);
				
					reportLogger.info("Rooms Revenue - Rooms Revenue Totals amount validated successfully for Year To date");
					test_steps.add("Rooms Revenue - Rooms Revenue Totals amount validated successfully for Year To date");
				
			}catch (Exception e) {
				reportLogger.info(e.toString());
				test_steps.add(e.toString());
			}


		}	
		
		
		public void validateDailyFlashReportGuestCount_RV2(WebDriver driver, HashMap<String, ArrayList<String>> beforeGuestCountDetails,
				HashMap<String, ArrayList<String>> afterGuestCountDetails, int roomCount, int guestCount, int adultsCount, int childCount, String status,
				ArrayList<String> test_steps) throws InterruptedException, ParseException {
			
			
			
			
			//ArrayList<String> date = new ArrayList<>();
			int beforeRoomCount, beforeGuestCount, beforeAdultsCount, beforeChildCount;
			int afterRoomCount, afterGuestCount, afterAdultsCount, afterChildCount;
			reportLogger.info("Status: "+status);
			beforeRoomCount = Integer.parseInt(beforeGuestCountDetails.get(status).get(0).replaceAll(",", ""));
			beforeGuestCount = Integer.parseInt(beforeGuestCountDetails.get(status).get(1).replaceAll(",", ""));
			beforeAdultsCount = Integer.parseInt(beforeGuestCountDetails.get(status).get(2).replaceAll(",", ""));
			beforeChildCount = Integer.parseInt(beforeGuestCountDetails.get(status).get(3).replaceAll(",", ""));
			reportLogger.info("Before: "+beforeRoomCount+"  "+beforeGuestCount+"  "+beforeAdultsCount+" "+beforeChildCount);
			
			afterRoomCount = Integer.parseInt(afterGuestCountDetails.get(status).get(0).replaceAll(",", ""));
			afterGuestCount = Integer.parseInt(afterGuestCountDetails.get(status).get(1).replaceAll(",", ""));
			afterAdultsCount = Integer.parseInt(afterGuestCountDetails.get(status).get(2).replaceAll(",", ""));
			afterChildCount = Integer.parseInt(afterGuestCountDetails.get(status).get(3).replaceAll(",", ""));
			reportLogger.info("After: "+afterRoomCount+"  "+afterGuestCount+"  "+afterAdultsCount+" "+afterChildCount);
			//Double expValue = (Double.parseDouble(folioItemValues.get(ledgerAccounts.get(ledger))) * numberOfRooms);

			
			int actRoomCount = afterRoomCount - beforeRoomCount;
			reportLogger.info(roomCount+"roomCount"+actRoomCount+"actRoomCount");
				assertEquals(roomCount,actRoomCount,"Failed - Guest Count Statistics - "+status + " - Room Count validation. Expected: "+roomCount+" But found: "+actRoomCount);
				
				reportLogger.info("Guest Count Statistics - "+status + " - Room Count validated successfully");
				test_steps.add("Guest Count Statistics - "+status + " - Room Count validated successfully");
			
			
			int actGuestCount = afterGuestCount - beforeGuestCount;
		
				assertEquals(guestCount,actGuestCount,"Failed - Guest Count Statistics - "+status + " - Guest Count validation. Expected: "+guestCount+" But found: "+actGuestCount);
				
				reportLogger.info("Guest Count Statistics - "+status + " - Guest Count validated successfully");
				test_steps.add("Guest Count Statistics - "+status + " - Guest Count validated successfully");
			
			
			int actAdultsCount = afterAdultsCount - beforeAdultsCount;

				assertEquals(adultsCount,actAdultsCount,"Failed - Guest Count Statistics - "+status + " - Adults Count validation. Expected: "+adultsCount+" But found: "+actAdultsCount);
				
				reportLogger.info("Guest Count Statistics - "+status + " - Adults Count validated successfully");
				test_steps.add("Guest Count Statistics - "+status + " - Adults Count validated successfully");
			
			
			int actChildCount = afterChildCount - beforeChildCount;

				assertEquals(childCount,actChildCount,"Failed - Guest Count Statistics - "+status + " - Children Count validation. Expected: "+childCount+" But found: "+beforeChildCount);
				
				reportLogger.info("Guest Count Statistics - "+status + " - Children Count validated successfully");
				test_steps.add("Guest Count Statistics - "+status + " - Children Count validated successfully");
			
				
		}
		
		public void validateDailyFlashReportNetChangess_RV2(WebDriver driver, HashMap<String, ArrayList<String>> beforeNetChanges,
				HashMap<String, ArrayList<String>> afterNetChanges, String netChangesValue, HashMap<String, Double> folioBalances, int numberOfRooms, Double outBoundAmount,
				ArrayList<String> test_steps) throws InterruptedException, ParseException {

			Double selectedDateValue, monthToDateValue, yearToDateValue;
			Double beforeSelectedDate, beforeMonthToDate, beforeYearToDate;
			Double afterSelectedDate, afterMonthToDate, afterYearToDate;
			Double expValue = 0.00 ;
			
			reportLogger.info("Before: "+beforeNetChanges);
			reportLogger.info("After: "+afterNetChanges);
			
//			Double expCityLedger = folioBalances.get("Ending Balance");
//			Double expGuestLedger = folioBalances.get("Balance");
//			//Double expTrialBalance = ;
//			Double expAdvancedDeposit = folioBalances.get("Payments");
			
			switch (netChangesValue) {
			case "Net Change In City Ledger":
				expValue = folioBalances.get("Ending Balance");
				break;
				
			case "Net Change In Guest Ledger":
				if (numberOfRooms>1) {
					expValue = folioBalances.get("Balance") + (folioBalances.get("Total Charges")*(numberOfRooms-1));
					expValue = folioBalances.get("Balance");
				}else {
					expValue = folioBalances.get("Balance");
				}			
				break;
				
			case "Net Change In Advanced Deposits":
				expValue = folioBalances.get("Payments") - outBoundAmount;
				break;
				
			case "Trial Balance":
				
				break;

			default:
				break;
			}

//			try {
				
				beforeSelectedDate = Double.parseDouble(beforeNetChanges.get(netChangesValue).get(0).replaceAll(",", ""));
				beforeMonthToDate = Double.parseDouble(beforeNetChanges.get(netChangesValue).get(1).replaceAll(",", ""));
				beforeYearToDate = Double.parseDouble(beforeNetChanges.get(netChangesValue).get(2).replaceAll(",", ""));
				
				afterSelectedDate = Double.parseDouble(afterNetChanges.get(netChangesValue).get(0).replaceAll(",", ""));
				afterMonthToDate = Double.parseDouble(afterNetChanges.get(netChangesValue).get(1).replaceAll(",", ""));
				afterYearToDate = Double.parseDouble(afterNetChanges.get(netChangesValue).get(2).replaceAll(",", ""));
				
				reportLogger.info("beforeSelectedDate: "+beforeSelectedDate);
				reportLogger.info("beforeMonthToDate: "+beforeMonthToDate);
				reportLogger.info("beforeYearToDate: "+beforeYearToDate);
				reportLogger.info("afterSelectedDate: "+afterSelectedDate);
				reportLogger.info("afterMonthToDate: "+afterMonthToDate);
				reportLogger.info("afterYearToDate: "+afterYearToDate);
				expValue = Utility.getRoundOffValueAfterDecimal(expValue);
				selectedDateValue = (afterSelectedDate)-(beforeSelectedDate);
				selectedDateValue = Utility.getRoundOffValueAfterDecimal(selectedDateValue);
			
					assertEquals(selectedDateValue,expValue,"Failed - "+"Net Changes - "+netChangesValue+" amount validation for Selected date. Expected: "+expValue+" But found: "+selectedDateValue);
					reportLogger.info("Net Changes - "+netChangesValue+" amount validated successfully for Selected date");
					test_steps.add("Net Changes - "+netChangesValue+" amount validated successfully for Selected date");
				
				BigDecimal a = new BigDecimal(String.valueOf(afterMonthToDate));
				BigDecimal b = new BigDecimal(String.valueOf(beforeMonthToDate));

				BigDecimal c = a.subtract(b);
				monthToDateValue = c.doubleValue();
				//monthToDateValue = afterMonthToDate-beforeMonthToDate;
				
					assertEquals(monthToDateValue,expValue,"Failed - "+"Net Changes - "+netChangesValue+" amount validation for Month To date. Expected: "+expValue+" But found: "+monthToDateValue);
					reportLogger.info("Net Changes - "+netChangesValue+" amount validated successfully for Month To date");
					test_steps.add("Net Changes - "+netChangesValue+" amount validated successfully for Month To date");
				
				
				yearToDateValue = afterYearToDate-beforeYearToDate;
				yearToDateValue = Utility.getRoundOffValueAfterDecimal(yearToDateValue);
				
					assertEquals(yearToDateValue,expValue,"Failed - "+"Net Changes - "+netChangesValue+" amount validation for Year To date. Expected: "+expValue+" But found: "+yearToDateValue);
					
					reportLogger.info("Net Changes - "+netChangesValue+" amount validated successfully for Year To date");
					test_steps.add("Net Changes - "+netChangesValue+" amount validated successfully for Year To date");
				
//			}catch(Exception e) {
//				test_steps.add("AssertionError - "+e.toString());
//				reportLogger.info("AssertionError - "+e.toString());
//			}
		}		
		
	public List<String> verifyNetSalesSummaryViewDataClassWiseRowWiseAvgStay(WebDriver driver, String viewName,
			String reportName, String roomClass, int columnNO, String expectedValue, ArrayList<String> testSteps) {
		List<String> data = new ArrayList<String>();
		String path = "//h2[contains(text(),'" + viewName + " | " + reportName
				+ "')]/parent::div//following-sibling::div[1]//tr[contains(@class,'ant-table-row')]//td[contains(text(),'"
				+ roomClass + "')]//following-sibling::td[" + columnNO + "]";
		String actualValue = driver.findElement(By.xpath(path)).getText();
		actualValue = Utility.convertDecimalFormat(actualValue);
		Utility.verifyText(actualValue, expectedValue, viewName + " -- " + reportName + " -- " + columnNO, testSteps,
				reportLogger);
		return data;
	}
	
	public List<String>  verifyNetSalesDetailViewDataClassWiseRowWiseAvgStay(WebDriver driver, String roomClass,int tdcoumnNo,String expectedValue,ArrayList<String> testSteps) {
		 List<String> data = new ArrayList<String>();
		 String path="//div[contains(text(),'"+roomClass+"')]/../../../..//following-sibling::tbody/tr//td["+tdcoumnNo+"]";
		WebElement elements= driver.findElement(By.xpath(path));
			 String actualValue=elements.getText();
			 actualValue = Utility.convertDecimalFormat(actualValue);
			Utility.verifyText(actualValue, expectedValue,"-- "+roomClass , testSteps, reportLogger);			 
		return data;
	}
	

	public  String getTotalOfNetSalesSummaryViewDataRowWise(WebDriver driver, String viewName, String reportName,
			int column) throws InterruptedException {
		String data = null;
		String path = "//h2[contains(text(),'" + viewName + " | " + reportName
				+ "')]/parent::div//following-sibling::div[1]//td[1][text()='Total']//following-sibling::td[" + column
				+ "]";
		WebElement elements = driver.findElement(By.xpath(path));
		Utility.ScrollToViewElementINMiddle(driver, elements);
		 data=elements.getText();
		if (data.contains(",") && data.contains("$")) {
			data = data.replace("$", "").replace(",", "");
		} else if (data.contains("$")) {
			data = data.replace("$", "");
		} else if (data.contains("%")) {
			data = data.replace("%", "");
		}
		return data;
	}
	
	public List<String>  verifyNetSalesDetailViewAllDataClassWiseRowWise(WebDriver driver, String roomClass,int tdcoumnNo,String expectedValues,ArrayList<String> testSteps) {
		 List<String> data = new ArrayList<String>();
		 String path="//div[contains(text(),'"+roomClass+"')]/../../../..//following-sibling::tbody/tr//td["+tdcoumnNo+"]";
		 List<WebElement> elements= driver.findElements(By.xpath(path));		 
		 for(int i=0;i< elements.size();i++) {
			 String actualValue=elements.get(i).getText();
				if(actualValue.toString().contains(",") && actualValue.toString().contains("$")) {
					actualValue=Utility.convertDecimalFormat(actualValue.replace("$", "").replace(",", ""));
					}else if(actualValue.toString().contains("$")){
						actualValue=Utility.convertDecimalFormat(actualValue.replace("$", ""));}
					else if(actualValue.matches("^\\d+\\.\\d+") ){
						actualValue=Utility.convertDecimalFormat(actualValue);
					}else if(actualValue.toString().contains("%")) {
						actualValue=Utility.convertDecimalFormat(actualValue.replace("%", ""));
					}
				if(actualValue.equals(expectedValues)) {
					Utility.verifyText(actualValue, expectedValues,"-- "+roomClass , testSteps, reportLogger);	
				}
		 }
		return data;
	}

		
		public void verifPaymentMethodsInTransactionReport(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
			Elements_Reports report = new Elements_Reports(driver);
			/*
			Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.TransactionsReportHeader), driver);
			String xpath = OR_Reports.dateDropDown+"/../following-sibling::span";
			String dateRange = driver.findElement(By.xpath(xpath)).getText().trim();
			String startDate = report.dateStart.getAttribute("value");
			String endDate = report.dateEnd.getAttribute("value");
			String convertedDate = Utility.parseDate(checkInDate, "dd/MM/yyyy", "MMM dd, yyyy");

			compareValues(test_steps, dateRange, "Today", "default date range displayed");
			compareValues(test_steps, startDate, convertedDate, "default start date displayed");
			compareValues(test_steps, endDate, convertedDate, "default end date displayed");
			*/
			compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Credit Card"), true, "Credit Card");
			compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Capture"), true, "Capture");
			compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Refund"), true, "Refund");
			compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Cancel (Void)"), true, "Cancel (Void)");
			compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Decline"), true, "Decline");
			compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Failure"), true, "Failure");
			//compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Decline/Failure"), true, "Decline/Failure");
			compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Authorization"), true, "Authorization");
			compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Authorization Reversal"), true, "Authorization Reversal");
			compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Gift Certificate"), true, "Gift Certificate");
			compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Cash"), true, "Cash");
			compareValues(test_steps, verifyIncludedPaymentMethodIsSelected(driver, "Cash"), true, "Cash");

		}
		
		public void validateTransactionsReportDayDropDown(WebDriver driver, ArrayList<String> test_steps, 
				String dateRange, String timeZone, String dateFormat, String startDayOfWeek) {		
			Elements_Reports report = new Elements_Reports(driver);
			try {			
				selectDateRange(driver, dateRange, test_steps);
				String actualDateRange = report.dayCurrentSelected.getText();

				if (actualDateRange.equalsIgnoreCase(dateRange)) {
					reportLogger.info("<b>"+dateRange+"</b> is selected after after clicking on <b>"+dateRange+"</b> in date Dropdown");
					test_steps.add("<b>"+dateRange+"</b> is selected after after clicking on <b>"+dateRange+"</b>  in date Dropdown");
				} else {
					reportLogger.info("Failed, <b>"+dateRange+"</b> is not selected after clicking on <b>"+dateRange+"</b> in date Dropdown. Expected: <b>"+dateRange+"</b>, but Found: " + actualDateRange);
					test_steps.add("AssertionError - Failed, This Week is not selected after clicking on <b>"+dateRange+"</b> in date Dropdown. Expected: <b>"+dateRange+"</b>, but Found: "+ actualDateRange);
				}
				
				String actStartDate = getStartDate(driver, test_steps);
				String actEndDate = getEndDate(driver, test_steps);

				
				String expStartDate = null, expEndDate = null;
				
				if (dateRange.equalsIgnoreCase("Last Week")) {
					GregorianCalendar dayOfThisWeek = new GregorianCalendar();
					if (startDayOfWeek.equalsIgnoreCase("Monday")) {
						dayOfThisWeek.add(Calendar.DATE, -((dayOfThisWeek.get(Calendar.DAY_OF_WEEK) + 7 - Calendar.MONDAY) % 7));
					}else if (startDayOfWeek.equalsIgnoreCase("Sunday")) {
						dayOfThisWeek.add(Calendar.DATE, -((dayOfThisWeek.get(Calendar.DAY_OF_WEEK) + 7 - Calendar.SUNDAY) % 7));
					}
					dayOfThisWeek.add(Calendar.WEEK_OF_MONTH, -1);				
					expStartDate = new SimpleDateFormat(dateFormat).format(dayOfThisWeek.getTime());
					reportLogger.info("Expected Start date: "+expStartDate);
					dayOfThisWeek.add(Calendar.DAY_OF_WEEK, 6);
					expEndDate = new SimpleDateFormat(dateFormat).format(dayOfThisWeek.getTime());
					reportLogger.info("Expected End date: "+expEndDate);
				} else if (dateRange.equalsIgnoreCase("Last Month")) {
					SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy");
					Calendar cal = Calendar.getInstance();
					cal.add(Calendar.MONTH, -1);
					cal.set(Calendar.DATE, 1);
					Date firstDateOfPreviousMonth = cal.getTime();
					cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
					Date lastDateOfPreviousMonth = cal.getTime();
					expStartDate = sdf.format(firstDateOfPreviousMonth.getTime());
					expEndDate = sdf.format(lastDateOfPreviousMonth.getTime());
					reportLogger.info("Expected Start date: "+expStartDate);
					reportLogger.info("Expected End date: "+expEndDate);
				}
				

				
					assertEquals(actStartDate, expStartDate, "Failed - <b>"+dateRange+"</b> Date Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
					assertEquals(actEndDate, expEndDate, "Failed - <b>"+dateRange+"</b> Date Range. Expected- Start date: "+expStartDate+" , End date: "+expEndDate+" , But found: "+actStartDate+" , End date: "+actEndDate);
					reportLogger.info("Success - <b>"+dateRange+"</b> Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
					test_steps.add("Success - <b>"+dateRange+"</b> Date Range. Start date: "+actStartDate+" , End date: "+actEndDate);
				
			}catch(Exception e) {
				test_steps.add("AssertionError - Exception occured "+e.toString());
			}		
		}
		

		public void validateBreakOutDailyTotalsYesNoBtnInTransactionsReport(WebDriver driver, 
				ArrayList<String> test_steps) throws Exception {
			String yesBtn = "//b[text()='Break Out Daily Totals']/../../..//div[2]//span[text()='Yes']/preceding-sibling::span";
			String noBtn = "//b[text()='Break Out Daily Totals']/../../..//div[2]//span[text()='No']/preceding-sibling::span";
			
			WebElement YesBtnElement= driver.findElement(By.xpath(yesBtn));
			WebElement NOBtnElement= driver.findElement(By.xpath(noBtn));
			Utility.ScrollToElement(YesBtnElement, driver);
			Wait.waitForElementByXpath(driver, noBtn);
			driver.findElement(By.xpath(noBtn)).click();
			assertTrue(driver.findElement(By.xpath(noBtn)).isEnabled(), "Failed - <b>"+"Break Out Daily Totals No button is not clicked");
			reportLogger.info("Success - <b>"+"Break Out Daily Totals No button is clicked");

			test_steps.add("Success - <b>"+"Break Out Daily Totals No button is clicked");
			
			
			Wait.waitForElementByXpath(driver, yesBtn);
			driver.findElement(By.xpath(yesBtn)).click();
			assertTrue(driver.findElement(By.xpath(yesBtn)).isEnabled(), "Failed - <b>"+"Break Out Daily Totals Yes button is not clicked");
			reportLogger.info("Success - <b>"+"Break Out Daily Totals Yes button is clicked");

			test_steps.add("Success - <b>"+"Break Out Daily Totals Yes button is clicked");

		}
		public void excludeZeroBalancePaymentMethod(WebDriver driver, 
				ArrayList<String> test_steps,boolean isExcludeZeroPaymentMethod)
		{
			String excludeZeroBalance="//span[text()='Exclude Zero Balance Payment Methods']";
			Wait.waitForElementByXpath(driver, excludeZeroBalance);	
			driver.findElement(By.xpath(excludeZeroBalance)).click();
			if(isExcludeZeroPaymentMethod!=true)
			{
				String excludeZeroBal_NoBtn="//span[text()='Exclude Zero Balance Payment Methods']/../../../..//span[text()='No']/preceding-sibling::span";
				Wait.waitForElementByXpath(driver, excludeZeroBal_NoBtn);	
				driver.findElement(By.xpath(excludeZeroBal_NoBtn)).click();
				
			}
		}
		
		public HashMap<String, ArrayList<String>> getPaymentMethodSummaryViewTransactionReport(WebDriver driver, ArrayList<String> test_steps) {
			
			HashMap<String, ArrayList<String>> data = new HashMap<>();
			
			String strRows = "//h2[text()='Summary View | Transactions Report']/../following-sibling::div[1]//th/span[contains(text(),'Payment Method')]//ancestor::table//tbody/tr"; 
			
			List<WebElement> rows = driver.findElements(By.xpath(strRows));
			
			for (int i = 0; i < rows.size(); i++) {
				List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
				ArrayList<String> datesData = new ArrayList<>();
				for (int j = 1; j < cells.size(); j++) {
					
						datesData.add(cells.get(j).getText());
					
					
				}
				data.put(cells.get(0).getText(), datesData);
				reportLogger.info(data);
			}
			Set<String> keyValue=data.keySet();
			//int sizeOfPaymentMethod=keyValue.size();
			try {
				
				for (String temp:keyValue) {
					reportLogger.info(temp);
					
					if(temp.equals("Cash")|| temp.equals("Gift Certificate")|| temp.equals("Visa")|| temp.equals("Check")|| temp.equals("MC")||temp.equals("Amex")||temp.equals("Discover") )
					{
						assertTrue(true, temp+"Failed to verify");
						test_steps.add("Success - <b>"+temp+"  verify");
						if(data.get(temp).contains("$0.00"))
						{
							assertTrue(true, "Zero balance payment method Failed to verify");
							test_steps.add("Zero balance payment method is verify");	
						}
						else
						{
							continue;
						}
					}
					
				}
				
			}catch(Exception e) {
				reportLogger.info(e.toString());
			}
			
			return data;		
		}
		public void compareTransactionReportSummaryView_RV2(ArrayList<String> test_steps, HashMap<String, String> before, HashMap<String, String> after,
				HashMap<String, Double> reduceOrIncreaseCount,String paymentType) throws InterruptedException {
			
			if(paymentType.equalsIgnoreCase("MC")||paymentType.equalsIgnoreCase("Visa")||paymentType.equalsIgnoreCase("Discover"))
			{
			compareSingleValue(test_steps, "Credit Card", before.get("Credit Card"), after.get("Credit Card"),
					reduceOrIncreaseCount.get("Credit Card"));
			}else if(paymentType.equalsIgnoreCase("Check"))
			{
			compareSingleValue(test_steps, "Check", before.get("Check"), after.get("Check"),
					reduceOrIncreaseCount.get("Check"));
			}else if(paymentType.equalsIgnoreCase("Cash"))
			{
			
			compareSingleValue(test_steps, "Cash", before.get("Cash"), after.get("Cash"),
					reduceOrIncreaseCount.get("Cash"));
			}
			else if(paymentType.equalsIgnoreCase("Gift Certificate"))
			{
			
			compareSingleValue(test_steps, "Gift Certificate", before.get("Gift Certificate"), after.get("Gift Certificate"),
					reduceOrIncreaseCount.get("Gift Certificate"));
			}
			compareSingleValue(test_steps, "Total", before.get("Total"), after.get("Total"),
					reduceOrIncreaseCount.get("Total"));		
		}
		
		public void validateReservationAddedToDetailedViewForTransactionReport_RV2(WebDriver driver, ArrayList<String> test_steps,
				String checkInDate, String guestName, String resNo, String paymentType, String transactionType, 
				String cardNum, String cardHolderName, String amount) throws InterruptedException {	
			if (paymentType.equalsIgnoreCase("MC")||paymentType.equalsIgnoreCase("Visa")||paymentType.equalsIgnoreCase("Discover")) {
				paymentType = "Credit Card";
			}
			String guestNameDisplayed, resNoDisplayed, paymentTypeDisplayed, amountDisplayed, transactionTypeDisplayed = null, 
			cardNumDisplayed = null, cardHolderNameDisplayed = null;

			boolean resFound = false;
			String convertedDate = Utility.parseDate(checkInDate, "dd/MM/yyyy", "MMM dd, yyyy");		
			int size = driver.findElements(By.xpath("//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr")).size();
			
			for (int i = 1; i <= size; i++) {
				
				guestNameDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[1]")).getText();
				
				resNoDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[2]")).getText();

				paymentTypeDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[4]")).getText();

				amountDisplayed = Utility.removeBracketsAndMinusSign(driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[10]")).getText())
						.replace(",", "");

				if (paymentType.equalsIgnoreCase("Credit Card")) {
					transactionTypeDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[6]")).getText();

					cardNumDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[7]")).getText();

					cardHolderNameDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[9]")).getText();
				}
				if (guestNameDisplayed.equalsIgnoreCase(guestName) && resNoDisplayed.equalsIgnoreCase(resNo)) {
					assertEquals(guestNameDisplayed, guestName, "Failed to validate guest name");
					test_steps.add("Successfully verified <b>"+guestNameDisplayed+"</b> with reservation number <b>"
							+resNoDisplayed+"</b> in transaction report detailed view");
					reportLogger.info("Successfully verified <b>"+guestNameDisplayed+"</b> with reservation number <b>"
							+resNoDisplayed+"</b> in transaction report detailed view");
					try {
						assertEquals(paymentTypeDisplayed, paymentType, "Failed to validate payment type");
						test_steps.add("Successfully verified payment type as <b>"+paymentTypeDisplayed+"</b>");
						reportLogger.info("Successfully verified payment type as <b>"+paymentTypeDisplayed+"</b>");			
					} catch (Exception e) {
						test_steps.add(e.toString());
					} catch (Error e) {
						test_steps.add(e.toString());
					}
					try {
						assertEquals(amountDisplayed, amount, "Failed to validate amount");
						test_steps.add("Successfully verified amount as <b>"+amountDisplayed+"</b>");
						reportLogger.info("Successfully verified amount as <b>"+amountDisplayed+"</b>");
					} catch (Exception e) {
						test_steps.add(e.toString());
					} catch (Error e) {
						test_steps.add(e.toString());
					}

					if (paymentType.equalsIgnoreCase("Credit Card") || paymentType.equalsIgnoreCase("MC")||paymentType.equalsIgnoreCase("Visa")||paymentType.equalsIgnoreCase("Discover")) {
						if (cardNum.equalsIgnoreCase("5454545454545454")) {
							cardNum = "MC (5454)";						
						}else if (cardNum.equalsIgnoreCase("4003000123456781")) {
							cardNum = "Visa (6781)";
						
						}
						try {
							assertEquals(transactionTypeDisplayed, transactionType, "Failed to validate transaction type");
							test_steps.add("Successfully verified transaction type as <b>"+transactionTypeDisplayed+"</b>");
							reportLogger.info("Successfully verified transaction type as <b>"+transactionTypeDisplayed+"</b>");						
						} catch (Exception e) {
							test_steps.add(e.toString());
						} catch (Error e) {
							test_steps.add(e.toString());
						}
						try {
							assertEquals(cardNumDisplayed, cardNum, "Failed to validate Credit card last four digits");
							test_steps.add("Successfully verified Credit card last four digits as <b>"+cardNumDisplayed+"</b>");
							reportLogger.info("Successfully verified Credit card last four digits as <b>"+cardNumDisplayed+"</b>");						
						} catch (Exception e) {
							test_steps.add(e.toString());
						} catch (Error e) {
							test_steps.add(e.toString());
						}
						try {
							assertEquals(cardHolderNameDisplayed, cardHolderName, "Failed to validate card holder name");
							test_steps.add("Successfully verified card holder name as <b>"+cardHolderNameDisplayed+"</b>");
							reportLogger.info("Successfully verified card holder name as <b>"+cardHolderNameDisplayed+"</b>");						
						} catch (Exception e) {
							test_steps.add(e.toString());
						} catch (Error e) {
							test_steps.add(e.toString());
						}
					}
					resFound = true;
					break;
				}
			}
			assertEquals(resFound, true, "failed to found record in transaction detailed view report");
		}
		
		public boolean verifyCorporateAccountDataExistOrNot(WebDriver driver,String viewName, String reportName, String accountName) {
			boolean isExist=false;
			String path= "//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td[1]";
			 List<WebElement> elements= driver.findElements(By.xpath(path));
			 for(WebElement str: elements) {
				 if(str.getText().equalsIgnoreCase(accountName)) {
					 isExist=true;
				 }				 
			 }
			return isExist;
			
		}
		
		public void verifyCorporateAccountNetSalesReportSummaryView(WebDriver driver, String viewName, String reportName, int columnNo, String expectedValue,ArrayList<String> testSteps) {
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td["+columnNo+"]";
			 List<WebElement> elements= driver.findElements(By.xpath(path));
			 for(WebElement str: elements) {
				 if(str.getText().equalsIgnoreCase(expectedValue)) {
					 Utility.verifyText(str.getText(),expectedValue, viewName+" -- "+reportName +" -- " + columnNo , testSteps, reportLogger);
				 }				 
			 }
			
		}
		
		public List<String>  getNetSalesReportSummaryViewCorporateAccountData(WebDriver driver, String viewName, String reportName, String accountName, int columnNo) {
			 List<String> data = new ArrayList<String>();
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td[1]/a[text()='"+accountName+"']/parent::td//following-sibling::td["+columnNo+"]";
			List<WebElement> elements= driver.findElements(By.xpath(path));
			 for(WebElement str : elements) {
				 String fieldData=str.getText();
				 if(fieldData.contains(",") && fieldData.toString().contains("$")) {
					 fieldData=fieldData.replace("$", "").replace(",", "");
					}else if(fieldData.contains("$")){
						fieldData=fieldData.replace("$", ""); }
					else if(fieldData.contains("%")) {
						fieldData=fieldData.replace("%", "");	
					}
				 data.add(fieldData);
			 }
			return data;
		}
		
		public HashMap<String, String>  getNetSalesSummaryViewDataCorporateAccountWise(WebDriver driver, String viewName, String reportName, String accountName) {
			HashMap<String, String>  data = new HashMap<String, String> ();
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//div[contains(text(),'"+accountName+"')]/../../..//parent::thead//following-sibling::tbody//td";
			List<WebElement> elements= driver.findElements(By.xpath(path));
				 data.put("Net Res",elements.get(1).getText());
				 data.put("Net Room Nights",elements.get(2).getText());
				 if(elements.get(4).getText().toString().contains(",") && elements.get(4).getText().toString().contains("$")) {
						 data.put("Room Revenue",elements.get(4).getText().replace("$", "").replace(",", ""));
						}else if(elements.get(4).getText().toString().contains("$")){
							data.put("Room Revenue",elements.get(4).getText().replace("$", ""));}				 
				 if(elements.get(5).getText().toString().contains(",") && elements.get(5).getText().toString().contains("$")) {
					 data.put("Other Revenue",elements.get(5).getText().replace("$", "").replace(",", ""));
					}else if(elements.get(5).getText().toString().contains("$")){
						data.put("Other Revenue",elements.get(5).getText().replace("$", ""));}			 
				return data;
		}
		
		
		public void verifyCorporateAccountDataNetSalesReportSummaryView(WebDriver driver, String viewName, String reportName, String accountName,int columnNo, String expectedValue,ArrayList<String> testSteps) {
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td[1]/a[text()='"+accountName+"']/parent::td//following-sibling::td["+columnNo+"]";
			WebElement elements= driver.findElement(By.xpath(path));
			String actualValue=elements.getText();
			if(actualValue.toString().contains(",") && actualValue.toString().contains("$")) {
				actualValue=Utility.convertDecimalFormat(actualValue.replace("$", "").replace(",", ""));
				}else if(actualValue.toString().contains("$")){
					actualValue=Utility.convertDecimalFormat(actualValue.replace("$", ""));}
				else if(actualValue.matches("^\\d+\\.\\d+") ){
					actualValue=Utility.convertDecimalFormat(actualValue);
				}else if(actualValue.toString().contains("%")) {
					actualValue=Utility.convertDecimalFormat(actualValue.replace("%", ""));
				}
			Utility.verifyText(actualValue, expectedValue, viewName+" -- "+reportName +" -- " + columnNo , testSteps, reportLogger);
			
		}
		
		public void verifyCorporateAccountDataNetSalesReportDetailView(WebDriver driver, String accountName,int columnNo, String expectedValue,ArrayList<String> testSteps) {
			String path="//div[contains(text(),'"+accountName+"')]/../../../..//following-sibling::tbody/tr//td["+columnNo+"]";
			WebElement elements= driver.findElement(By.xpath(path));
			String actualValue=elements.getText();
			if(actualValue.toString().contains(",") && actualValue.toString().contains("$")) {
				actualValue=Utility.convertDecimalFormat(actualValue.replace("$", "").replace(",", ""));
				}else if(actualValue.toString().contains("$")){
					actualValue=Utility.convertDecimalFormat(actualValue.replace("$", ""));}
				else if(actualValue.matches("^\\d+\\.\\d+") ){
					actualValue=Utility.convertDecimalFormat(actualValue);
				}else if(actualValue.toString().contains("%")) {
					actualValue=Utility.convertDecimalFormat(actualValue.replace("%", ""));
				}
			Utility.verifyText(actualValue, expectedValue," --- "+ columnNo , testSteps, reportLogger);
			
		}
		
		
		public List<String> verifyNetSalesSummaryViewDataCorporateAvgStay(WebDriver driver, String viewName,
				String reportName, String accountName, int columnNO, String expectedValue, ArrayList<String> testSteps) {
			List<String> data = new ArrayList<String>();
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td[1]/a[text()='"+accountName+"']/parent::td//following-sibling::td["+columnNO+"]";
			String actualValue = driver.findElement(By.xpath(path)).getText();
			actualValue = Utility.convertDecimalFormat(actualValue);
			Utility.verifyText(actualValue, expectedValue, viewName + " -- " + reportName + " -- " + columnNO, testSteps,
					reportLogger);
			return data;
		}
		
		public List<String>  verifyNetSalesDetailViewDataCorporateAccountAvgStay(WebDriver driver, String accountName,int tdcoumnNo,String expectedValue,ArrayList<String> testSteps) {
			 List<String> data = new ArrayList<String>();
				String path="//div[contains(text(),'"+accountName+"')]/../../../..//following-sibling::tbody/tr//td["+tdcoumnNo+"]";
				WebElement elements= driver.findElement(By.xpath(path));
				 String actualValue=elements.getText();
				 actualValue = Utility.convertDecimalFormat(actualValue);
				Utility.verifyText(actualValue, expectedValue,"-- "+accountName , testSteps, reportLogger);			 
			return data;
		}

		
		
		public HashMap<String, ArrayList<String>> getCreditCardTypeDetailofTransectionReport(WebDriver driver, ArrayList<String> test_steps) {
			
			HashMap<String, ArrayList<String>> data = new HashMap<>();
			
			String strRows = "//span[text()='Credit Card Type']/../../../../tbody/tr"; 
			
			List<WebElement> rows = driver.findElements(By.xpath(strRows));
			
			for (int i = 0; i < rows.size(); i++) {
				List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
				ArrayList<String> datesData = new ArrayList<>();
				for (int j = 1; j < cells.size(); j++) {
					
						datesData.add(cells.get(j).getText().substring(1));
					
					
				}
				data.put(cells.get(0).getText(), datesData);
				reportLogger.info(data);
			}
			try {
		
					List<WebElement> cells = driver.findElements(By.xpath("//span[text()='Credit Card Type']/../../../../tfoot/tr/td"));
					ArrayList<String> datesData = new ArrayList<>();
					for (int j = 1; j < cells.size(); j++) {
						datesData.add(cells.get(j).getText().substring(1));
					}
					data.put(cells.get(0).getText(), datesData);
					reportLogger.info(data);
			}catch(Exception e) {
				reportLogger.info(e.toString());
			}
			
			return data;		
		}
		
		public void validateCreditCardTypeDetailofTransectionReport_RV2(WebDriver driver, String PaymentMethod, HashMap<String, ArrayList<String>> beforePaymentDetails,
				HashMap<String, ArrayList<String>> afterPaymentDetails, 
				HashMap<String, Double>  creditcardPaymentAmount,
				ArrayList<String> test_steps) throws InterruptedException, ParseException {

			
			Double beforeCapturePaymentTotal, beforeCapturePaymentNetTotal;
			Double afterCapturePaymentTotal,  afterCapturePaymentNetTotal;
			Double expValue =creditcardPaymentAmount.get(PaymentMethod);
			
			reportLogger.info("Before: "+beforePaymentDetails);
			reportLogger.info("After: "+afterPaymentDetails);
			
			if (PaymentMethod.equalsIgnoreCase("MC")) {
				beforeCapturePaymentTotal = Double.parseDouble(beforePaymentDetails.get("MC").get(0).replaceAll(",", ""));
				
				beforeCapturePaymentNetTotal = Double.parseDouble(beforePaymentDetails.get("MC").get(2).replaceAll(",", ""));
				
				afterCapturePaymentTotal = Double.parseDouble(afterPaymentDetails.get("MC").get(0).replaceAll(",", ""));
				
				afterCapturePaymentNetTotal = Double.parseDouble(afterPaymentDetails.get("MC").get(2).replaceAll(",", ""));
			}else if(PaymentMethod.equalsIgnoreCase("Discover")) {
				beforeCapturePaymentTotal = Double.parseDouble(beforePaymentDetails.get("Discover").get(0).replaceAll(",", ""));
			
				beforeCapturePaymentNetTotal = Double.parseDouble(beforePaymentDetails.get("Discover").get(2).replaceAll(",", ""));
				
				afterCapturePaymentTotal = Double.parseDouble(afterPaymentDetails.get("Discover").get(0).replaceAll(",", ""));
			
				afterCapturePaymentNetTotal = Double.parseDouble(afterPaymentDetails.get("Discover").get(2).replaceAll(",", ""));
			}else if( PaymentMethod.equalsIgnoreCase("Visa")) {
				beforeCapturePaymentTotal = Double.parseDouble(beforePaymentDetails.get("Visa").get(0).replaceAll(",", ""));
			
				beforeCapturePaymentNetTotal = Double.parseDouble(beforePaymentDetails.get("Visa").get(2).replaceAll(",", ""));
				
				afterCapturePaymentTotal = Double.parseDouble(afterPaymentDetails.get("Visa").get(0).replaceAll(",", ""));
				
				afterCapturePaymentNetTotal = Double.parseDouble(afterPaymentDetails.get("Visa").get(2).replaceAll(",", ""));
			}else {
				beforeCapturePaymentTotal = Double.parseDouble(beforePaymentDetails.get("Other Payment Methods").get(0).replaceAll(",", ""));
			
				beforeCapturePaymentNetTotal = Double.parseDouble(beforePaymentDetails.get("Other Payment Methods").get(2).replaceAll(",", ""));
				
				afterCapturePaymentTotal = Double.parseDouble(afterPaymentDetails.get("Other Payment Methods").get(0).replaceAll(",", ""));
			
				afterCapturePaymentNetTotal = Double.parseDouble(afterPaymentDetails.get("Other Payment Methods").get(2).replaceAll(",", ""));
			}
			
			reportLogger.info("beforeCapturePaymentTotal: "+beforeCapturePaymentTotal);
			
			reportLogger.info("beforeCapturePaymentNetTotal: "+beforeCapturePaymentNetTotal);
			reportLogger.info("afterCapturePaymentTotal: "+afterCapturePaymentTotal);
		
			reportLogger.info("afterCapturePaymentNetTotal: "+afterCapturePaymentNetTotal);
			
			Double actualCapturedValue = Utility.getRoundOffValueAfterDecimal(afterCapturePaymentTotal-beforeCapturePaymentTotal);
			
				assertEquals(actualCapturedValue,expValue,"Failed - "+"Payments Method Type - "+PaymentMethod + " amount validation. Expected: "+expValue+" But found: "+actualCapturedValue);
				reportLogger.info("Payments Method Type - "+PaymentMethod + " amount validated successfully ");
				test_steps.add("Payments Method Type - "+PaymentMethod + " amount validated successfully ");
			
			
			
			
			Double actualNetCapturedValue = Utility.getRoundOffValueAfterDecimal(afterCapturePaymentNetTotal-beforeCapturePaymentNetTotal);
		
				assertEquals(actualNetCapturedValue,expValue,"Failed - "+"Payments Method Type - "+PaymentMethod + " amount validation . Expected: "+expValue+" But found: "+actualNetCapturedValue);
				reportLogger.info("Payments Method Type - "+PaymentMethod + " amount validated successfully ");
				test_steps.add("Payments Method Type - "+PaymentMethod + " amount validated successfully ");
			

			try {

				
				
				reportLogger.info("Before: "+beforePaymentDetails);
				reportLogger.info("After: "+afterPaymentDetails);
				
				beforeCapturePaymentTotal = Double.parseDouble(beforePaymentDetails.get("Credit Card Total").get(0).replaceAll(",", ""));
			
				beforeCapturePaymentNetTotal = Double.parseDouble(beforePaymentDetails.get("Credit Card Total").get(2).replaceAll(",", ""));
				
				afterCapturePaymentTotal = Double.parseDouble(afterPaymentDetails.get("Credit Card Total").get(0).replaceAll(",", ""));
		
				afterCapturePaymentNetTotal = Double.parseDouble(afterPaymentDetails.get("Credit Card Total").get(2).replaceAll(",", ""));
				
				reportLogger.info("beforeCapturePaymentTotal: "+beforeCapturePaymentTotal);
			
				reportLogger.info("beforeCapturePaymentNetTotal: "+beforeCapturePaymentNetTotal);
				reportLogger.info("afterCapturePaymentTotal: "+afterCapturePaymentTotal);
			
				reportLogger.info("afterCapturePaymentNetTotal: "+afterCapturePaymentNetTotal);
				
				actualCapturedValue = Utility.getRoundOffValueAfterDecimal(afterCapturePaymentTotal-beforeCapturePaymentTotal);
			
					assertEquals(actualCapturedValue,expValue,"Failed - "+"Payments Method Type - Payments Method Types Totals amount validation . Expected: "+expValue+" But found: "+actualCapturedValue);
					reportLogger.info("Payments Method Type - Payments Method Types Totals amount validated successfully ");
					test_steps.add("Payments Method Type - Payments Method Types Totals amount validated successfully ");
				
				
					actualNetCapturedValue = Utility.getRoundOffValueAfterDecimal(afterCapturePaymentNetTotal-beforeCapturePaymentNetTotal);
				
					assertEquals(actualNetCapturedValue,expValue,"Failed - "+"Payments Method Type - Payments Method Types Totals amount validation . Expected: "+expValue+" But found: "+actualNetCapturedValue);

					reportLogger.info("Payments Method Type - Payments Method Types Totals amount validated successfully ");
					test_steps.add("Payments Method Type - Payments Method Types Totals amount validated successfully ");
				
			}catch(Exception e) {
				test_steps.add("AssertionError - "+e.toString());
				reportLogger.info("AssertionError - "+e.toString());
			}
		}
		
public HashMap<String, String> getCreditCardTransactionTypeInTransectionReport(WebDriver driver, ArrayList<String> test_steps) {
			
			
			
			Elements_Reports elements = new Elements_Reports(driver);
			HashMap<String, String> data = new HashMap<>();		
			try {
				data.put("Capture", elements.summaryCreditCardCaptureAmount.getText());			
			} catch (Exception e) {
				data.put("Capture", "0.00");			
				test_steps.add("Cash payment is displayed empty in summary view report");
				reportLogger.info("Cash payment is displayed empty in summary view report");
			}
			
			try {
				data.put("Authorization", elements.summaryCreditCardAuthorizedAmount.getText());			
			} catch (Exception e) {
				data.put("Authorization", "0.00");			
				test_steps.add("Cash payment is displayed empty in summary view report");
				reportLogger.info("Cash payment is displayed empty in summary view report");
			}
			
			try {
				data.put("Refund", elements.summaryCreditCardRefundAmount.getText());			
			} catch (Exception e) {
				data.put("Refund", "0.00");			
				test_steps.add("Cash payment is displayed empty in summary view report");
				reportLogger.info("Cash payment is displayed empty in summary view report");
			}
			
			return data;		
		}
		
public void validateCreditCardTransactionTypeDetailInTransectionReport_RV2(WebDriver driver, String transactionType, HashMap<String,String> beforeCreditCardTransactionTypeTotal,
		HashMap<String, String> afterCreditCardTransactionTypeTotal, 
		HashMap<String, String>  paymentTransactionTypeAndAmount,
		ArrayList<String> test_steps) throws InterruptedException, ParseException {


	Double  beforeCreditCardTotal;
	Double afterCreditCardTotal;
	Double expValue =(Double.parseDouble(Utility.convertDollarToNormalAmount(driver,paymentTransactionTypeAndAmount.get(transactionType))));
	
	reportLogger.info("beforeCreditCardTransactionTypeTotal: "+beforeCreditCardTransactionTypeTotal);
	reportLogger.info("afterCreditCardTransactionTypeTotalAfter: "+afterCreditCardTransactionTypeTotal);
	
	if (transactionType.equalsIgnoreCase("Capture")) {
		
		beforeCreditCardTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(beforeCreditCardTransactionTypeTotal.get("Capture").replaceAll(",", "")));
		
		
		afterCreditCardTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(afterCreditCardTransactionTypeTotal.get("Capture").replaceAll(",", "")));
	}else if(transactionType.equalsIgnoreCase("Authorization Only")) {
		
		beforeCreditCardTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(beforeCreditCardTransactionTypeTotal.get("Authorization").replaceAll(",", "")));
		
	
		afterCreditCardTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(afterCreditCardTransactionTypeTotal.get("Authorization").replaceAll(",", "")));
	}else if(transactionType.equalsIgnoreCase("Refund")) {
		
		beforeCreditCardTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(beforeCreditCardTransactionTypeTotal.get("Refund").replaceAll(",", "")));
		
		
		afterCreditCardTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(afterCreditCardTransactionTypeTotal.get("Refund").replaceAll(",", "")));
	}else {
		
		beforeCreditCardTotal = Double.parseDouble(beforeCreditCardTransactionTypeTotal.get("Other Payment Methods").replaceAll(",", ""));
		
		afterCreditCardTotal = Double.parseDouble(afterCreditCardTransactionTypeTotal.get("Other Payment Methods").replaceAll(",", ""));
	}
	
	
	
	reportLogger.info("beforeCreditCardTotal: "+beforeCreditCardTotal);
	reportLogger.info("afterYearToDate: "+afterCreditCardTotal);
	
	Double transactionTypeTotalValue = Utility.getRoundOffValueAfterDecimal(afterCreditCardTotal-beforeCreditCardTotal);
	reportLogger.info("transactionTypeTotalValue: "+transactionTypeTotalValue+"expValue"+expValue);

		assertEquals(transactionTypeTotalValue,expValue,"Failed - "+"Payments Method Type - "+transactionType + " amount validation. Expected: "+expValue+" But found: "+transactionTypeTotalValue);
		reportLogger.info("Payments Method Type - "+transactionType + " amount validated successfully");
		test_steps.add("Payments Method Type - "+transactionType + " amount validated successfully ");
	
	
	
	
	
	
}



		public void navigateToReservationHistoryReport(WebDriver driver,ArrayList<String> testSteps) throws InterruptedException {
			Elements_Reports res = new Elements_Reports(driver);
			Utility.ScrollToElement(res.reservationHistoryReport, driver);
			res.reservationHistoryReport.click();
			Utility.switchTab(driver, 1);
			Wait.WaitForElement(driver, OR_Reports.ReservationHistoryReportHeader);
			testSteps.add("Navigated to Reservation History reports page");
			reportLogger.info("Navigated to Reservation History reports page");
		}
		
		public void clickAdvancedInputExpandAllOfReservationHistoryReport(WebDriver driver,ArrayList<String> testSteps) throws InterruptedException {
			Elements_Reports res = new Elements_Reports(driver);
			Wait.WaitForElement(driver, OR_Reports.reservationHistoryAdvancedInputsExpandAll);
			Utility.ScrollToViewElementINMiddle(driver,res.reservationHistoryReportAdvancedInputExpandAll);
			res.reservationHistoryReportAdvancedInputExpandAll.click();
			testSteps.add("Click to Expand All link");
			reportLogger.info("Click to Expand All link");
		}
		
		public void OnOROfShiftTimeToggleOfReservationHistoryReport(WebDriver driver,ArrayList<String> testSteps, boolean onOROff) throws InterruptedException {
			Elements_Reports res = new Elements_Reports(driver);
			Wait.WaitForElement(driver, OR_Reports.reservationHistoryShiftTimeToggle);
			Utility.ScrollToViewElementINMiddle(driver,res.reservationHistoryShiftTimeToggle);
			if(onOROff) {
				if(!Boolean.parseBoolean(Utility.getAttribtue(res.reservationHistoryShiftTimeToggle, "aria-checked"))) {
					res.reservationHistoryShiftTimeToggle.click();				
				}
				testSteps.add("Shift Time Toggle ON");
				reportLogger.info("Shift Time Toggle ON");
			}else {
				if(Boolean.parseBoolean(Utility.getAttribtue(res.reservationHistoryShiftTimeToggle, "aria-checked"))) {
					res.reservationHistoryShiftTimeToggle.click();					
				}
				testSteps.add("Shift Time Toggle OFF");
				reportLogger.info("Shift Time Toggle OFF");
			}
			
			
		}				
		public void verifyMainHeaderOfReservationHistory(WebDriver driver,ArrayList<String> testSteps, int index, String expectedValue) {			
			String path="(//p[@class='FilterHeader_valueText_hFFyV'])["+index+"]";
			WebElement element= driver.findElement(By.xpath(path));
			Utility.verifyEquals(element.getText(), expectedValue, testSteps);
			testSteps.add("Verified: "+ element.getText());
			reportLogger.info("Verified: "+ element.getText());
			
		}
		
		public ArrayList<String> getShiftTimeOfReservationHistory(WebDriver driver) {
			Elements_Reports report = new Elements_Reports(driver);
			 ArrayList<String> dateTime= new  ArrayList<String>();
			 Wait.WaitForElement(driver, OR_Reports.reservationHistorygetShiftTime);
			 for(WebElement str: report.reservationHistorygetShiftTime) {
				 dateTime.add(Utility.getAttribtue(str, "title"));
			 }
			 reportLogger.info("data: "+ dateTime);
			return dateTime;			 
		}
		
		public String getIncludeDataFormOfReservationHistory(WebDriver driver) {
			Elements_Reports report = new Elements_Reports(driver);			 
			 Wait.WaitForElement(driver, OR_Reports.reservationHistoryIncludeDataFrom);
			 String includeDataForm=Utility.getAttribtue(report.reservationHistoryIncludeDataFrom, "title");
			 reportLogger.info("data: "+ includeDataForm);
			return includeDataForm;			 
		}
		
		public void verifyReservationHistorySortReportByOption(WebDriver driver,ArrayList<String> test_steps) throws InterruptedException {
			Elements_Reports report = new Elements_Reports(driver);
			Utility.ScrollToViewElementINMiddle(driver, report.SortReportByOptionsExpand);
			try {			
			report.SortReportByOptionsExpand.click();}
			catch(Exception e) {
			Utility.clickThroughAction(driver, report.SortReportByOptionsExpand);
			}
			
			
			test_steps.add("Click Sort Report By drop down box");
			reportLogger.info("Click Sort Report By drop down box");
			String guestName= "//div[@class='ant-select-item-option-content' and text()='Guest Name']";
			assertTrue(driver.findElement(By.xpath(guestName)).isEnabled(), "Failed to verify Guest Name Option");
			reportLogger.info("Verify Guest Name Option");
			test_steps.add("Verify Guest Name Option");
			String resNumber= "//div[@class='ant-select-item-option-content' and text()='Reservation Number']";
			assertTrue(driver.findElement(By.xpath(resNumber)).isEnabled(), "Failed to verify Reservation Number Option");
			reportLogger.info("Verify Reservation Number Option");
			test_steps.add("Verify Reservation Number Option");	
			String changeCat= "//div[@class='ant-select-item-option-content' and text()='Change Category']";
			assertTrue(driver.findElement(By.xpath(changeCat)).isEnabled(), "Failed to verify Change Category Option");
			reportLogger.info("Verify Change Category Option");
			test_steps.add("Verify Change CategoryOption");	
			String dateTime= "//div[@class='ant-select-item-option-content' and text()='Date and Time']";
			assertTrue(driver.findElement(By.xpath(dateTime)).isEnabled(), "Failed to verify Date and Time Option");
			reportLogger.info("Verify Date and Time Option");
			test_steps.add("Verify Date and Time Option");	
			String user= "//div[@class='ant-select-item-option-content' and text()='User']";
			assertTrue(driver.findElement(By.xpath(user)).isEnabled(), "Failed to verify User Option");
			reportLogger.info("Verify User Option");
			test_steps.add("Verify User Option");					
			Utility.ScrollToViewElementINMiddle(driver, report.SortReportByOptionsExpand);
			try {			
			report.SortReportByOptionsExpand.click();}
			catch(Exception e) {
			Utility.clickThroughAction(driver, report.SortReportByOptionsExpand);
			}			
			test_steps.add("Click Sort Report By drop down box");
			reportLogger.info("Click Sort Report By drop down box");
		}
		
		public void verifyReservationHistoryUserOption(WebDriver driver,ArrayList<String> test_steps, String clientName) throws InterruptedException {
			Elements_Reports report = new Elements_Reports(driver);
			Utility.ScrollToViewElementINMiddle(driver, report.reservationHistoryIncludeDataFromUser);
			try {			
			report.reservationHistoryIncludeDataFromUser.click();}
			catch(Exception e) {
			Utility.clickThroughAction(driver, report.reservationHistoryIncludeDataFromUser);
			}
			test_steps.add("Click User drop down box");
			reportLogger.info("Click User drop down box");
			String allUser= "//div[@class='ant-select-item-option-content' and text()='All Users']";
			assertTrue(driver.findElement(By.xpath(allUser)).isEnabled(), "Failed to verify All Users Option");
			reportLogger.info("Verify All Users Option");
			test_steps.add("Verify All Users Option");
			String clientname= "//div[@class='ant-select-item-option-content' and text()='"+clientName+"']";
			assertTrue(driver.findElement(By.xpath(clientname)).isEnabled(), "Failed to verify "+clientName+" Option");
			reportLogger.info("Verify "+clientName+" Option");
			test_steps.add("Verify "+clientName+" Option");
			
			try {			
				report.reservationHistoryIncludeDataFromUser.click();}
				catch(Exception e) {
				Utility.clickThroughAction(driver, report.reservationHistoryIncludeDataFromUser);
				}
		}
		
		public int clickOnRunReportUntill(WebDriver driver) {
			Elements_Reports res = new Elements_Reports(driver);
			int count=1;
			try {
				
				reportLogger.info("in try");
				while (count <= 5) {
					clickOnRunReport(driver);
					reportLogger.info(count);
					if (!res.noDataAvailable.isDisplayed()) {
						break;
					}
					count = count + 1;
					Wait.wait3Second();
				}
			} catch (Exception e) {
				reportLogger.info(count);
			}
			return count;
			}

public HashMap<String, ArrayList<String>> getCreditCardTypeDetailofTransectionReport2(WebDriver driver, ArrayList<String> test_steps) {
			
			HashMap<String, ArrayList<String>> data = new HashMap<>();
			
					
				ArrayList<String> datesData = new ArrayList<>();
				for (int j = 1; j <=2; j++) {
					
						datesData.add("0.00");
					
					
				}
				data.put("Capture", datesData);
				data.put("Authorization", datesData);
				data.put("Refund", datesData);
				data.put("Cancel", datesData);
				data.put("Authorization Reversal", datesData);
				data.put("Failed", datesData);
				
				HashMap<String, ArrayList<String>> data2 = new HashMap<>();
				String strRows = "//span[text()='Credit Card Transaction Type']/../../../following-sibling::tbody/tr"; 
				List<WebElement> rows = driver.findElements(By.xpath(strRows));
			for (int i = 0; i < rows.size(); i++) {
				List<WebElement> cells = rows.get(i).findElements(By.tagName("td"));
				ArrayList<String> testData = new ArrayList<>();
				for (int j = 1; j < cells.size(); j++) {
					
					testData.add(cells.get(j).getText());
				
				}
				data2.put(cells.get(0).getText(), testData);
				reportLogger.info(data2);
			}
			
			for (String dataKeyValue:data.keySet()) {
				for (String data2KeyValue:data2.keySet()) {
					if(dataKeyValue.equals(data2KeyValue))
					{
						for (int j = 0; j <=1; j++) {
							
							data.replace(dataKeyValue, data.get(dataKeyValue), data2.get(data2KeyValue));
							reportLogger.info(data);
					}	
					}
				}
			}
			reportLogger.info(data);
			
			return data;		
		}

public void validateCreditCardTypeDetailofTransectionReport_RV2_2(WebDriver driver, String transactionType, HashMap<String, ArrayList<String>> beforePaymentDetails,
		HashMap<String, ArrayList<String>> afterPaymentDetails, 
		HashMap<String, String>  creditcardPaymentAmount,
		ArrayList<String> test_steps,String cancelTransactionType) throws InterruptedException, ParseException {

	
	Double beforeCapturePaymentTotal, beforeCapturePaymentNetTotal;
	Double afterCapturePaymentTotal,  afterCapturePaymentNetTotal;
	Double expValue =Double.parseDouble(creditcardPaymentAmount.get(transactionType));
	reportLogger.info("expValue: "+expValue);
	reportLogger.info("Before: "+beforePaymentDetails);
	reportLogger.info("After: "+afterPaymentDetails);
	
	if (transactionType.equalsIgnoreCase("Authorization Only")) {
		beforeCapturePaymentTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(beforePaymentDetails.get("Authorization").get(0)).replaceAll(",", ""));
		
		beforeCapturePaymentNetTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(beforePaymentDetails.get("Authorization").get(1)).replaceAll(",", ""));
		
		afterCapturePaymentTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(afterPaymentDetails.get("Authorization").get(0)).replaceAll(",", ""));
		
		afterCapturePaymentNetTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(afterPaymentDetails.get("Authorization").get(1)).replaceAll(",", ""));
		
		 if(cancelTransactionType.equalsIgnoreCase("Authorization Reversal")) {
			transactionType=cancelTransactionType;
			beforeCapturePaymentTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(beforePaymentDetails.get("Authorization Reversal").get(0)).replaceAll(",", ""));
		
			beforeCapturePaymentNetTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(beforePaymentDetails.get("Authorization Reversal").get(1)).replaceAll(",", ""));
			
			afterCapturePaymentTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(afterPaymentDetails.get("Authorization Reversal").get(0)).replaceAll(",", ""));
		
			afterCapturePaymentNetTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(afterPaymentDetails.get("Authorization Reversal").get(1)).replaceAll(",", ""));
		}
	}else if( transactionType.equalsIgnoreCase("Refund")) {
		beforeCapturePaymentTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(beforePaymentDetails.get("Refund").get(0)).replaceAll(",", ""));
	
		beforeCapturePaymentNetTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(beforePaymentDetails.get("Refund").get(1)).replaceAll(",", ""));
		
		afterCapturePaymentTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(afterPaymentDetails.get("Refund").get(0)).replaceAll(",", ""));
		
		afterCapturePaymentNetTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(afterPaymentDetails.get("Refund").get(1)).replaceAll(",", ""));
	}else if( transactionType.equalsIgnoreCase("Capture")) {
		beforeCapturePaymentTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(beforePaymentDetails.get("Capture").get(0)).replaceAll(",", ""));
	
		beforeCapturePaymentNetTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(beforePaymentDetails.get("Capture").get(1)).replaceAll(",", ""));
		
		afterCapturePaymentTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(afterPaymentDetails.get("Capture").get(0)).replaceAll(",", ""));
		
		afterCapturePaymentNetTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(afterPaymentDetails.get("Capture").get(1)).replaceAll(",", ""));
		 if( cancelTransactionType.equalsIgnoreCase("Cancel")) {
			transactionType=cancelTransactionType;
			beforeCapturePaymentTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(beforePaymentDetails.get("Cancel").get(0)).replaceAll(",", ""));
		
			beforeCapturePaymentNetTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(beforePaymentDetails.get("Cancel").get(1)).replaceAll(",", ""));
			
			afterCapturePaymentTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(afterPaymentDetails.get("Cancel").get(0)).replaceAll(",", ""));
			
			afterCapturePaymentNetTotal = Double.parseDouble(Utility.removeBracketsAndMinusSign(afterPaymentDetails.get("Cancel").get(1)).replaceAll(",", ""));
		}
		  if( cancelTransactionType.equalsIgnoreCase("Failed")) {
				beforeCapturePaymentTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(beforePaymentDetails.get("Failed").get(0)).replaceAll(",", ""));
			
				beforeCapturePaymentNetTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(beforePaymentDetails.get("Failed").get(1)).replaceAll(",", ""));
				
				afterCapturePaymentTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(afterPaymentDetails.get("Failed").get(0)).replaceAll(",", ""));
				
				afterCapturePaymentNetTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(afterPaymentDetails.get("Failed").get(1)).replaceAll(",", ""));
			}
	}else {
		beforeCapturePaymentTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(beforePaymentDetails.get("Other Payment Methods").get(0)).replaceAll(",", ""));
	
		beforeCapturePaymentNetTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(beforePaymentDetails.get("Other Payment Methods").get(1)).replaceAll(",", ""));
		
		afterCapturePaymentTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(afterPaymentDetails.get("Other Payment Methods").get(0)).replaceAll(",", ""));
	
		afterCapturePaymentNetTotal = Double.parseDouble(Utility.removeCurrencySignBracketsAndSpaces(afterPaymentDetails.get("Other Payment Methods").get(1)).replaceAll(",", ""));
	}
	
	reportLogger.info("beforeCapturePaymentTotal: "+beforeCapturePaymentTotal);
	
	reportLogger.info("beforeCapturePaymentNetTotal: "+beforeCapturePaymentNetTotal);
	reportLogger.info("afterCapturePaymentTotal: "+afterCapturePaymentTotal);

	reportLogger.info("afterCapturePaymentNetTotal: "+afterCapturePaymentNetTotal);
	
	Double actualCapturedValue = Utility.getRoundOffValueAfterDecimal(afterCapturePaymentNetTotal-beforeCapturePaymentNetTotal);
	
		assertEquals(actualCapturedValue,expValue,"Failed - "+"transactionType - "+transactionType + " amount validation. Expected: "+expValue+" But found: "+actualCapturedValue);
		reportLogger.info("transactionType Type - "+transactionType + " amount validated successfully ");
		test_steps.add("transactionType Type - "+transactionType + " amount validated successfully ");
	
	
	
}

public void validateReservationAddedToDetailedViewForTransactionReport_ColorCode(WebDriver driver, ArrayList<String> test_steps,
		String checkInDate, String guestName, String resNo, String paymentType 	) throws InterruptedException {	
	if (paymentType.equalsIgnoreCase("MC")||paymentType.equalsIgnoreCase("Visa")||paymentType.equalsIgnoreCase("Discover")) {
		paymentType = "Credit Card";
	}
	String guestNameDisplayed=null, resNoDisplayed=null, paymentTypeDisplayed, amountDisplayed=null, transactionTypeDisplayed=null,colorCodeOfNegativeValue=null,negativeSignonAmount=null, 
	cardNumDisplayed = null, cardHolderNameDisplayed = null;
	HashMap<String, String> transactionTypeAndAmount = new HashMap<>();

	boolean resFound = false,colorCode=false;
	String convertedDate = Utility.parseDate(checkInDate, "dd/MM/yyyy", "MMM dd, yyyy");		
	int size = driver.findElements(By.xpath("//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr")).size();
	
	for (int i = 1; i <= size; i++) {
		
		guestNameDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[1]")).getText();
		
		resNoDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[2]")).getText();

		
		
		if (paymentType.equalsIgnoreCase("Credit Card")) {
			transactionTypeDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[6]")).getText();
			reportLogger.info("transactionTypeDisplayed   :"+transactionTypeDisplayed);
			cardNumDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[7]")).getText();
			reportLogger.info("cardNumDisplayed   :"+cardNumDisplayed);
			cardHolderNameDisplayed = driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[9]")).getText();
			reportLogger.info("cardHolderNameDisplayed   :"+cardHolderNameDisplayed);
		}
		if ((guestNameDisplayed.equalsIgnoreCase(guestName) && resNoDisplayed.equalsIgnoreCase(resNo))) {
			
			if(transactionTypeDisplayed.equalsIgnoreCase("Refund") || transactionTypeDisplayed.equalsIgnoreCase("Cancel") || transactionTypeDisplayed.equalsIgnoreCase("Authorization Reversal"))
			{
				colorCodeOfNegativeValue =driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[10]/span")).getAttribute("style");
				reportLogger.info("colorCodeOfNegativeValue   :"+colorCodeOfNegativeValue);
				negativeSignonAmount=driver.findElement(By.xpath("((//h2[contains(text(),'Detailed View')]/..//following-sibling::div//span/div[contains(text(),'"+convertedDate+"')]/../../../../following-sibling::tbody//tr)["+i+"]/td)[10]")).getText();
				reportLogger.info("negativeSignonAmount   :"+negativeSignonAmount);
				if(colorCodeOfNegativeValue.contains("red") && negativeSignonAmount.contains("-"))	
				{
				colorCode=true;	
				}
			}
			else
			{
				continue;
			}
			assertEquals(colorCode, true, "Failed to validate negative value for refund,cancel and Auth reversal type transaction");

			
			test_steps.add("Successfully verified  "+transactionTypeDisplayed+" type transaction colorcode and negative amount");
			reportLogger.info("Successfully verified  "+transactionTypeDisplayed+" type transaction colorcode and negative amount");
		}
		colorCode=false;
	} 

	 
}


		
		public void mouseOverIncludeReservationHistoryCategory(WebDriver driver,ArrayList<String> test_steps, String message) throws InterruptedException {
			Elements_Reports report = new Elements_Reports(driver);
			Wait.WaitForElement(driver, OR_Reports.reservationHistoryIncludeReservationHistoryCat);
			Utility.hoverOnElement(driver, report.reservationHistoryIncludeReservationHistoryCat);
			Wait.wait5Second();
			String msg=report.reservationHistorytoolTip.getText();
			assertEquals(msg, message, "Failed to verify toolTip");
			reportLogger.info("Verify ToolTip "+message);
			test_steps.add("Verify ToolTip "+message);
		}
		
		public HashMap<String, String> getMainHeaderReservationHistoryReport(WebDriver driver,ArrayList<String> test_steps){
			Elements_Reports report = new Elements_Reports(driver);
			HashMap<String, String> mainHeader= new HashMap<String, String>();
			mainHeader.put("TransactionDateRange", report.netSalesReportTopHeader.get(0).getText());
			mainHeader.put("Categories", report.netSalesReportTopHeader.get(1).getText());
			mainHeader.put("SortReportBy", report.netSalesReportTopHeader.get(2).getText());
			mainHeader.put("IncludDataFrom", report.netSalesReportTopHeader.get(3).getText());
			return mainHeader;
		}
		
		
		public HashMap<String, String> getMiddleHeaderReservationHistoryReport(WebDriver driver,ArrayList<String> test_steps){
			Elements_Reports report = new Elements_Reports(driver);
			HashMap<String, String> middleHeader= new HashMap<String, String>();
			middleHeader.put("ReportType", report.netSalesReportMiddleHeader.get(0).getText());
			middleHeader.put("TransactionDateRange", report.netSalesReportMiddleHeader.get(1).getText());
			middleHeader.put("Categories", report.netSalesReportMiddleHeader.get(2).getText());
			middleHeader.put("GeneratedON", report.netSalesReportMiddleHeader.get(3).getText());
			middleHeader.put("IncludDataFrom", report.netSalesReportMiddleHeader.get(4).getText());
			middleHeader.put("SortReportBy", report.netSalesReportMiddleHeader.get(5).getText());
			return middleHeader;	
		}
		
		public void verifyMainHeaderReservationHistoryData(WebDriver driver,ArrayList<String> test_steps, HashMap<String, String> headersValue, String dateRange, String Categories,
				String sortReportBY, String IncludDataFrom) {			
			Elements_Reports report = new Elements_Reports(driver);
			Wait.WaitForElement(driver, OR_Reports.netSalesReportTopHeader);
			if(Utility.validateString(dateRange)) {
			Utility.verifyEquals(headersValue.get("TransactionDateRange"), dateRange, test_steps);
			reportLogger.info("Verify  Transaction Date Range =" + dateRange);}
			if(Utility.validateString(Categories)) {
				assertTrue(headersValue.get("Categories").contains(Categories));
				reportLogger.info("Verify Included Reservation History Categories =" + Categories);
			}if(Utility.validateString(sortReportBY)) {
				Utility.verifyEquals(headersValue.get("SortReportBy"), sortReportBY, test_steps);
				reportLogger.info("Verify Sort Report By =" + sortReportBY);
			}if(Utility.validateString(IncludDataFrom)) {
				Utility.verifyEquals(headersValue.get("IncludDataFrom"), IncludDataFrom, test_steps);
				reportLogger.info("Verify Include Data From =" + IncludDataFrom);
			}			}		
		public void verifyMiddleHeaderReservationHistoryData(WebDriver driver,ArrayList<String> test_steps, HashMap<String, String> headersValue, String reportType, String transactionDateRange,
				String Categories, String sortReportBy, String generatedON, String IncludDataFrom) throws ParseException {		
			if(Utility.validateString(reportType)) {
				Utility.verifyEquals(headersValue.get("ReportType"), reportType, test_steps);}
				if(Utility.validateString(transactionDateRange)) {
					Utility.verifyEquals(headersValue.get("TransactionDateRange"), transactionDateRange, test_steps);
					reportLogger.info("Verify Transactio Date Range =" + transactionDateRange);
				}if(Utility.validateString(Categories)) {
					assertTrue(headersValue.get("Categories").contains(Categories));
					//Utility.verifyEquals(headersValue.get("Categories"), Categories, test_steps);
					reportLogger.info("Verify Group Net Sales by =" + Categories);
				}if(Utility.validateString(sortReportBy)) {
					Utility.verifyEquals(headersValue.get("SortReportBy"), sortReportBy, test_steps);
					reportLogger.info("Verify Sort Report by =" + sortReportBy);
				}if(Utility.validateString(generatedON)) {
					assertTrue(headersValue.get("GeneratedON").contains(generatedON));
					reportLogger.info("Verify Generated On =" + generatedON);
				}if(Utility.validateString(IncludDataFrom)) {
					Utility.verifyEquals(headersValue.get("IncludDataFrom"), IncludDataFrom, test_steps);
					reportLogger.info("Verify Booked On Date Range =" + IncludDataFrom);
				}
		}
		
		public void verifyReservationHistorySummary(WebDriver driver,String category, String count,ArrayList<String> testSteps) {
			String path="//td[text()='"+category+"']/following-sibling::td[text()='"+count+"']";
			String actualValue=driver.findElement(By.xpath(path)).getText();
			Utility.verifyText(actualValue, count, "Verify- " + category + "Count " + count , testSteps, reportLogger);
		}
		
		public void verifyReservationHistoryDetailed(WebDriver driver,String guestName,String resNo, String category, String description,ArrayList<String> testSteps) {
			String path="//td/a[text()='"+guestName+"']/../following-sibling::td/a[text()='"+resNo+"']/../following-sibling::td[text()='"+category+"']//following-sibling::td[text()='"+description+"']";
			WebElement element= driver.findElement(By.xpath(path));
			Utility.verifyTrue(element, "Verify Description " + element.getText(), testSteps);
		}
		
		public String  getReservationHistorySummaryCount(WebDriver driver,String viewName,String reportName,String category) {
			String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td[text()='"+category+"']/following-sibling::td";
			String value=driver.findElement(By.xpath(path)).getText();
			return value;
		}
		

		//Creatd BY Gangotri
		public void navigateToReservationDetailsReport(WebDriver driver,ArrayList<String> testSteps) throws InterruptedException {
			Elements_Reports res = new Elements_Reports(driver);
			Utility.ScrollToElement(res.ReservationDetailsReport, driver);
			res.ReservationDetailsReport.click();
			Utility.switchTab(driver, 1);
			Wait.WaitForElement(driver, OR_Reports.ReservationDetailsReportHeader);
			testSteps.add("Navigated to Reservation Details reports page");
			reportLogger.info("Navigated to Reservation Details reports page");
		}
		
		//Creatd BY Gangotri
		public HashMap<String, String> getMainHeaderReservationDetailsReport(WebDriver driver,ArrayList<String> test_steps){
			Elements_Reports report = new Elements_Reports(driver);
			HashMap<String, String> mainHeader= new HashMap<String, String>();
			mainHeader.put("DateRange", report.netSalesReportTopHeader.get(0).getText());
			mainHeader.put("ReservationType", report.netSalesReportTopHeader.get(1).getText());
			mainHeader.put("SortReportBy", report.netSalesReportTopHeader.get(2).getText());
			mainHeader.put("IncludReservationWith", report.netSalesReportTopHeader.get(3).getText());
			mainHeader.put("BasedOnDateRange", report.netSalesReportTopHeader.get(4).getText());
			return mainHeader;
		}
		
		//Creatd BY Gangotri
		public HashMap<String, String> getMiddleHeaderReservationDetailsReport(WebDriver driver,ArrayList<String> test_steps){
			Elements_Reports report = new Elements_Reports(driver);
			HashMap<String, String> middleHeader= new HashMap<String, String>();
			middleHeader.put("ReportType", report.netSalesReportMiddleHeader.get(0).getText());
			middleHeader.put("DateRange", report.netSalesReportMiddleHeader.get(1).getText());
			middleHeader.put("ReservationType", report.netSalesReportMiddleHeader.get(2).getText());
			middleHeader.put("SortReportBy", report.netSalesReportMiddleHeader.get(3).getText());
			middleHeader.put("GeneratedOn", report.netSalesReportMiddleHeader.get(4).getText());
			middleHeader.put("ReservationWith", report.netSalesReportMiddleHeader.get(5).getText());
			middleHeader.put("BasedOnDateRange", report.netSalesReportMiddleHeader.get(6).getText());
			return middleHeader;	
		}
		
		//Creatd BY Gangotri
		public void verifyMainHeaderReservationDetailsData(WebDriver driver,ArrayList<String> test_steps, HashMap<String, String> headersValue, String dateRange, String reservationType,
				String sortReportBY, String includReservationWith, String basedOnDateRange) {			
			Elements_Reports report = new Elements_Reports(driver);
			Wait.WaitForElement(driver, OR_Reports.netSalesReportTopHeader);
			if(Utility.validateString(dateRange)) {
			Utility.verifyEquals(headersValue.get("DateRange"), dateRange, test_steps);
			reportLogger.info("Verify  Stay On Date Range =" + dateRange);}
			if(Utility.validateString(reservationType)) {
				assertTrue(headersValue.get("ReservationType").contains(reservationType));
				reportLogger.info("Verify Include Reservation Types =" + reservationType);
				}if(Utility.validateString(sortReportBY)) {
				Utility.verifyEquals(headersValue.get("SortReportBy"), sortReportBY, test_steps);
				reportLogger.info("Verify Sort Report By =" + sortReportBY);
			}if(Utility.validateString(includReservationWith)) {
				Utility.verifyEquals(headersValue.get("IncludReservationWith"), includReservationWith, test_steps);
				reportLogger.info("Verify Only Include Reservations with =" + includReservationWith);
			}if(Utility.validateString(basedOnDateRange)) {
				Utility.verifyEquals(headersValue.get("BasedOnDateRange"), basedOnDateRange, test_steps);
				reportLogger.info("Verify Booked On Date Range =" + basedOnDateRange);
			}	}		
		//Creatd BY Gangotri
		public void verifyMiddleHeaderReservationDetailsData(WebDriver driver,ArrayList<String> test_steps, HashMap<String, String> headersValue, String reportType, String dateRange,
				String reservationType, String sortReportBy, String generatedON, String reservationWith, String basedDateRange) throws ParseException {		
			if(Utility.validateString(reportType)) {
				Utility.verifyEquals(headersValue.get("ReportType"), reportType, test_steps);
				reportLogger.info("Verify Report Type =" + dateRange);}
				if(Utility.validateString(dateRange)) {
					Utility.verifyEquals(headersValue.get("DateRange"), dateRange, test_steps);
					reportLogger.info("Verify Stay On Date Range =" + dateRange);
				}if(Utility.validateString(reservationType)) {
					assertTrue(headersValue.get("ReservationType").contains(reservationType));
					reportLogger.info("Include Reservation Types =" + reservationType);
				}if(Utility.validateString(sortReportBy)) {
					Utility.verifyEquals(headersValue.get("SortReportBy"), sortReportBy, test_steps);
					reportLogger.info("Verify Sort Report by =" + sortReportBy);
				}if(Utility.validateString(generatedON)) {
					assertTrue(headersValue.get("GeneratedOn").contains(generatedON));
					reportLogger.info("Verify Generated On =" + generatedON);
				}if(Utility.validateString(reservationWith)) {
					Utility.verifyEquals(headersValue.get("ReservationWith"), reservationWith, test_steps);
					reportLogger.info("Verify Only Include Reservations with =" + reservationWith);
				}if(Utility.validateString(basedDateRange)) {
					Utility.verifyEquals(headersValue.get("BasedOnDateRange"), basedDateRange, test_steps);
					reportLogger.info("Verify Booked On Date Range =" + basedDateRange);
				}
		}
		
		public void verifyReservationDetailsReport(WebDriver driver,String sortBY,String propertyName,String resNo,String guestName, String status,
				String paidUnpaid, String roomClass,String roomNo,String arrivalDate,String departDate,String arrivalTime,
				String nights,String adult, String chid,String address1, String address2,String city,String territory,
				String zipCode,String country,String ratePlan,String userName,String marketSegemnt, String referral, String source,
				String paymentMethod, String cardFourDigit, String expDate,String totalCharge, String totalPay, String balance,
				String additionalGuest, String notes, String task,ArrayList<String> testSteps) {
			String path=null;
			String headerPath="//h2[text()='Detailed View | Reservation Details Report']/following-sibling::h3[text()='Sort By: "+sortBY+"']";
			WebElement element1= driver.findElement(By.xpath(headerPath));
			Utility.verifyTrue(element1, "Verify Detail Report " + element1.getText(), testSteps);	
			if(Utility.validateString(paidUnpaid)) {
			 path="//td[text()='"+propertyName+"']/following-sibling::td/a[text()='"+resNo+"']"
					+ "/../following-sibling::td/a[text()='"+guestName+"']"
					+ "/../following-sibling::td[text()='"+status+"']/span[text()='"+paidUnpaid+"']"
					+ "/../following-sibling::td[text()='"+roomClass+"']/following-sibling::td[text()='"+roomNo+"']"
					+ "/following-sibling::td[text()='"+arrivalDate+"']/following-sibling::td[text()='"+departDate+"']"
					+ "/following-sibling::td[text()='"+arrivalTime+"']/following-sibling::td[text()='"+nights+"']"
					+ "/following-sibling::td[text()='"+adult+"']/following-sibling::td[text()='"+chid+"']"
					+ "/following-sibling::td[text()='"+address1+"']/following-sibling::td[text()='"+address2+"']"
					+ "//following-sibling::td[text()='"+city+"']/following-sibling::td[text()='"+territory+"']"
					+ "/following-sibling::td[text()='"+zipCode+"']/following-sibling::td[text()='"+country+"']"
					+ "/following-sibling::td[text()='"+ratePlan+"']"
					+ "//following-sibling::td[text()='"+arrivalDate+"']/following-sibling::td[text()='"+userName+"']"
					+ "/following-sibling::td[text()='"+marketSegemnt+"']/following-sibling::td[text()='"+referral+"']"
					+ "/following-sibling::td[text()='"+source+"']//following-sibling::td[text()='"+paymentMethod+"']"
					+ "/following-sibling::td[text()='"+cardFourDigit+"']/following-sibling::td[text()='"+expDate+"']"
					+ "//following-sibling::td[text()='$"+totalCharge+"']/following-sibling::td[text()='$"+totalPay+"']"
					+ "/following-sibling::td[text()='$"+balance+"']//following-sibling::td[text()='"+additionalGuest+"']"
					+ "/following-sibling::td[text()='"+notes+"']/following-sibling::td[text()='"+ task+"']";}
			else {
				 path="//td[text()='"+propertyName+"']/following-sibling::td/a[text()='"+resNo+"']"
						+ "/../following-sibling::td/a[text()='"+guestName+"']"
						+ "/../following-sibling::td[text()='"+status+"']"
						+ "/following-sibling::td[text()='"+roomClass+"']/following-sibling::td[text()='"+roomNo+"']"
						+ "/following-sibling::td[text()='"+arrivalDate+"']/following-sibling::td[text()='"+departDate+"']"
						+ "/following-sibling::td[text()='"+arrivalTime+"']/following-sibling::td[text()='"+nights+"']"
						+ "/following-sibling::td[text()='"+adult+"']/following-sibling::td[text()='"+chid+"']"
						+ "/following-sibling::td[text()='"+address1+"']/following-sibling::td[text()='"+address2+"']"
						+ "//following-sibling::td[text()='"+city+"']/following-sibling::td[text()='"+territory+"']"
						+ "/following-sibling::td[text()='"+zipCode+"']/following-sibling::td[text()='"+country+"']"
						+ "/following-sibling::td[text()='"+ratePlan+"']"
						+ "//following-sibling::td[text()='"+arrivalDate+"']/following-sibling::td[text()='"+userName+"']"
						+ "/following-sibling::td[text()='"+marketSegemnt+"']/following-sibling::td[text()='"+referral+"']"
						+ "/following-sibling::td[text()='"+source+"']//following-sibling::td[text()='"+paymentMethod+"']"
						+ "/following-sibling::td[text()='"+cardFourDigit+"']/following-sibling::td[text()='"+expDate+"']"
						+ "//following-sibling::td[text()='$"+totalCharge+"']/following-sibling::td[text()='$"+totalPay+"']"
						+ "/following-sibling::td[text()='$"+balance+"']//following-sibling::td[text()='"+additionalGuest+"']"
						+ "/following-sibling::td[text()='"+notes+"']/following-sibling::td[text()='"+ task+"']";}
			
			WebElement element= driver.findElement(By.xpath(path));
			Utility.verifyTrue(element, "Verify Detail Report " + element.getText(), testSteps);
			testSteps.add("Verify Property Name " + propertyName);
			reportLogger.info("Verify Property Name " + propertyName);
			testSteps.add("Verify Reservation #" + resNo);
			reportLogger.info("Verify Reservation # " + resNo);
			testSteps.add("Verify Guest Name" + guestName);
			reportLogger.info("Verify Guest Name" + guestName);
			testSteps.add("Verify Reservation Status" + status);
			reportLogger.info("Verify Reservation Status" + status);
			testSteps.add("Verify Room Class" + roomClass);
			reportLogger.info("Verify Room Class" + roomClass);
			testSteps.add("Verify Room #" + roomNo);
			reportLogger.info("Verify Room #" + roomNo);
			testSteps.add("Verify Arrival Date" + arrivalDate);
			reportLogger.info("Verify Arrival Date" + arrivalDate);
			testSteps.add("Verify Departure Date" + departDate);
			reportLogger.info("Verify Departure Date" + departDate);
			testSteps.add("Verify Nights" + nights);
			reportLogger.info("Verify Nights" + nights);
			testSteps.add("Verify Adults" + adult);
			reportLogger.info("Verify Adults" + adult);
			testSteps.add("Verify Children" + chid);
			reportLogger.info("Verify Children" + chid);
			testSteps.add("Verify Address Line 1" + address1);
			reportLogger.info("Verify Address Line 1" + address1);
			testSteps.add("Verify Address Line 2" + address2);
			reportLogger.info("Verify Address Line 2" + address2);
			testSteps.add("Verify City" + city);
			reportLogger.info("Verify City" + city);
			testSteps.add("Verify Territory" + territory);
			reportLogger.info("Verify Territory" + territory);
			testSteps.add("Verify Zip Code" + zipCode);
			reportLogger.info("Verify Zip Code" + zipCode);
			testSteps.add("Verify Country" + country);
			reportLogger.info("Verify Country" + country);
			testSteps.add("Verify Rate Plan" + ratePlan);
			reportLogger.info("Verify Rate Plan" + ratePlan);
			testSteps.add("Verify Booked On" + arrivalDate);
			reportLogger.info("Verify Booked On" + arrivalDate);
			testSteps.add("Verify User Booked" + userName);
			reportLogger.info("Verify User Booked" + userName);
			testSteps.add("Verify Market Segment" + marketSegemnt);
			reportLogger.info("Verify Market Segment" + marketSegemnt);
			testSteps.add("Verify Referral" + referral);
			reportLogger.info("Verify Referral" + referral);
			
			testSteps.add("Verify Source" + source);
			reportLogger.info("Verify Source" + source);
			testSteps.add("Verify Payment Method" + paymentMethod);
			reportLogger.info("Verify Payment Method" + paymentMethod);
			testSteps.add("Verify CC Last 4" + cardFourDigit);
			reportLogger.info("Verify CC Last 4" + cardFourDigit);
			testSteps.add("Verify Credit Card Expiration" + expDate);
			reportLogger.info("Verify Credit Card Expiration" + expDate);
			
			testSteps.add("Verify Total Charges	" + totalCharge);
			reportLogger.info("Verify Total Charges	" + totalCharge);
			testSteps.add("Verify Total Payments" + totalPay);
			reportLogger.info("Verify Total Payments" + totalPay);
			
			testSteps.add("Verify Balance" + balance);
			reportLogger.info("Verify Balance" + balance);
			
			
			testSteps.add("Verify Notes" + notes);
			reportLogger.info("Verify Notes" + notes);
			testSteps.add("Verify Tasks" + task);
			reportLogger.info("Verify Tasks" + task);
			
		}
		

		

		public void navigateToReservatioCardReport(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
			Elements_Reports res = new Elements_Reports(driver);
			res.reservationCardReport.click();
			Utility.switchTab(driver, 1);
			try {
				Wait.waitForElementToBeVisibile(By.xpath(OR_Reports.reservationCardReportHeader), driver);
				reportLogger.info("Navigated to Transactions Report");
				test_steps.add("Navigated to Transactions Report");
			}catch(Exception e) {
				reportLogger.info("Failed, unable to navigate to Transactions Report page");
				test_steps.add("Failed, unable to navigate to Transactions Report page");
			}
		}
		public void	includeReservationTypes(WebDriver driver,String reservationType, ArrayList<String> test_steps)
		{
			reportLogger.info("Select  includeReservationTypes  :"+reservationType);
			String includeReservationType="//span[text()='"+reservationType+"']/..//input";
			Wait.WaitForElement(driver, includeReservationType);
			driver.findElement(By.xpath(includeReservationType)).click();
			reportLogger.info("Selected  includeReservationTypes  :"+reservationType);
		}
		
		public void	sortReportBy(WebDriver driver,String sortby, ArrayList<String> test_steps)
		{
			reportLogger.info("Select  sortby  :"+sortby);
			String sortOrderBy="//span[@title='Arrival Date and Time']";
			Wait.WaitForElement(driver, sortOrderBy);
			driver.findElement(By.xpath(sortOrderBy)).click();
			String sortOption="//div[text()='"+sortby+"']";
			Wait.WaitForElement(driver, sortOption);
			driver.findElement(By.xpath(sortOption)).click();
			reportLogger.info("Selected  sortby  :"+sortby);
		
		}
		
		public void	onlyIncludeReservationsWith(WebDriver driver,String reservationType, ArrayList<String> test_steps)
		{
			reportLogger.info("Select  onlyIncludeReservationsWith  :"+reservationType);
			String includeReservationType="//span[text()='Only Include Reservations with']/../following::div//div[text()='None']";
			Wait.WaitForElement(driver, includeReservationType);
			driver.findElement(By.xpath(includeReservationType)).click();
			String includeReservation="//span[text()='"+reservationType+"']/../../../preceding-sibling::span[1]";
			Wait.WaitForElement(driver, includeReservation);
			driver.findElement(By.xpath(includeReservation)).click();
			reportLogger.info("Selected  onlyIncludeReservationsWith  :"+reservationType);
			
		}
		public void	bookedOnDateRange(WebDriver driver,String optionType, ArrayList<String> test_steps)
		{
			reportLogger.info("Select  bookedOnDateRange  :"+optionType);
			String bookedonDateRange="//span[text()='Booked On Date Range']/../following-sibling::div//div[text()='All']";
			Wait.WaitForElement(driver, bookedonDateRange);
			driver.findElement(By.xpath(bookedonDateRange)).click();
			String clickOnselectBookedonDate="//span[text()='All']";
			Wait.WaitForElement(driver, clickOnselectBookedonDate);
			driver.findElement(By.xpath(clickOnselectBookedonDate)).click();
			
			String selectBookedonDate="//div[text()='"+optionType+"']";
			Wait.WaitForElement(driver, selectBookedonDate);
			driver.findElement(By.xpath(selectBookedonDate)).click();
			reportLogger.info("Selected  bookedOnDateRange  :"+optionType);
		}
		
		public void	verifyCardViewDetails(WebDriver driver,String reservationNumber,String reservation_Status,String guestName,String adult,
				String child,String roomClass,String roomNumber,String ratePlan,HashMap<String, String>	ledgerAmounts,String marketSegment,String phoneNumber,
				String add1,String add2,String add3,String City,String pincode,String state,String country,
				String source,String createdDate,String createdBy,
				String referral,String paymentMethod,String cardNumber,String exp_Date,ArrayList<String> test_steps,
				String checkInDate,String checkOutDate,String accountName,String accountType,String expected_Pre_Stay,boolean isPreStay) throws Exception
		{
			String noOfGuest=Utility.splitInputData_GetFrontData(adult,"\\|")+" Adult, "+Utility.splitInputData_GetFrontData(child,"\\|")+" Children";
			reportLogger.info("noOfGuest   :"+noOfGuest);
			String roomClassAndRoomNo=Utility.splitInputData_GetFrontData(roomClass,"\\|")+", "+Utility.splitInputData_GetFrontData(roomNumber,"\\|");
			reportLogger.info("roomClassAndRoomNo   :"+roomClassAndRoomNo);
			String roomClassAndRoomNo1=Utility.splitInputData_GetFrontData(roomClass,"\\|")+", "+Utility.splitInputData_BackData(roomNumber,"\\|");
			reportLogger.info("roomClassAndRoomNo1   :"+roomClassAndRoomNo1);
			
			
			String ratePlanDetail=Utility.splitInputData_GetFrontData(ratePlan,"\\|")+", Promo Code: None";
			reportLogger.info("ratePlanDetail   :"+ratePlanDetail);
		
			String reserved_On_By=createdDate+"/"+createdBy;
			reportLogger.info("reserved_On_By   :"+reserved_On_By);
			String expDate=cardNumber+" | "+exp_Date;
			reportLogger.info("expDate   :"+expDate);
			String address=null;
			if(Utility.validateString(accountName))
			{
				address=add1+", "+add2+", "+add3+", "+City+", "+pincode+", "+state+", "+country;
			}else {
			 address=add1+", "+add2+", "+City+", "+pincode+", "+state+", "+country;
			}
			
			String reservationStatus="//li[contains(text(),'"+reservationNumber+"')]";
			Wait.WaitForElement(driver, reservationStatus);
			String actual_Res_Status=Utility.splitInputData_GetFrontData(driver.findElement(By.xpath(reservationStatus)).getText(),"\\|");
			
			reportLogger.info("noOfGuest   :"+actual_Res_Status);
			test_steps.add("noOfGuest   :"+actual_Res_Status);
			
			assertEquals(actual_Res_Status.toUpperCase().trim(), reservation_Status.toUpperCase().trim(), "Failed to verify reservation_Status: "+reservation_Status);
			reportLogger.info("Successfully verified reservation_Status :"+reservation_Status);
			test_steps.add("Successfully verified reservation_Status :"+reservation_Status);
			
			String reservation_Number="//li[contains(text(),'"+reservationNumber+"')]";
			Wait.WaitForElement(driver, reservation_Number);
			String actual_reservation_Number=Utility.splitInputData_BackData(driver.findElement(By.xpath(reservation_Number)).getText(),"\\|");
			
			reportLogger.info("reservationNumber   :"+reservationNumber);
			test_steps.add("reservationNumber   :"+reservationNumber);
			
			
			assertEquals(actual_reservation_Number.trim(), reservationNumber.trim(), "Failed to verify reservationNumber: "+reservationNumber);
			reportLogger.info("Successfully verified reservationNumber :"+reservationNumber);
			test_steps.add("Successfully verified reservationNumber :"+reservationNumber);;
			
			String actualGuestNameXPath="//li[contains(text(),'"+reservationNumber+"')]/../li/h3";
			
			Wait.WaitForElement(driver, actualGuestNameXPath);
			String actualGuestName=driver.findElement(By.xpath(actualGuestNameXPath)).getText();
			
			reportLogger.info("actualGuestName   :"+actualGuestName);
			test_steps.add("actualGuestName   :"+actualGuestName);
			reportLogger.info("guestName   :"+guestName);
			
			if(actualGuestName.contains(guestName.split("\\|")[0]))
			{
			if(Utility.validateString(accountName) && !accountType.equalsIgnoreCase("Travel Agent"))
			{
				assertEquals(actualGuestName, guestName.split("\\|")[0]+" ("+accountName+")", "Failed to verify guestname: "+guestName);
				reportLogger.info("Successfully verified guestname :"+guestName);
				test_steps.add("Successfully verified guestname :"+guestName);;
			}
			else
			{
            assertEquals(actualGuestName, guestName.split("\\|")[0], "Failed to verify guestname: "+guestName);
			reportLogger.info("Successfully verified guestname :"+guestName);
			test_steps.add("Successfully verified guestname :"+guestName);;
			}
			}else if(actualGuestName.contains(guestName.split("\\|")[1]))
			{
			if(Utility.validateString(accountName) && !accountType.equalsIgnoreCase("Travel Agent"))
			{
				assertEquals(actualGuestName, guestName.split("\\|")[1]+" ("+accountName+")", "Failed to verify guestname: "+guestName);
				reportLogger.info("Successfully verified guestname :"+guestName);
				test_steps.add("Successfully verified guestname :"+guestName);;
			}
			else
			{
            assertEquals(actualGuestName, guestName.split("\\|")[1], "Failed to verify guestname: "+guestName);
			reportLogger.info("Successfully verified guestname :"+guestName);
			test_steps.add("Successfully verified guestname :"+guestName);;
			}
			}
			
			String noOfGuestXPath="//li[contains(text(),'"+reservationNumber+"')]/following-sibling::li[2]";
			Wait.WaitForElement(driver, noOfGuestXPath);
			String actualNoOfGuest=driver.findElement(By.xpath(noOfGuestXPath)).getText();
			
			reportLogger.info("noOfGuest   :"+actualNoOfGuest);
			test_steps.add("noOfGuest   :"+actualNoOfGuest);
			
			assertEquals(actualNoOfGuest, noOfGuest, "Failed to verify noOfGuest: "+noOfGuest);
			reportLogger.info("Successfully verified noOfGuest :"+noOfGuest);
			test_steps.add("Successfully verified noOfGuest :"+noOfGuest);
			
			String roomClassAndRoomNoXPath="//li[contains(text(),'"+reservationNumber+"')]/following-sibling::li[3]";
			Wait.WaitForElement(driver, roomClassAndRoomNoXPath);
			String actualRoomClassAndRoomNo=driver.findElement(By.xpath(roomClassAndRoomNoXPath)).getText();
		
			reportLogger.info("actualRoomClassAndRoomNo   :"+actualRoomClassAndRoomNo);
			test_steps.add("actualRoomClassAndRoomNo   :"+actualRoomClassAndRoomNo);
			if(actualRoomClassAndRoomNo.contains(Utility.splitInputData_GetFrontData(roomNumber,"\\|")))
			{
			assertEquals(actualRoomClassAndRoomNo, roomClassAndRoomNo, "Failed to verify roomClassAndRoomNo: "+roomClassAndRoomNo);
			reportLogger.info("Successfully verified roomClassAndRoomNo :"+roomClassAndRoomNo);
			test_steps.add("Successfully verified roomClassAndRoomNo :"+roomClassAndRoomNo);
			}else {
				assertEquals(actualRoomClassAndRoomNo, roomClassAndRoomNo1, "Failed to verify roomClassAndRoomNo: "+roomClassAndRoomNo1);
				reportLogger.info("Successfully verified roomClassAndRoomNo1 :"+roomClassAndRoomNo1);
				test_steps.add("Successfully verified roomClassAndRoomNo1 :"+roomClassAndRoomNo1);
				
			}
			

			String stayDateXpath="//li[contains(text(),'"+reservationNumber+"')]/following-sibling::li[1]";
			Wait.WaitForElement(driver, stayDateXpath);
			String stayDate=driver.findElement(By.xpath(stayDateXpath)).getText();
			String actualstayDate=Utility.splitInputData_GetFrontData(stayDate,"\\|");
			reportLogger.info("actualstayDate   :"+actualstayDate);
			test_steps.add("actualstayDate   :"+actualstayDate);
			String expectedStayDate=null;
			if(Utility.splitInputData_GetFrontData(actualstayDate,"-").contains(Utility.getDifferentDateFormat(Utility.splitInputData_GetFrontData(checkInDate,"\\|"), "MMM dd, yyyy")))
					{
				expectedStayDate=Utility.getDifferentDateFormat(Utility.splitInputData_GetFrontData(checkInDate,"\\|"), "MMM dd, yyyy")+" - "+Utility.getDifferentDateFormat(Utility.splitInputData_GetFrontData(checkOutDate,"\\|"), "MMM dd, yyyy");
				assertEquals(actualstayDate.trim(),expectedStayDate, "Failed to verify Balance: "+ actualstayDate);
				reportLogger.info("Successfully verified expectedStayDate :"+ actualstayDate);
				test_steps.add("Successfully verified expectedStayDate :"+ actualstayDate);
				
					}else
					{
						expectedStayDate=Utility.getDifferentDateFormat(Utility.splitInputData_BackData(checkInDate,"\\|"), "MMM dd, yyyy")+" - "+Utility.getDifferentDateFormat(Utility.splitInputData_BackData(checkOutDate,"\\|"), "MMM dd, yyyy");
						assertEquals(actualstayDate.trim(),expectedStayDate, "Failed to verify Balance: "+ actualstayDate);
						reportLogger.info("Successfully verified expectedStayDate :"+ actualstayDate);
						test_steps.add("Successfully verified expectedStayDate :"+ actualstayDate);
							
					}
			
				
			
			
			
			String rateplandetailsXPath="//li[contains(text(),'"+reservationNumber+"')]/following-sibling::li[5]";
			Wait.WaitForElement(driver, rateplandetailsXPath);
			String actualRateplandetails=driver.findElement(By.xpath(rateplandetailsXPath)).getText();
			reportLogger.info("rateplandetails   :"+actualRateplandetails);
			test_steps.add("rateplandetails   :"+actualRateplandetails);
			
			assertEquals(actualRateplandetails, ratePlanDetail, "Failed to verify ratePlanDetail: "+ratePlanDetail);
			reportLogger.info("Successfully verified ratePlanDetail :"+ratePlanDetail);
			test_steps.add("Successfully verified ratePlanDetail :"+ratePlanDetail);
			
			String phoneNumberXPath="//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul//li[2]";
			Wait.WaitForElement(driver, phoneNumberXPath);
			String actualPhoneNumber=Utility.splitInputData_BackData(driver.findElement(By.xpath(phoneNumberXPath)).getText(),":");
			
			reportLogger.info("phoneNumber   :"+actualPhoneNumber);
			test_steps.add("phoneNumber   :"+actualPhoneNumber);
			
			assertEquals(actualPhoneNumber.trim(), phoneNumber, "Failed to verify guestname: "+phoneNumber);
			reportLogger.info("Successfully verified guestname :"+phoneNumber);
			test_steps.add("Successfully verified guestname :"+phoneNumber);
			

			String addressXPath="//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul//li[3]";
			Wait.WaitForElement(driver, addressXPath);
			String actualAddress=Utility.splitInputData_BackData(driver.findElement(By.xpath(addressXPath)).getText(),":");
			
			reportLogger.info("address   :"+actualAddress);
			test_steps.add("address   :"+actualAddress);
			
			Assert.assertEquals(actualAddress.trim(), address, "Failed to verify address: "+address);
			reportLogger.info("Successfully verified guestname :"+address);
			test_steps.add("Successfully verified guestname :"+address);
			
			
			String channelXPath="//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul//li[5]";
			Wait.WaitForElement(driver, channelXPath);
			String actualChannel=Utility.splitInputData_BackData(driver.findElement(By.xpath(channelXPath)).getText(),":");
			
			reportLogger.info("channel   :"+actualChannel);
			test_steps.add("channel   :"+actualChannel);
			
			assertEquals(actualChannel.trim(), source.trim()+"/None", "Failed to verify source: "+source);
			reportLogger.info("Successfully verified source :"+source);
			test_steps.add("Successfully verified source :"+source);
			
			
			
			String reservedOnXPath="//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul//li[6]";
			Wait.WaitForElement(driver, reservedOnXPath);
			String reservedOn=Utility.splitInputData_BackData(driver.findElement(By.xpath(reservedOnXPath)).getText(),":");
			reportLogger.info("reservedOn   :"+reservedOn);
			test_steps.add("reservedOn   :"+reservedOn);
			
			
			assertEquals(reservedOn.trim(), reserved_On_By.trim(), "Failed to verify reserved_On: "+reserved_On_By);
			reportLogger.info("Successfully verified reserved_On :"+reserved_On_By);
			test_steps.add("Successfully verified reserved_On :"+reserved_On_By);
			
			
			
			String referralXPath="//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul//li[7]";
			Wait.WaitForElement(driver, referralXPath);
			String actualReferral=Utility.splitInputData_BackData(driver.findElement(By.xpath(referralXPath)).getText(),":");
			reportLogger.info("referral   :"+actualReferral);
			test_steps.add("referral   :"+actualReferral);
			
			
		    assertEquals(actualReferral.trim(), referral.trim(), "Failed to verify referral: "+referral);
			reportLogger.info("Successfully verified referral :"+referral);
			test_steps.add("Successfully verified referral :"+referral);
			
			
			
			String marketSegmentXPath="//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul//li[8]";
			Wait.WaitForElement(driver, marketSegmentXPath);
			String actualMarketSegment=Utility.splitInputData_BackData(driver.findElement(By.xpath(marketSegmentXPath)).getText(),":");
			reportLogger.info("marketSegment   :"+marketSegment);
			test_steps.add("marketSegment   :"+marketSegment);
			
			assertEquals(actualMarketSegment.trim(), marketSegment.trim(), "Failed to verify marketSegment: "+marketSegment);
			reportLogger.info("Successfully verified marketSegment :"+marketSegment);
			test_steps.add("Successfully verified marketSegment :"+marketSegment);
			
		
			String paymentMethodXPath="(//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul)[2]//li[1]";
			Wait.WaitForElement(driver, paymentMethodXPath);
			String paymentMethods=driver.findElement(By.xpath(paymentMethodXPath)).getText();
			String actualPaymentMethod=Utility.removeCurrencySignBracketsAndSpaces(Utility.splitInputData_BackData(paymentMethods,"\\r?\\n"));
			reportLogger.info("paymentMethod   :"+actualPaymentMethod);
			test_steps.add("paymentMethod   :"+actualPaymentMethod);
	
			
	
			
			Assert.assertEquals(actualPaymentMethod, paymentMethod, "Failed to verify paymentMethod: "+paymentMethod);
			reportLogger.info("Successfully verified paymentMethod :"+paymentMethod);
			test_steps.add("Successfully verified paymentMethod :"+paymentMethod);
		
			
			String expDateXPath="(//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul)[2]//li[2]";
			Wait.WaitForElement(driver, expDateXPath);
			String expDates=driver.findElement(By.xpath(expDateXPath)).getText();
			String actualExpDate=Utility.removeCurrencySignBracketsAndSpaces(Utility.splitInputData_BackData(expDates,"\\r?\\n"));
			reportLogger.info("expDate   :"+actualExpDate);
			test_steps.add("expDate   :"+actualExpDate);
			
			
			if(paymentMethod.equals("-"))
			{
				assertEquals(actualExpDate.trim(), "-", "Failed to verify paymentMethod expiredate: ");
				reportLogger.info("Successfully verified paymentMethod expiredate :");
				test_steps.add("Successfully verified paymentMethod expiredate :");
							}
			else
			{
				assertEquals(actualExpDate.trim(), expDate.trim(), "Failed to verify paymentMethod expiredate: "+expDate);
				reportLogger.info("Successfully verified paymentMethod expiredate:"+expDate);
				test_steps.add("Successfully verified paymentMethod expiredate:"+expDate);
							
			}
			
			
			
			String roomChargesXPath="(//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul)[2]//li[3]";
			Wait.WaitForElement(driver, roomChargesXPath);
			String roomCharges=driver.findElement(By.xpath(roomChargesXPath)).getText();
			String actualRoomCharges=Utility.removeCurrencySignBracketsAndSpaces(Utility.splitInputData_BackData(roomCharges,"\\r?\\n"));
			reportLogger.info("roomCharges   :"+actualRoomCharges);
			test_steps.add("roomCharges   :"+actualRoomCharges);
		
			assertEquals(actualRoomCharges, ledgerAmounts.get("Room Charges") ,"Failed to verify Room Charges: "+ ledgerAmounts.get("Room Charges"));
			reportLogger.info("Successfully verified Room Charges :"+ ledgerAmounts.get("Room Charges"));
			test_steps.add("Successfully verified Room Charges :"+ ledgerAmounts.get("Room Charges"));
			
			
			String incidentalsXPath="(//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul)[2]//li[4]";
			Wait.WaitForElement(driver, incidentalsXPath);
			String incidentals=driver.findElement(By.xpath(incidentalsXPath)).getText();
			String actualIncidentals=Utility.removeCurrencySignBracketsAndSpaces(Utility.splitInputData_BackData(incidentals,"\\r?\\n"));
			reportLogger.info("incidentals   :"+actualIncidentals);
			test_steps.add("incidentals   :"+actualIncidentals);
			
			assertEquals(actualIncidentals, ledgerAmounts.get("Incidentals"), "Failed to verify guestname: "+ledgerAmounts.get("Incidentals"));
			reportLogger.info("Successfully verified Incidental :"+ledgerAmounts.get("Incidentals"));
			test_steps.add("Successfully verified Incidental :"+ledgerAmounts.get("Incidentals"));
			
			
			String feesXPath="(//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul)[2]//li[5]";
			Wait.WaitForElement(driver, feesXPath);
			String fees=driver.findElement(By.xpath(feesXPath)).getText();
			String actualFees=Utility.removeCurrencySignBracketsAndSpaces(Utility.splitInputData_BackData(fees,"\\r?\\n"));
			reportLogger.info("fees   :"+actualFees);
			test_steps.add("fees   :"+actualFees);
			
			assertEquals(actualFees, ledgerAmounts.get("Fees"), "Failed to verify Fees: "+ ledgerAmounts.get("Fees"));
			reportLogger.info("Successfully verified Fees :"+ ledgerAmounts.get("Fees"));
			test_steps.add("Successfully verified Fees :"+ ledgerAmounts.get("Fees"));
			
			
			String taxesXPath="(//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul)[2]//li[6]";
			Wait.WaitForElement(driver, taxesXPath);
			String taxes=driver.findElement(By.xpath(taxesXPath)).getText();
			String actualTaxes=Utility.removeCurrencySignBracketsAndSpaces(Utility.splitInputData_BackData(taxes,"\\r?\\n"));
			reportLogger.info("taxes   :"+actualTaxes);
			test_steps.add("taxes   :"+actualTaxes);
			
			
			assertEquals(actualTaxes, ledgerAmounts.get("Taxes"), "Failed to verify Taxes: "+ledgerAmounts.get("Taxes"));
			reportLogger.info("Successfully verified Taxes :"+ledgerAmounts.get("Taxes"));
			test_steps.add("Successfully verified Taxes :"+ledgerAmounts.get("Taxes"));
			
			
			
			String totalXPath="(//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul)[2]//li[7]";
			Wait.WaitForElement(driver, totalXPath);
			String total=driver.findElement(By.xpath(totalXPath)).getText();
			String actualTotal=Utility.removeCurrencySignBracketsAndSpaces(Utility.splitInputData_BackData(total,"\\r?\\n"));
			reportLogger.info("total   :"+actualTotal);
			test_steps.add("total   :"+actualTotal);
			
			assertEquals(actualTotal, ledgerAmounts.get("Total Charges"), "Failed to verify Total Charges: "+ledgerAmounts.get("Total Charges"));
			reportLogger.info("Successfully verified Total :"+ledgerAmounts.get("Total Charges"));
			test_steps.add("Successfully verified Total :"+ledgerAmounts.get("Total Charges"));
			
			
			String paidXPath="(//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul)[2]//li[8]";
			Wait.WaitForElement(driver, paidXPath);
			String paid=driver.findElement(By.xpath(paidXPath)).getText();
			String actualPaid=Utility.removeCurrencySignBracketsAndSpaces(Utility.splitInputData_BackData(paid,"\\r?\\n"));
			reportLogger.info("paid   :"+actualPaid);
			test_steps.add("paid   :"+actualPaid);
			
			assertEquals(actualPaid, ledgerAmounts.get("Payments"), "Failed to verify Payments: "+ledgerAmounts.get("Payments"));
			reportLogger.info("Successfully verified Paid :"+ledgerAmounts.get("Payments"));
			test_steps.add("Successfully verified Paid :"+ledgerAmounts.get("Payments"));
			
			
			String balanceXPath="(//li[contains(text(),'"+reservationNumber+"')]/../following-sibling::ul)[2]//li[9]";
			Wait.WaitForElement(driver, balanceXPath);
			String balance=driver.findElement(By.xpath(balanceXPath)).getText();
			String actualBalance=Utility.removeCurrencySignBracketsAndSpaces(Utility.splitInputData_BackData(balance,"\\r?\\n"));
			reportLogger.info("balance   :"+actualBalance);
			test_steps.add("balance   :"+actualBalance);
			
			assertEquals(actualBalance, ledgerAmounts.get("Balance"), "Failed to verify Balance: "+ ledgerAmounts.get("Balance"));
			reportLogger.info("Successfully verified Balance :"+ ledgerAmounts.get("Balance"));
			test_steps.add("Successfully verified Balance :"+ ledgerAmounts.get("Balance"));
			
			if(isPreStay)
			{
			String previousStayXpath="//li[contains(text(),'"+reservationNumber+"')]/following-sibling::li[4]";
			Wait.WaitForElement(driver, previousStayXpath);
			String previousStay=driver.findElement(By.xpath(previousStayXpath)).getText();
			
			reportLogger.info("previousStay   :"+previousStay);
			test_steps.add("previousStay   :"+previousStay);
			
			assertEquals(previousStay, expected_Pre_Stay+" Previous Stays", "Failed to verify expected_Pre_Stay: "+ expected_Pre_Stay);
			reportLogger.info("Successfully verified expected_Pre_Stay :"+ expected_Pre_Stay);
			test_steps.add("Successfully verified expected_Pre_Stay :"+ expected_Pre_Stay);
			}
			
			
		}
		
		public void	verifyHeaderOfReservationCardReport(WebDriver driver, ArrayList<String> test_steps,String dateRange,
				String includeReservation_Types,String sortReservationsBy,String onlyIncludeReservationsWith,String onlyIncludeReservationsWithBooked,String stayon_End_Date ) throws Exception
		{
			String stayOnDateRange="//div[contains(text(),'Stay On Date Range')]/p";
			
			String includeReservationTypes="//div[contains(text(),'Include Reservation Types')]/p";
			String sortReport_by="//div[contains(text(),'Sort Report by')]/p";
			String onlyIncludeReservations_with="//div[contains(text(),'Only Include Reservations with')]/p";
			String bookedOnDateRange="//div[contains(text(),'Booked On Date Range')]/p";
			
			Wait.WaitForElement(driver, stayOnDateRange);
			String stayOnDateRange_Actual=Utility.splitInputData_GetFrontData(driver.findElement(By.xpath(stayOnDateRange)).getText(),"\\|");
			reportLogger.info("stayOnDateRange_Actual   :"+stayOnDateRange_Actual);
			test_steps.add("stayOnDateRange_Actual   :"+stayOnDateRange_Actual);
			
			assertEquals(stayOnDateRange_Actual.trim(), dateRange, "Failed to verify includeReservation_Types: "+dateRange);
			reportLogger.info("Successfully verified dateRange :"+dateRange);
			test_steps.add("Successfully verified dateRange :"+dateRange);
			
			Wait.WaitForElement(driver, includeReservationTypes);
			String includeReservationTypes_Actual=driver.findElement(By.xpath(includeReservationTypes)).getText();
			
			reportLogger.info("includeReservationTypes_Actual   :"+includeReservationTypes_Actual);
			test_steps.add("includeReservationTypes_Actual   :"+includeReservationTypes_Actual);
			
			assertEquals(includeReservationTypes_Actual, includeReservation_Types, "Failed to verify includeReservation_Types: "+includeReservation_Types);
			reportLogger.info("Successfully verified includeReservation_Types :"+includeReservation_Types);
			test_steps.add("Successfully verified includeReservation_Types :"+includeReservation_Types);
			
			Wait.WaitForElement(driver, sortReport_by);
			String sortReport_by_Actual=driver.findElement(By.xpath(sortReport_by)).getText();
			
			reportLogger.info("sortReport_by_Actual   :"+sortReport_by_Actual);
			test_steps.add("sortReport_by_Actual   :"+sortReport_by_Actual);
			
			assertEquals(sortReport_by_Actual, sortReservationsBy, "Failed to verify sortReport_by: "+sortReservationsBy);
			reportLogger.info("Successfully verified sortReport_by :"+sortReservationsBy);
			test_steps.add("Successfully verified sortReport_by :"+sortReservationsBy);
			
			
			Wait.WaitForElement(driver, onlyIncludeReservations_with);
			String onlyIncludeReservations_with_Actual=driver.findElement(By.xpath(onlyIncludeReservations_with)).getText();
			
			reportLogger.info("onlyIncludeReservations_with_Actual   :"+onlyIncludeReservations_with_Actual);
			test_steps.add("onlyIncludeReservations_with_Actual   :"+onlyIncludeReservations_with_Actual);
			
			assertEquals(onlyIncludeReservations_with_Actual, onlyIncludeReservationsWith, "Failed to verify onlyIncludeReservationsWith: "+onlyIncludeReservationsWith);
			reportLogger.info("Successfully verified onlyIncludeReservationsWith :"+onlyIncludeReservationsWith);
			test_steps.add("Successfully verified onlyIncludeReservationsWith :"+onlyIncludeReservationsWith);
			
			Wait.WaitForElement(driver, bookedOnDateRange);
			String bookedOnDateRange_Actual=driver.findElement(By.xpath(bookedOnDateRange)).getText();
			
			reportLogger.info("bookedOnDateRange_Actual   :"+bookedOnDateRange_Actual);
			test_steps.add("bookedOnDateRange_Actual   :"+bookedOnDateRange_Actual);
			
			
			
			assertEquals(bookedOnDateRange_Actual, onlyIncludeReservationsWithBooked, "Failed to verify onlyIncludeReservationsWithBooked: "+onlyIncludeReservationsWithBooked);
			reportLogger.info("Successfully verified onlyIncludeReservationsWithBooked :"+onlyIncludeReservationsWithBooked);
			test_steps.add("Successfully verified onlyIncludeReservationsWithBooked :"+onlyIncludeReservationsWithBooked);
			

		
            String  stayDateRangeXpath="//div[contains(text(),'Stay On Date Range')]/p";
			
			Wait.WaitForElement(driver, stayDateRangeXpath);
			String stayDateRange_Actual=Utility.splitInputData_BackData(driver.findElement(By.xpath(stayDateRangeXpath)).getText(),"\\|");
			reportLogger.info("stayDateRange   :"+stayon_End_Date);
			test_steps.add("stayDateRange   :"+stayon_End_Date);
			
			assertEquals(stayDateRange_Actual.trim(),stayon_End_Date, "Failed to verify Reservation Card Report: "+stayon_End_Date);
			reportLogger.info("Successfully verified stayOnDateRange - "+stayon_End_Date);
			test_steps.add("Successfully verified stayOnDateRange - "+stayon_End_Date);
			
			
		}
		public void	verifyReservationCardReportAdvanceOption(WebDriver driver, ArrayList<String> test_steps,String dateRange,
				String includeReservation_Types,String sortReservationsBy,String onlyIncludeReservationsWith,String onlyIncludeReservationsWithBooked,
				String propertyName,String stayon_End_Date) throws Exception
		{
			String reportsHeader="//h1[contains(text(),'Reservation Cards Report')]";
			String reportType="//span[contains(text(),'Report type')]/following-sibling::span";
			String stayOnDateRange="//span[contains(text(),'Stay On Date Range')]/following-sibling::span";
			String includeReservationTypes="//span[contains(text(),'Include Reservation Types')]/following-sibling::span";
			String sortReport_by="//span[contains(text(),'Sort Report by')]/following-sibling::span";
			String generated_On="//span[contains(text(),'Generated On')]/following-sibling::span";
			String onlyInclude_Reservations_with="//span[contains(text(),'Only Include Reservations with')]/following-sibling::span";
			String  bookedOnDateRange="//span[contains(text(),'Booked On Date Range')]/following-sibling::span";
			
			Wait.WaitForElement(driver, reportsHeader);
			String reportsHeader_Actual=driver.findElement(By.xpath(reportsHeader)).getText();
			reportLogger.info("reportsHeader_Actual   :"+reportsHeader_Actual);
			test_steps.add("reportsHeader_Actual   :"+reportsHeader_Actual);
			
			assertEquals(reportsHeader_Actual.trim(), "Reservation Cards Report - "+propertyName.trim(), "Failed to verify Reservation Card Report: "+reportsHeader_Actual);
			reportLogger.info("Successfully verified"+"Reservation Cards Report - "+propertyName.toUpperCase());
			test_steps.add("Successfully verified"+"Reservation Cards Report - "+propertyName.toUpperCase());
			
			Wait.WaitForElement(driver, reportType);
			String reportType_Actual=driver.findElement(By.xpath(reportType)).getText();
			
			reportLogger.info("reportType_Actual   :"+reportType_Actual);
			test_steps.add("reportType_Actual   :"+reportType_Actual);
			
			assertEquals(reportType_Actual.trim(), "Reservation Card Report", "Failed to verify Reservation Card Report: "+reportType_Actual);
			reportLogger.info("Successfully verified reportType :"+includeReservation_Types);
			test_steps.add("Successfully verified reportType :"+includeReservation_Types);
			
			Wait.WaitForElement(driver, stayOnDateRange);
			String stayOnDateRange_Actual=Utility.splitInputData_GetFrontData(driver.findElement(By.xpath(stayOnDateRange)).getText(),"\\|");
			
			reportLogger.info("stayOnDateRange_Actual   :"+stayOnDateRange_Actual);
			test_steps.add("stayOnDateRange_Actual   :"+stayOnDateRange_Actual);
			
			assertEquals(stayOnDateRange_Actual.trim(), dateRange, "Failed to verify includeReservation_Types: "+dateRange);
			reportLogger.info("Successfully verified dateRange :"+dateRange);
			test_steps.add("Successfully verified dateRange :"+dateRange);
			
			Wait.WaitForElement(driver, includeReservationTypes);
			String includeReservationTypes_Actual=driver.findElement(By.xpath(includeReservationTypes)).getText();
			
			reportLogger.info("includeReservationTypes_Actual   :"+includeReservationTypes_Actual);
			test_steps.add("includeReservationTypes_Actual   :"+includeReservationTypes_Actual);
			
			assertEquals(includeReservationTypes_Actual, includeReservation_Types, "Failed to verify includeReservation_Types: "+includeReservation_Types);
			reportLogger.info("Successfully verified includeReservation_Types :"+includeReservation_Types);
			test_steps.add("Successfully verified includeReservation_Types :"+includeReservation_Types);
			
			Wait.WaitForElement(driver, sortReport_by);
			String sortReport_by_Actual=driver.findElement(By.xpath(sortReport_by)).getText();
			
			reportLogger.info("sortReport_by_Actual   :"+sortReport_by_Actual);
			test_steps.add("sortReport_by_Actual   :"+sortReport_by_Actual);
			
			assertEquals(sortReport_by_Actual, sortReservationsBy, "Failed to verify sortReservationsBy: "+sortReservationsBy);
			reportLogger.info("Successfully verified sortReservationsBy :"+sortReservationsBy);
			test_steps.add("Successfully verified sortReservationsBy :"+sortReservationsBy);
			
			Wait.WaitForElement(driver, generated_On);
			String generated_On_Actual=driver.findElement(By.xpath(generated_On)).getText();
			
			reportLogger.info("generated_On_Actual   :"+generated_On_Actual);
			test_steps.add("generated_On_Actual   :"+generated_On_Actual);
			
			assertEquals(stayOnDateRange_Actual.trim(), dateRange, "Failed to verify includeReservation_Types: "+dateRange);
			reportLogger.info("Successfully verified dateRange :"+dateRange);
			test_steps.add("Successfully verified dateRange :"+dateRange);
			
			Wait.WaitForElement(driver, onlyInclude_Reservations_with);
			String onlyInclude_Reservations_with_Actual=driver.findElement(By.xpath(onlyInclude_Reservations_with)).getText();
			
			reportLogger.info("onlyInclude_Reservations_with_Actual   :"+onlyInclude_Reservations_with_Actual);
			test_steps.add("onlyInclude_Reservations_with_Actual   :"+onlyInclude_Reservations_with_Actual);
			
			assertEquals(onlyInclude_Reservations_with_Actual, onlyIncludeReservationsWith, "Failed to verify onlyIncludeReservationsWith: "+onlyIncludeReservationsWith);
			reportLogger.info("Successfully verified onlyIncludeReservationsWith :"+onlyIncludeReservationsWith);
			test_steps.add("Successfully verified onlyIncludeReservationsWith :"+onlyIncludeReservationsWith);
			
			Wait.WaitForElement(driver, bookedOnDateRange);
			String bookedOnDateRange_Actual=driver.findElement(By.xpath(bookedOnDateRange)).getText();
			
			
			reportLogger.info("bookedOnDateRange_Actual   :"+bookedOnDateRange_Actual);
			test_steps.add("bookedOnDateRange_Actual   :"+bookedOnDateRange_Actual);
			
			assertEquals(bookedOnDateRange_Actual, onlyIncludeReservationsWithBooked, "Failed to verify Booked On Date Range: "+onlyIncludeReservationsWithBooked);
			reportLogger.info("Successfully verified Booked On Date Range :"+onlyIncludeReservationsWithBooked);
			test_steps.add("Successfully verified Booked On Date Range :"+onlyIncludeReservationsWithBooked);
			
			
            String  stayDateRangeXpath="//div[contains(text(),'Stay On Date Range')]/p";
			
			Wait.WaitForElement(driver, stayDateRangeXpath);
			String stayDateRange_Actual=Utility.splitInputData_BackData(driver.findElement(By.xpath(stayDateRangeXpath)).getText(),"\\|");
			reportLogger.info("stayDateRange   :"+stayon_End_Date);
			test_steps.add("stayDateRange   :"+stayon_End_Date);
			
			assertEquals(stayDateRange_Actual.trim(),stayon_End_Date, "Failed to verify Reservation Card Report: "+stayon_End_Date);
			reportLogger.info("Successfully verified stayon_End_Date - "+stayon_End_Date);
			test_steps.add("Successfully verified stayon_End_Date - "+stayon_End_Date);
			
			
		}

		public void	verifyReservationCardReport_Reservation_SortingOrder(WebDriver driver, ArrayList<String> test_steps,String sortReservationsBy ) throws Exception
		{
			String listof_Reservation=null;
			List<WebElement> listOfReservation=new ArrayList();
			if(sortReservationsBy.equalsIgnoreCase("Arrival Date and Time"))
			{
			listof_Reservation="//h1[contains(text(),'Reservation Cards Report')]/../following-sibling::div//ul//h3/../following-sibling::li[2]";
			
			listOfReservation=driver.findElements(By.xpath(listof_Reservation));
			}
			if(sortReservationsBy.equalsIgnoreCase("Reservation Number"))
			{
				listof_Reservation="//h1[contains(text(),'Reservation Cards Report')]/../following-sibling::div//ul//h3/../following-sibling::li[1]";
				
				listOfReservation=driver.findElements(By.xpath(listof_Reservation));
			}
			ArrayList<String> testData = new ArrayList<>();
			for (int i = 0; i < listOfReservation.size(); i++)
			{
					testData.add(listOfReservation.get(i).getText());
				
		
			}
		

			ArrayList<String> testDataDateFormat = new ArrayList<>();
			if(sortReservationsBy.equalsIgnoreCase("Arrival Date and Time"))
			{
			reportLogger.info("Get all the reservation from report by sort order of Arrival Date");
			for (int i = 0; i < testData.size(); i++)
			{
				
				String data=Utility.splitInputData_GetFrontData(testData.get(i), "-");
				
				 DateFormat df = new SimpleDateFormat("MMM dd, yyyy");
				 SimpleDateFormat d2=new SimpleDateFormat("yyyy-MM-dd");
				  Date d1 = df.parse(data);
		           System.out.println("Date: " + d1);
		           reportLogger.info("Date in dd/MM/yyyy format is: "+df.format(d1));
		           reportLogger.info("Date in yyyy-MM-dd format is: "+d2.format(d1));
				testDataDateFormat.add(d2.format(d1));
			
		
			}
			reportLogger.info("testDataDateFormat :"+testDataDateFormat);
			reportLogger.info("testDataDateFormat :"+testDataDateFormat.size());
			}
			
			
			if(sortReservationsBy.equalsIgnoreCase("Reservation Number"))
			{
				reportLogger.info("Get all the reservation from report by sort order of reservation number");
				for (int i = 0; i < testData.size(); i++)
				{
					
					String data=Utility.splitInputData_BackData(testData.get(i), "\\|");			
					testDataDateFormat.add(data.trim());
					
			
				}
				reportLogger.info("testDataDateFormat :"+testDataDateFormat);
				reportLogger.info("testDataDateFormat :"+testDataDateFormat.size());
			}
			
			reportLogger.info("Copy the list of reservation and then sorting it in reverse order");
			List<String> copyTestData = new ArrayList<>();			
			copyTestData.addAll(testDataDateFormat);	
			if(sortReservationsBy.equalsIgnoreCase("Reservation Number"))
			{
				Collections.sort(copyTestData, Collections.reverseOrder());
			}else
				{
			Collections.sort(copyTestData);
				}
		
			reportLogger.info("copyTestData :"+copyTestData);
			reportLogger.info("copyTestData :"+copyTestData.size());
			reportLogger.info("Verify the sorting order by comparing each record");
			boolean isSortingData=false;
			for(int i=0;i<copyTestData.size();i++)
			{
				
				if(testDataDateFormat.get(i).equals(copyTestData.get(i)))
				{
						
					isSortingData=true;
				}
				else
				{
					isSortingData=false;
					break;
				}
			}
			
			assertEquals(isSortingData, true,"Failed:Reservation are not in sort order");
			reportLogger.info("Successfully verified sorting order of Reservation.");
			test_steps.add("Successfully verified sorting order of Reservation");
		
		}
		
		public void	verifyReservationCardReport_ReservationType(WebDriver driver, ArrayList<String> test_steps,String reservation_Status,String includeReservation_Types ) throws Exception
		{
			String listof_Reservation=null;
			List<WebElement> listOfReservation=new ArrayList();		
			listof_Reservation="//h1[contains(text(),'Reservation Cards Report')]/../following-sibling::div//ul//h3/../following-sibling::li[1]";				
			listOfReservation=driver.findElements(By.xpath(listof_Reservation));
			
			ArrayList<String> testData = new ArrayList<>();
			for (int i = 0; i < listOfReservation.size(); i++)
			{
					testData.add(listOfReservation.get(i).getText());
							
			}
			reportLogger.info("testData :"+testData);
			ArrayList<String> testDataStatus = new ArrayList<>();			
			reportLogger.info("Get all the reservation from report");
			
				for (int i = 0; i < testData.size(); i++)
				{					
					String data=Utility.splitInputData_GetFrontData(testData.get(i), "\\|");			
					testDataStatus.add(data.trim());				
			
				}
				reportLogger.info("testDataStatus :"+testDataStatus);
			
			reportLogger.info("Verify the status of each record");
			boolean isSortingData=false;
			for(int i=0;i<testDataStatus.size();i++)
			{
				if(includeReservation_Types.equalsIgnoreCase("In-House"))
				{
				if(testDataStatus.get(i).trim().equalsIgnoreCase(reservation_Status.trim()))
				{
						
					isSortingData=true;
				}
				}
				else
				{
					isSortingData=false;
					break;
				}
				
				
			}
			
			assertEquals(isSortingData, true,"Failed:Status of Reservation are not satisfying");
			reportLogger.info("Successfully verified status of Reservation.");
			test_steps.add("Successfully verified status of Reservation.");
			testDataStatus=null;
			listOfReservation=null;
			

		}
		
		
		public String selectDateRange_startAndEndDate(WebDriver driver, ArrayList<String> test_steps) throws Exception {
          String  startDate="//input[contains(@id,'stayOnDate')]";
          String  endDate="//input[contains(@placeholder,'End date')]";
			
			Wait.WaitForElement(driver, startDate);
			String actaulStartDate=driver.findElement(By.xpath(startDate)).getAttribute("value").trim();
			reportLogger.info("actaulStartDate   :"+actaulStartDate);
			test_steps.add("actaulStartDate   :"+actaulStartDate);
			
			Wait.WaitForElement(driver, endDate);
			String actaulendDate=driver.findElement(By.xpath(endDate)).getAttribute("value").trim();
			reportLogger.info("actaulStartDate   :"+actaulendDate);
			test_steps.add("actaulStartDate   :"+actaulendDate);
			String selectDateRange=actaulStartDate+" to "+actaulendDate;
			return selectDateRange;
		}
		public void selectIncludedBalancesDropDownOptions(WebDriver driver, ArrayList<String> test_steps,String includedBalanceOption) {
			Elements_Reports element =new Elements_Reports(driver);
			String includeBal_Option="//div[text()='"+includedBalanceOption+"']";
			Wait.WaitForElement(driver, includeBal_Option);
			driver.findElement(By.xpath(includeBal_Option)).click();
			test_steps.add("Verified selectIncludedBalancesDropDownOptions " + includedBalanceOption);
			reportLogger.info("Verified selectIncludedBalancesDropDownOptions " + includedBalanceOption);
			
			}
		
		public void selectEffectiveDateDropdown(WebDriver driver, ArrayList<String> test_steps, String day) {
			Elements_Reports element =new Elements_Reports(driver);
			test_steps.add("--- Verifing in Effective Date Dropdown  ---");
			String effectiveDate_Option ="//div[@class='ant-select-item-option-content' and text()='"+day+"']";
			Wait.WaitForElement(driver, effectiveDate_Option);
			JavascriptExecutor jse = (JavascriptExecutor) driver;
			try {
				jse.executeScript("arguments[0].click();", driver.findElement(By.xpath(effectiveDate_Option) ));
			} catch (Exception e) {
				jse.executeScript("arguments[0].click();", driver.findElement(By.xpath(effectiveDate_Option) ));
			}			
			test_steps.add("Verified in Effective Date Dropdown  is Selected " + day);
			}
		public void clickEffectiveDateDropdown(WebDriver driver, ArrayList<String> test_steps) {
			Elements_Reports element =new Elements_Reports(driver);	
			OR_Reports oR_Report=new OR_Reports();
			Wait.WaitForElement(driver, oR_Report.effectiveDateDropdownOption);
			element.effectiveDateDropdownOption.click();			
			test_steps.add("Verified 'Effective Date' Dropdown is clicked");
			reportLogger.info("Verified 'Effective Date' Dropdown is clicked");
		}
		
		public void sortReportByListOfOption(WebDriver driver, ArrayList<String> test_steps) throws Exception {
			
			Elements_Reports element =new Elements_Reports(driver);
			ArrayList<String> arr=new ArrayList<String>();
			
			for(int i=3; i<element.sortReportListOfOption.size();i++) {
				arr.add(element.sortReportListOfOption.get(i).getAttribute("title"));
				
			}
			
			for(int i=2; i<arr.size();i++) {
				//option.click();
				//Wait.wait2Second();
				//clickcustomizeDetailedViewDropdown(driver, test_steps);
				//Wait.WaitForElement(driver,option);
				Wait.wait2Second();
				test_steps.add("Clicked On "+arr.get(i)  +"sorting option");
				reportLogger.info("Clicked On "+arr.get(i)+"sorting option");

			}
					}
		
public void selectSortReportOption(WebDriver driver, ArrayList<String> test_steps,String sorting_Option) throws Exception {
			
			Elements_Reports element =new Elements_Reports(driver);
			String sortdropdown="(//div[@class='ant-select SelectList_selectList_12ajo ant-select-single ant-select-show-arrow'])[2]";
			Wait.WaitForElement(driver, sortdropdown);
			driver.findElement(By.xpath(sortdropdown)).click();
			String sortOption="//div[@title='"+sorting_Option+"']";
			Wait.WaitForElement(driver, sortOption);
			driver.findElement(By.xpath(sortOption)).click();
			test_steps.add("Selected sorting option is "+sorting_Option);
			reportLogger.info("Selected sorting option is "+sorting_Option);	
			
					}
 public void clearAllButtonClick(WebDriver driver, ArrayList<String> test_steps) {
	Elements_Reports element =new Elements_Reports(driver);
	test_steps.add("--- Verifying 'Clear All' Button is Displaying ---");
	Wait.WaitForElement(driver, OR_Reports.clearAllButton);	
	element.clearAllButton.click();
	test_steps.add("Clear All' Button is clicked");
	reportLogger.info("Clear All' Button is clicked");	
	}
 public void verifyFolioBalanceReportSubHeader(WebDriver driver, ArrayList<String> test_steps,String propertyName,String effectiveDate,String reservationType,
		 String includeBalances,String generatedOn,String sortedBy,String displayAccountName,String includePendingFolioItem,String includeAuthorization) throws Exception {	
	 
	     Elements_Reports element =new Elements_Reports(driver);
	     
	     Wait.WaitForElement(driver, OR_Reports.reportname);
	     String  actual_reportname=element.reportname.getText();
	     reportLogger.info("actual_reportname :"+actual_reportname);	
		 
	     String  expected_reportname="Folio Balances Report - Guest Ledger - "+propertyName;
	     reportLogger.info("expected_reportname: "+expected_reportname);	
	     assertEquals(actual_reportname, expected_reportname,"Failed to verify "+expected_reportname);	     
	     
	    test_steps.add("Verified Report name: "+"Folio Balances Report - Guest Ledger - "+propertyName);
	 	reportLogger.info("Verified Report name: "+"Folio Balances Report - Guest Ledger - "+propertyName);	
	 	
	     
	     Wait.WaitForElement(driver, OR_Reports.reportType);
	     String  actual_reportType=element.reportType.getText();
	     reportLogger.info("actual_reportType :"+actual_reportType);	
			
	     String  expected_reportType="Folio Balances Report - Guest Ledger";
	     reportLogger.info("expected_reportType: "+expected_reportType);	
	     assertEquals(actual_reportType, expected_reportType,"Failed to verify "+expected_reportType);
	      
	     test_steps.add("Verified  Folio Balances Report - Guest Ledger ");
		 reportLogger.info("Verified  Folio Balances Report - Guest Ledger ");	
		 	
	 Wait.WaitForElement(driver, OR_Reports.effectiveDate2);
     String  actual_effectiveDate2=element.effectiveDate2.getText();
     reportLogger.info("actual_effectiveDate2 :"+actual_effectiveDate2);	
		
     String  expected_effectiveDate2=effectiveDate+" | "+Utility.getCurrentDate("MMM dd, yyyy, EEEE");   
     reportLogger.info("expected_effectiveDate2: "+expected_effectiveDate2);	
     assertEquals(actual_effectiveDate2, expected_effectiveDate2,"Failed to verify "+expected_effectiveDate2);
     
     test_steps.add("Verified Report effectivedate: "+expected_effectiveDate2);
	 reportLogger.info("Verified Report effectivedate: "+expected_effectiveDate2);	
	 
     
     Wait.WaitForElement(driver, OR_Reports.ReservationType);
     String actual_ReservationType=element.ReservationType.getText();
     reportLogger.info("actual_ReservationType :"+actual_ReservationType);	
		
     String  expected_ReservationType=reservationType;
     reportLogger.info("expected_ReservationType: "+expected_ReservationType);	
     assertEquals(actual_ReservationType, expected_ReservationType,"Failed to verify "+expected_ReservationType);
     
     test_steps.add("Verified Report reservationtype :"+expected_ReservationType);
	 reportLogger.info("Verified Report reservationtype :"+expected_ReservationType);	
	 
     
     Wait.WaitForElement(driver,  OR_Reports.IncludedBalanc);
     String  actual_IncludedBalanc=element.IncludedBalanc.getText();
     reportLogger.info("actual_IncludedBalanc :"+actual_IncludedBalanc);	
     
     String  expected_IncludedBalanc=null;
		if(includeBalances.equalsIgnoreCase("All"))
		{
			expected_IncludedBalanc="Receivable balances | Payable balances";
		}else if(includeBalances.equalsIgnoreCase("Receivable balances"))
		{
			expected_IncludedBalanc="Receivable balances"	;
		}else if(includeBalances.equalsIgnoreCase("Payable balances"))
		{
			expected_IncludedBalanc="Payable balances";
		}
     reportLogger.info("expected_IncludedBalanc: "+expected_IncludedBalanc);	
     assertEquals(actual_IncludedBalanc, expected_IncludedBalanc,"Failed to verify "+expected_IncludedBalanc);
     
     test_steps.add("Verified Report includebalance "+expected_IncludedBalanc);
	 reportLogger.info("Verified Report includebalance "+expected_IncludedBalanc);	
	 
     
     Wait.WaitForElement(driver, OR_Reports.GeneratedOn);
     String actual_GeneratedOn=Utility.splitInputData_GetFrontData(element.GeneratedOn.getText(), "\\|").trim();
     reportLogger.info("actual_GeneratedOn :"+actual_GeneratedOn);	
		
     String  expected_GeneratedOn=Utility.getCurrentDate("MMM dd, yyyy"); 
     reportLogger.info("expected_GeneratedOn: "+expected_GeneratedOn);	
     assertEquals(actual_GeneratedOn, expected_GeneratedOn,"Failed to verify "+expected_GeneratedOn);
     
     test_steps.add("Verified Report generated on date: "+expected_GeneratedOn);
	 reportLogger.info("Verified Report generated on date: "+expected_GeneratedOn);	
	 
     
     Wait.WaitForElement(driver, OR_Reports.SortReport_by);
     String actual_SortReport_by=element.SortReport_by.getText();
     reportLogger.info("actual_SortReport_by :"+actual_SortReport_by);	
		
     String  expected_SortReport_by=sortedBy;
     reportLogger.info("expected_SortReport_by: "+expected_SortReport_by);	
     assertEquals(actual_SortReport_by, expected_SortReport_by,"Failed to verify "+expected_SortReport_by);
     
     test_steps.add("Verified Report sortedby option: "+expected_SortReport_by);
	 reportLogger.info("Verified Report sortedby option: "+expected_SortReport_by);	
	 
     
     Wait.WaitForElement(driver, OR_Reports.DisplayAccount_CompanyName);
     String actual_DisplayAccount_CompanyName=element.DisplayAccount_CompanyName.getText();
     reportLogger.info("actual_DisplayAccount_CompanyName :"+actual_DisplayAccount_CompanyName);	
		
     String  expected_DisplayAccount_CompanyName=displayAccountName;
     reportLogger.info("expected_DisplayAccount_CompanyName: "+expected_DisplayAccount_CompanyName);	
     assertEquals(actual_DisplayAccount_CompanyName, expected_DisplayAccount_CompanyName,"Failed to verify dispaly account name option");
     
     test_steps.add("Verified Report displayaccount name option: "+expected_DisplayAccount_CompanyName);
	 reportLogger.info("Verified Report displayaccount name option: "+expected_DisplayAccount_CompanyName);	
	 
     
     Wait.WaitForElement(driver, OR_Reports.IncludePending_Unposted_FolioItems);
     String actual_IncludePending_Unposted_FolioItems=element.IncludePending_Unposted_FolioItems.getText();
     reportLogger.info("actual_IncludePending_Unposted_FolioItems :"+actual_IncludePending_Unposted_FolioItems);	
		
     String  expected_IncludePending_Unposted_FolioItems=includePendingFolioItem;
     reportLogger.info("expected_IncludePending_Unposted_FolioItems: "+expected_IncludePending_Unposted_FolioItems);	
     assertEquals(actual_IncludePending_Unposted_FolioItems, expected_IncludePending_Unposted_FolioItems,"Failed to verify IncludePending Unposted FolioItems option");
     
     test_steps.add("Verified Report include unposted folioitem option: "+expected_IncludePending_Unposted_FolioItems);
	 reportLogger.info("Verified Report include unposted folioitem option:  "+expected_IncludePending_Unposted_FolioItems);	
	 
     
     Wait.WaitForElement(driver, OR_Reports.IncludeAuthorizations);
     String actual_IncludeAuthorizations=element.IncludeAuthorizations.getText();
     reportLogger.info("actual_IncludeAuthorizations :"+actual_IncludeAuthorizations);	
		
     String  expected_IncludeAuthorizations=includeAuthorization;
     reportLogger.info("expected_IncludeAuthorizations: "+expected_IncludeAuthorizations);	
     assertEquals(actual_IncludeAuthorizations, expected_IncludeAuthorizations,"Failed to verify IncludeAuthorizations option");
     
     test_steps.add("Verified Report IncludeAuthorizations option: "+expected_IncludeAuthorizations);
	 reportLogger.info("Verified Report IncludeAuthorizations option: "+expected_IncludeAuthorizations);	
	 
	}
 public void VerifyDetailViewFolioBalanceReportFor(WebDriver driver, ArrayList<String> test_steps,String reservationNumber,boolean displayAccount,
		 boolean IncludeAuthorization,String roomNumber,String roomName,String arrivalDate,String departureDate,String guestName,String accountName,
		 String folioBalance,String authorizationAmount,String accountSubtotal) throws Exception {

		
	       String detailViewGuestName="//a[text()='"+reservationNumber+"']/../..//td/a";
	       String detailViewReservation_No="(//a[text()='"+reservationNumber+"']/../..//td/a)[2]";
		   String detailViewRoomNo="(//a[text()='"+reservationNumber+"']/../..//td)[3]";
		   String detailArrivalDate="(//a[text()='"+reservationNumber+"']/../..//td)[4]";
		   String detailDepartedDate="(//a[text()='"+reservationNumber+"']/../..//td)[5]";
		   String accountSubTotal="//td[text()='Account Subtotal']/following-sibling::td/div";
		   String folio_Balance=Utility.removeBracketsAndMinusSign(folioBalance);
		   if(!folio_Balance.equalsIgnoreCase("0.00"))
		   {
		   if(displayAccount && IncludeAuthorization)
		   {
		   String detailAccountCompanyName="(//a[text()='"+reservationNumber+"']/../..//td)[6]";
		   String detailAuthorization="(//a[text()='"+reservationNumber+"']/../..//td)[7]";
		   String detailFolioBalance="(//a[text()='"+reservationNumber+"']/../..//td)[8]";
		   Wait.WaitForElement(driver, detailAccountCompanyName);
		   String  actual_detailAccountCompanyName=driver.findElement(By.xpath(detailAccountCompanyName)).getText().trim();
		   reportLogger.info("actual_detailAccountCompanyName :"+actual_detailAccountCompanyName);	
			
		   String  expected_detailAccountCompanyName=accountName;
		   reportLogger.info("expected_detailAccountCompanyName :"+expected_detailAccountCompanyName);	
		   assertEquals(actual_detailAccountCompanyName, expected_detailAccountCompanyName,"Failed to verify accountname");
		   
		   test_steps.add("Verified foliobalance Report account name "+expected_detailAccountCompanyName);
		   reportLogger.info("Verified foliobalance Report account name "+expected_detailAccountCompanyName);	
			
		   
		   Wait.WaitForElement(driver, detailAuthorization);
		   String  actual_detailAuthorization=driver.findElement(By.xpath(detailAuthorization)).getText().trim();
		   reportLogger.info("detailAuthorization :"+detailAuthorization);	
			
		   String  expected_detailAuthorization=authorizationAmount; 
		   reportLogger.info("expected_detailAuthorization :"+expected_detailAuthorization);	
		   assertEquals(actual_detailAuthorization, expected_detailAuthorization,"Failed to authorizationamount");
		   test_steps.add("Verified foliobalance Report account name "+expected_detailAccountCompanyName);
		   reportLogger.info("Verified foliobalance Report account name "+expected_detailAccountCompanyName);	
			
		   Wait.WaitForElement(driver, detailFolioBalance);
		   String  actual_detailFolioBalance=Utility.removeBracketsAndMinusSign(driver.findElement(By.xpath(detailFolioBalance)).getText().trim());
		   reportLogger.info("actual_detailFolioBalance :"+actual_detailFolioBalance);	
			
		   String  expected_detailFolioBalance=folioBalance; 
		   reportLogger.info("expected_detailFolioBalance :"+expected_detailFolioBalance);	
		   assertEquals(actual_detailFolioBalance, expected_detailFolioBalance,"Failed to foliobalance"); 
		   test_steps.add("Verified foliobalance Report account name "+expected_detailAccountCompanyName);
		   reportLogger.info("Verified foliobalance Report account name "+expected_detailAccountCompanyName);	
			
		   }
		   else if(displayAccount && !IncludeAuthorization)
		   {
			   String detailAccountCompanyName="(//a[text()='"+reservationNumber+"']/../..//td)[6]";
			   String detailAuthorization="";
			   String detailFolioBalance="(//a[text()='"+reservationNumber+"']/../..//td)[7]";
			   Wait.WaitForElement(driver, detailAccountCompanyName);
			   String  actual_detailAccountCompanyName=driver.findElement(By.xpath(detailAccountCompanyName)).getText().trim();
			   reportLogger.info("actual_detailAccountCompanyName :"+actual_detailAccountCompanyName);	
				
			   String  expected_detailAccountCompanyName=accountName; 
			   reportLogger.info("expected_detailAccountCompanyName :"+expected_detailAccountCompanyName);	
			   assertEquals(actual_detailAccountCompanyName, expected_detailAccountCompanyName,"Failed to verify accountname");
			   test_steps.add("Verified foliobalance Report account name "+expected_detailAccountCompanyName);
			   reportLogger.info("Verified foliobalance Report account name "+expected_detailAccountCompanyName);	
				
			   Wait.WaitForElement(driver, detailFolioBalance);
			   String  actual_detailFolioBalance=Utility.removeBracketsAndMinusSign(driver.findElement(By.xpath(detailFolioBalance)).getText().trim());
			   reportLogger.info("actual_detailFolioBalance :"+actual_detailFolioBalance);	
				
			   String  expected_detailFolioBalance=folioBalance; 
			   reportLogger.info("expected_detailFolioBalance :"+expected_detailFolioBalance);	
			   assertEquals(actual_detailFolioBalance, expected_detailFolioBalance,"Failed to verify foliobalance");	
			   test_steps.add("Verified foliobalance Report folio balance "+expected_detailFolioBalance);
			   reportLogger.info("Verified foliobalance Report folio balance "+expected_detailFolioBalance);	
				
		   } else if(!displayAccount && IncludeAuthorization)
		   {
			   String detailAccountCompanyName="";
			   String detailAuthorization="(//a[text()='"+reservationNumber+"']/../..//td)[6]";
			   String detailFolioBalance="(//a[text()='"+reservationNumber+"']/../..//td)[7]";
			   Wait.WaitForElement(driver, detailAuthorization);
			   String  actual_detailAuthorization=driver.findElement(By.xpath(detailAuthorization)).getText().trim();
			   reportLogger.info("actual_detailAuthorization :"+actual_detailAuthorization);	
				
			   String  expected_detailAuthorization=authorizationAmount; 
			   reportLogger.info("expected_detailAuthorization :"+expected_detailAuthorization);	
			   assertEquals(actual_detailAuthorization, expected_detailAuthorization,"Failed to verify authorized amount");
			   test_steps.add("Verified foliobalance Report authorization Amount "+expected_detailAuthorization);
			   reportLogger.info("Verified foliobalance Report authorization Amount "+expected_detailAuthorization);	
				
			   Wait.WaitForElement(driver, detailFolioBalance);
			   String  actual_detailFolioBalance=Utility.removeBracketsAndMinusSign(driver.findElement(By.xpath(detailFolioBalance)).getText().trim());
			   reportLogger.info("actual_detailFolioBalance :"+actual_detailFolioBalance);	
				
			   String  expected_detailFolioBalance=folioBalance; 
			   reportLogger.info("expected_detailFolioBalance :"+expected_detailFolioBalance);	
			   assertEquals(actual_detailFolioBalance, expected_detailFolioBalance,"Failed to verify foliobalance");
			   test_steps.add("Verified foliobalance Report folio balance "+expected_detailFolioBalance);
			   reportLogger.info("Verified foliobalance Report folio balance "+expected_detailFolioBalance);	
				
		   } else if(!displayAccount && !IncludeAuthorization)
		   {
			   String detailAccountCompanyName="";
			   String detailAuthorization="";
			   String detailFolioBalance="(//a[text()='"+reservationNumber+"']/../..//td)[6]";
			   Wait.WaitForElement(driver, detailFolioBalance);
			   String  actual_detailFolioBalance=Utility.removeBracketsAndMinusSign(driver.findElement(By.xpath(detailFolioBalance)).getText().trim());
			   reportLogger.info("actual_detailFolioBalance :"+actual_detailFolioBalance);	
				
			   String  expected_detailFolioBalance=Utility.removeBracketsAndMinusSign(folioBalance); 
			   reportLogger.info("expected_detailFolioBalance :"+expected_detailFolioBalance);	
			   assertEquals(actual_detailFolioBalance, expected_detailFolioBalance,"Failed to verify folio balance");  
			   test_steps.add("Verified foliobalance Report folio balance "+expected_detailFolioBalance);
			   reportLogger.info("Verified foliobalance Report balance "+expected_detailFolioBalance);	
				
		   }   

		   
		   Wait.WaitForElement(driver, detailViewGuestName);
		   String  actual_detailViewGuestName=driver.findElement(By.xpath(detailViewGuestName)).getText().trim();
		   reportLogger.info("actual_detailViewGuestName :"+actual_detailViewGuestName);	
			
		   String  expected_detailViewGuestName=guestName; 
		   reportLogger.info("expected_detailViewGuestName :"+expected_detailViewGuestName);	
		   assertEquals(actual_detailViewGuestName, expected_detailViewGuestName,"Failed to verify guestname");
		   test_steps.add("Verified foliobalance Report guest name "+expected_detailViewGuestName);
		   reportLogger.info("Verified foliobalance Report guest name "+expected_detailViewGuestName);	
			
		   
		   Wait.WaitForElement(driver, detailViewReservation_No);
		   String  actual_detailViewReservation_No=driver.findElement(By.xpath(detailViewReservation_No)).getText().trim();
		   reportLogger.info("actual_detailViewReservation_No :"+actual_detailViewReservation_No);	
			
		   String  expected_detailViewReservation_No=reservationNumber; 
		   reportLogger.info("expected_detailViewReservation_No :"+expected_detailViewReservation_No);	
		   assertEquals(actual_detailViewReservation_No, expected_detailViewReservation_No,"Failed to verify reservation number");
		   test_steps.add("Verified foliobalance Report reservation number "+expected_detailViewReservation_No);
		   reportLogger.info("Verified foliobalance Report reservation number  "+expected_detailViewReservation_No);	
			
			    
		   Wait.WaitForElement(driver, detailViewRoomNo);
		   String  actual_detailViewRoomNo=driver.findElement(By.xpath(detailViewRoomNo)).getText().trim();
		   reportLogger.info("actual_detailViewRoomNo :"+actual_detailViewRoomNo);	
		  
		  // String expected_detailViewRoomNo=Utility.splitInputData_GetFrontData(roomName,"\\|")+", "+Utility.splitInputData_GetFrontData(roomNumber,"\\|");
			String roomClassAndRoomNo=Utility.splitInputData_GetFrontData(roomName,"\\|")+": "+Utility.splitInputData_GetFrontData(roomNumber,"\\|");
			reportLogger.info("roomClassAndRoomNo   :"+roomClassAndRoomNo);
			String roomClassAndRoomNo1=Utility.splitInputData_GetFrontData(roomName,"\\|")+": "+Utility.splitInputData_BackData(roomNumber,"\\|");
			reportLogger.info("roomClassAndRoomNo1   :"+roomClassAndRoomNo1);
		   //String  expected_detailViewRoomNo=roomName+": "+roomNumber; 
		   
		   if(actual_detailViewRoomNo.contains(Utility.splitInputData_GetFrontData(roomNumber,"\\|")))
			{
			assertEquals(actual_detailViewRoomNo, roomClassAndRoomNo, "Failed to verify roomClassAndRoomNo: "+roomClassAndRoomNo);
			reportLogger.info("Successfully verified roomClassAndRoomNo :"+roomClassAndRoomNo);
			test_steps.add("Successfully verified roomClassAndRoomNo :"+roomClassAndRoomNo);
			}else {
				assertEquals(actual_detailViewRoomNo, roomClassAndRoomNo1, "Failed to verify roomClassAndRoomNo: "+roomClassAndRoomNo1);
				reportLogger.info("Successfully verified roomClassAndRoomNo1 :"+roomClassAndRoomNo1);
				test_steps.add("Successfully verified roomClassAndRoomNo1 :"+roomClassAndRoomNo1);
				
			}
		  /* 
		   reportLogger.info("expected_detailViewRoomNo :"+expected_detailViewRoomNo);	
		   assertEquals(actual_detailViewRoomNo, expected_detailViewRoomNo,"Failed to verify Roomclass and Room number");
		   test_steps.add("Verified foliobalance Report Roomclass and room number "+expected_detailViewRoomNo);
		   reportLogger.info("Verified foliobalance Report Roomclass and room number "+expected_detailViewRoomNo);	
		   */
			
			    
		   Wait.WaitForElement(driver, detailArrivalDate);
		   String  actual_detailArrivalDate=driver.findElement(By.xpath(detailArrivalDate)).getText().trim();
		   reportLogger.info("actual_detailArrivalDate :"+actual_detailArrivalDate);	
			
		   String  expected_detailArrivalDate=Utility.getDifferentDateFormat(arrivalDate, "MMM dd, yyyy"); 
		   reportLogger.info("expected_detailArrivalDate :"+expected_detailArrivalDate);	
		   assertEquals(actual_detailArrivalDate, expected_detailArrivalDate,"Failed to verify arrival date");
		   test_steps.add("Verified foliobalance Report arrival date "+expected_detailArrivalDate);
		   reportLogger.info("Verified foliobalance Report arrival date "+expected_detailArrivalDate);	
			
			    
		   Wait.WaitForElement(driver, detailDepartedDate);
		   String  actual_detailDepartedDate=driver.findElement(By.xpath(detailDepartedDate)).getText().trim();
		   reportLogger.info("actual_detailDepartedDate :"+actual_detailDepartedDate);	
			
		   String  expected_detailDepartedDate=Utility.getDifferentDateFormat(departureDate, "MMM dd, yyyy");; 
		   reportLogger.info("expected_detailDepartedDate :"+expected_detailDepartedDate);	
		   assertEquals(actual_detailDepartedDate, expected_detailDepartedDate,"Failed to verify departure date");
		   test_steps.add("Verified foliobalance Report departure date "+expected_detailDepartedDate);
		   reportLogger.info("Verified foliobalance Report departure date "+expected_detailDepartedDate);	
			
			   
		   Wait.WaitForElement(driver, accountSubTotal);
		   String  actual_accountSubTotal=Utility.removeBracketsAndMinusSign(driver.findElement(By.xpath(accountSubTotal)).getText().trim()).replace(",", "");
		   reportLogger.info("actual_accountSubTotal :"+actual_accountSubTotal);	
			
		   String  expected_accountSubTotal=Utility.removeBracketsAndMinusSign(accountSubtotal); 
		   reportLogger.info("expected_accountSubTotal :"+expected_accountSubTotal.replace(",", ""));	
		   assertEquals(actual_accountSubTotal, expected_accountSubTotal,"Failed to verify accountsubtotal");
		   test_steps.add("Verified foliobalance Report account subtotal "+expected_accountSubTotal);
		   reportLogger.info("Verified foliobalance Report account subtotal "+expected_accountSubTotal);	
		   }else {
			   test_steps.add("Reservation will not show as foliobalance is  "+folio_Balance);
			   reportLogger.info("Reservation will not show as foliobalance is  "+folio_Balance);	
			  
		   }
			
			  	    
		  
	}
 
 public String  getFolioBalanceDeatilViewAccountSubtotal(WebDriver driver, ArrayList<String> test_steps) {
     Elements_Reports element =new Elements_Reports(driver);
   
    test_steps.add("--- Verifying 'Folio Balance' sum is equal to 'Account Subtotal' ---");
    Wait.WaitForElement(driver, OR_Reports.accountSubtotalValue);
    reportLogger.info(element.accountSubtotalValue.getText());
    String accountSubtotal = Utility.removeDollarBracketsAndSpaces(element.accountSubtotalValue.getText());
    accountSubtotal=Utility.removeCommaSign(accountSubtotal);   
    test_steps.add(" 'Folio Balance' of all reservations is equal to 'Account Subtotal': "+accountSubtotal);
    reportLogger.info(" 'Folio Balance' of all reservations is equal to 'Account Subtotal': "+accountSubtotal);
    return accountSubtotal;
     
 }
 
 public HashMap<String, String> getRecivableBalance(WebDriver driver, ArrayList<String> test_steps,String reservationType) {
		Elements_Reports elements = new Elements_Reports(driver);
		HashMap<String, String> data = new HashMap<>();	
		if(reservationType.equalsIgnoreCase("Cancelled"))
		{
		try {
			
			data.put("Cancelled", Utility.removeDollarBracketsAndSpaces(elements.receivableCancelledAmount.getText().trim()).replace(",",""));	
			
		} catch (Exception e) {
			data.put("Cancelled", "0.00");			
			test_steps.add("Cancelled is displayed empty in summary view report");
			reportLogger.info("Cancelled is displayed empty in summary view report");		}
		}
		if(reservationType.equalsIgnoreCase("Reserved"))
		{
		try {
			
			//Wait.WaitForElement(driver, OR_Reports.receivableReservedAmount);
			data.put("Reserved", Utility.removeDollarBracketsAndSpaces(elements.receivableReservedAmount.getText().trim()).replace(",",""));	
			
		} catch (Exception e) {
			data.put("Reserved", "0.00");			
			test_steps.add("Reserved is displayed empty in summary view report");
			reportLogger.info("Reserved is displayed empty in summary view report");
		}
		}
		if(reservationType.equalsIgnoreCase("Confirmed"))
		{
		try {
			data.put("Confirmed", Utility.removeDollarBracketsAndSpaces(elements.receivableConfirmedAmount.getText().trim()).replace(",",""));
		
		} catch (Exception e) {
			data.put("Confirmed", "0.00");			
			test_steps.add("Confirmed is displayed empty in summary view report");
			reportLogger.info("Confirmed is displayed empty in summary view report");
		}
		}
		if(reservationType.equalsIgnoreCase("No Show"))
		{
		try {
			data.put("No Show", Utility.removeDollarBracketsAndSpaces(elements.receivableNoShowAmount.getText().trim()).replace(",",""));
		}
		catch (Exception e) {
			data.put("No Show", "0.00");			
			test_steps.add("No Show is displayed empty in summary view report");
			reportLogger.info("No Show is displayed empty in summary view report");
		}
		}
		if(reservationType.equalsIgnoreCase("On Hold"))
		{
		try {
			data.put("On Hold", Utility.removeDollarBracketsAndSpaces(elements.receivableOnHoldAmount.getText().trim()).replace(",",""));
		
		} catch (Exception e) {
			data.put("On Hold", "0.00");			
			test_steps.add("On Hold is displayed empty in summary view report");
			reportLogger.info("On Hold is displayed empty in summary view report");
		}
		}
		if(reservationType.equalsIgnoreCase("Guaranteed"))
		{
		try {
			data.put("Guaranteed", Utility.removeDollarBracketsAndSpaces(elements.receivableGuaranteedAmount.getText().trim()).replace(",",""));
		
		} catch (Exception e) {
			data.put("Guaranteed", "0.00");			
			test_steps.add("Guaranteed is displayed empty in summary view report");
			reportLogger.info("Guaranteed is displayed empty in summary view report");
		}
		}


		if(reservationType.equalsIgnoreCase("Departed"))
		{
		try {
			data.put("Departed", Utility.removeDollarBracketsAndSpaces(elements.receivableDepartedAmount.getText().trim()).replace(",",""));
		
		} catch (Exception e) {
			data.put("Departed", "0.00");			
			test_steps.add("Departed is displayed empty in summary view report");
			reportLogger.info("Departed is displayed empty in summary view report");
		}
		}
		if(reservationType.equalsIgnoreCase("In-House"))
		{
		try {
			data.put("In-House", Utility.removeDollarBracketsAndSpaces(elements.receivableInHouseAmount.getText().trim()).replace(",",""));
		
		} catch (Exception e) {
			data.put("In-House", "0.00");			
			test_steps.add("In-House is displayed empty in summary view report");
			reportLogger.info("In-House is displayed empty in summary view report");
		}
		}


		try {
			
			data.put("Subtotal", Utility.removeDollarBracketsAndSpaces(elements.receivableSubTotal.getText().trim()).replace(",",""));
		} catch (Exception e) {
			data.put("Subtotal", "0.00");			
			test_steps.add("Subtotal is displayed empty in summary view report");
			reportLogger.info("Subtotal is displayed empty in summary view report");
		}	
		return data;
	}
 public HashMap<String, String> getPayableBalances(WebDriver driver, ArrayList<String> test_steps,String reservationType) {
		Elements_Reports elements = new Elements_Reports(driver);
		HashMap<String, String> data = new HashMap<>();	
		//data=null;
		if(reservationType.equalsIgnoreCase("Cancelled"))
		
		{
		try {
			data.put("Cancelled", Utility.removeDollarBracketsAndSpaces(elements.payableCancelledAmount.getText().trim()).replace(",",""));		
		
		} catch (Exception e) {
			data.put("Cancelled", "0.00");			
			test_steps.add("Cancelled is displayed empty in summary view report");
			reportLogger.info("Cancelled is displayed empty in summary view report");
		}
		}
		if(reservationType.equalsIgnoreCase("Reserved"))
		{
		try {
			data.put("Reserved", Utility.removeDollarBracketsAndSpaces(elements.payableReservedAmount.getText().trim()).replace(",",""));
		
					
		} catch (Exception e) {
			data.put("Reserved", "0.00");			
			test_steps.add("Reservedis displayed empty in summary view report");
			reportLogger.info("Reserved is displayed empty in summary view report");
		}
		}
		if(reservationType.equalsIgnoreCase("Confirmed"))
		{
		try {
			data.put("Confirmed", Utility.removeDollarBracketsAndSpaces(elements.payableConfirmedAmount.getText().trim()).replace(",",""));
		
		} catch (Exception e) {
			data.put("Confirmed", "0.00");			
			test_steps.add("Confirmed is displayed empty in summary view report");
			reportLogger.info("Confirmed is displayed empty in summary view report");
		}
		}
		if(reservationType.equalsIgnoreCase("No Show"))
		{
		try {
			data.put("No Show", Utility.removeDollarBracketsAndSpaces(elements.payableNoShowAmount.getText().trim()).replace(",",""));
		
		} catch (Exception e) {
			data.put("No Show", "0.00");			
			test_steps.add("No Show is displayed empty in summary view report");
			reportLogger.info("No Show is displayed empty in summary view report");
		}
		}
		if(reservationType.equalsIgnoreCase("On Hold"))
		{
		try {
			data.put("On Hold", Utility.removeDollarBracketsAndSpaces(elements.payableOnHoldAmount.getText().trim()).replace(",",""));
		
		} catch (Exception e) {
			data.put("On Hold", "0.00");			
			test_steps.add("On Hold is displayed empty in summary view report");
			reportLogger.info("On Hold is displayed empty in summary view report");
		}
		}
		
		if(reservationType.equalsIgnoreCase("Guaranteed"))
		{
		try {
			data.put("Guaranteed", Utility.removeDollarBracketsAndSpaces(elements.payableGuaranteedAmount.getText().trim()).replace(",",""));
		
		} catch (Exception e) {
			data.put("Guaranteed", "0.00");			
			test_steps.add("Guaranteed is displayed empty in summary view report");
			reportLogger.info("Guaranteed is displayed empty in summary view report");
		}
		}
		if(reservationType.equalsIgnoreCase("Departed"))
		{
		try {
			data.put("Departed", Utility.removeDollarBracketsAndSpaces(elements.payableDepartedAmount.getText().trim()).replace(",",""));
		
		} catch (Exception e) {
			data.put("Departed", "0.00");			
			test_steps.add("Departed is displayed empty in summary view report");
			reportLogger.info("Departed is displayed empty in summary view report");
		}
		}
		if(reservationType.equalsIgnoreCase("In-House"))
		{
		try {
			data.put("In-House", Utility.removeDollarBracketsAndSpaces(elements.payableInHouseAmount.getText().trim()).replace(",",""));
		
		} catch (Exception e) {
			data.put("In-House", "0.00");			
			test_steps.add("In-House is displayed empty in summary view report");
			reportLogger.info("In-House is displayed empty in summary view report");
		}
		}


		try {			
			data.put("Subtotal", Utility.removeDollarBracketsAndSpaces(elements.payableSubTotal.getText().trim()).replace(",",""));
		} catch (Exception e) {
			data.put("Subtotal", "0.00");			
			test_steps.add("Subtotal is displayed empty in summary view report");
			reportLogger.info("Subtotal is displayed empty in summary view report");
		}	
		return data;
	}
 
 public  HashMap<String, String> netTotal(WebDriver driver,ArrayList<String> test_steps)
 {
	 Elements_Reports elements = new Elements_Reports(driver);
	 HashMap<String, String> data = new HashMap<>();	
	 data.clear();
	 try {			
			data.put("NetTotal", Utility.removeDollarBracketsAndSpaces(elements.payableNetTotal.getText().trim()).replace(",",""));
		} catch (Exception e) {
			data.put("NetTotal", "0.00");			
			test_steps.add("NetTotal displayed empty in summary view of folio balance report");
			reportLogger.info("NetTotal is displayed empty in summary view of folio balance report");
		}	
		return data;
	
 }
 
	 public void validateFoliobalanceReportSummaryView(WebDriver driver, HashMap<String, String> beforeRecivableBalances,HashMap<String, String> afterRecivableBalances,
			 HashMap<String, String> beforePaybleBalances,HashMap<String, String> afterPayableBalances, String reservationType,String foliobalance,
			 HashMap<String, String> beforeNetTotal,HashMap<String, String> afterNetTotal,boolean verifyPayable,boolean verifyRecivable,
			 ArrayList<String> test_steps) throws InterruptedException, ParseException {
		    
		    reportLogger.info("foliobalance: "+foliobalance);
			reportLogger.info("reservationType: "+reservationType);
			reportLogger.info("BeforeRecivable: "+beforeRecivableBalances);
			reportLogger.info("AfterRecivable: "+afterRecivableBalances);
			reportLogger.info("BeforePayable: "+beforePaybleBalances);
			reportLogger.info("AfterPayable: "+afterPayableBalances);
			
			Double beforeRecivableBal, beforePaybleBal,beforePaybleSubBal,beforeRecivableSubBal,beforeNetTotal_Expected;
			Double afterRecivableBal, afterPayableBal,afterPaybleSubBal,afterRecivableSubBal,afterNetTotal_Expected;
			Double expValue = (Double.parseDouble(Utility.convertDollarToNormalAmount(driver,foliobalance)));
			beforeNetTotal_Expected=(Double.parseDouble(Utility.convertDollarToNormalAmount(driver,beforeNetTotal.get("NetTotal"))));
			afterNetTotal_Expected=(Double.parseDouble(Utility.convertDollarToNormalAmount(driver,afterNetTotal.get("NetTotal"))));
			
			reportLogger.info("beforeNetTotal_Expected: "+beforeNetTotal_Expected);
			reportLogger.info("afterNetTotal_Expected: "+afterNetTotal_Expected);
			
			if (reservationType.equalsIgnoreCase("Cancelled")) {
				beforeRecivableBal = Double.parseDouble(beforeRecivableBalances.get("Cancelled").replaceAll(",", ""));
				reportLogger.info("beforeRecivableBal: "+beforeRecivableBal);
				
				beforePaybleBal = Double.parseDouble(beforePaybleBalances.get("Cancelled").replaceAll(",", ""));
				reportLogger.info("beforePaybleBal: "+beforePaybleBal);
				
				
				afterRecivableBal = Double.parseDouble(afterRecivableBalances.get("Cancelled").replaceAll(",", ""));
				reportLogger.info("afterRecivableBal: "+afterRecivableBal);
				
				afterPayableBal = Double.parseDouble(afterPayableBalances.get("Cancelled").replaceAll(",", ""));
				reportLogger.info("afterPayableBal: "+afterPayableBal);
				
				
			}else if (reservationType.equalsIgnoreCase("Reserved")) {
				beforeRecivableBal = Double.parseDouble(beforeRecivableBalances.get("Reserved").replaceAll(",", ""));
				reportLogger.info("beforeRecivableBal: "+beforeRecivableBal);
				
				beforePaybleBal = Double.parseDouble(beforePaybleBalances.get("Reserved").replaceAll(",", ""));
				reportLogger.info("beforePaybleBal: "+beforePaybleBal);
				
				
				afterRecivableBal = Double.parseDouble(afterRecivableBalances.get("Reserved").replaceAll(",", ""));
				reportLogger.info("afterRecivableBal: "+afterRecivableBal);
				
				afterPayableBal = Double.parseDouble(afterPayableBalances.get("Reserved").replaceAll(",", ""));
				reportLogger.info("afterPayableBal: "+afterPayableBal);
				
				
			}else if (reservationType.equalsIgnoreCase("No Show")) {
				beforeRecivableBal = Double.parseDouble(beforeRecivableBalances.get("No Show").replaceAll(",", ""));
				reportLogger.info("beforeRecivableBal: "+beforeRecivableBal);
				
				beforePaybleBal = Double.parseDouble(beforePaybleBalances.get("No Show").replaceAll(",", ""));
				reportLogger.info("beforePaybleBal: "+beforePaybleBal);
				
				
				afterRecivableBal = Double.parseDouble(afterRecivableBalances.get("No Show").replaceAll(",", ""));
				reportLogger.info("afterRecivableBal: "+afterRecivableBal);
				
				afterPayableBal = Double.parseDouble(afterPayableBalances.get("No Show").replaceAll(",", ""));
				reportLogger.info("afterPayableBal: "+afterPayableBal);
				
				
			}else if (reservationType.equalsIgnoreCase("On Hold")) {
				beforeRecivableBal = Double.parseDouble(beforeRecivableBalances.get("On Hold").replaceAll(",", ""));
				reportLogger.info("beforeRecivableBal: "+beforeRecivableBal);
				
				beforePaybleBal = Double.parseDouble(beforePaybleBalances.get("On Hold").replaceAll(",", ""));
				reportLogger.info("beforePaybleBal: "+beforePaybleBal);
				
				
				afterRecivableBal = Double.parseDouble(afterRecivableBalances.get("On Hold").replaceAll(",", ""));
				reportLogger.info("afterRecivableBal: "+afterRecivableBal);
				
				afterPayableBal = Double.parseDouble(afterPayableBalances.get("On Hold").replaceAll(",", ""));
				reportLogger.info("afterPayableBal: "+afterPayableBal);
				
				
			}else if (reservationType.equalsIgnoreCase("Guaranteed")) {
				beforeRecivableBal = Double.parseDouble(beforeRecivableBalances.get("Guaranteed").replaceAll(",", ""));
				reportLogger.info("beforeRecivableBal: "+beforeRecivableBal);
				
				beforePaybleBal = Double.parseDouble(beforePaybleBalances.get("Guaranteed").replaceAll(",", ""));
				reportLogger.info("beforePaybleBal: "+beforePaybleBal);
				
				
				afterRecivableBal = Double.parseDouble(afterRecivableBalances.get("Guaranteed").replaceAll(",", ""));
				reportLogger.info("afterRecivableBal: "+afterRecivableBal);
				
				afterPayableBal = Double.parseDouble(afterPayableBalances.get("Guaranteed").replaceAll(",", ""));
				reportLogger.info("afterPayableBal: "+afterPayableBal);
				
				
			}else if (reservationType.equalsIgnoreCase("Departed")) {
				beforeRecivableBal = Double.parseDouble(beforeRecivableBalances.get("Departed").replaceAll(",", ""));
				reportLogger.info("beforeRecivableBal: "+beforeRecivableBal);
				
				beforePaybleBal = Double.parseDouble(beforePaybleBalances.get("Departed").replaceAll(",", ""));
				reportLogger.info("beforePaybleBal: "+beforePaybleBal);
				
				
				afterRecivableBal = Double.parseDouble(afterRecivableBalances.get("Departed").replaceAll(",", ""));
				reportLogger.info("afterRecivableBal: "+afterRecivableBal);
				
				afterPayableBal = Double.parseDouble(afterPayableBalances.get("Departed").replaceAll(",", ""));
				reportLogger.info("afterPayableBal: "+afterPayableBal);
				
				
			}else if (reservationType.equalsIgnoreCase("In-House")) {
				beforeRecivableBal = Double.parseDouble(beforeRecivableBalances.get("In-House").replaceAll(",", ""));
				reportLogger.info("beforeRecivableBal: "+beforeRecivableBal);
				
				beforePaybleBal = Double.parseDouble(beforePaybleBalances.get("In-House").replaceAll(",", ""));
				reportLogger.info("beforePaybleBal: "+beforePaybleBal);
				
				
				afterRecivableBal = Double.parseDouble(afterRecivableBalances.get("In-House").replaceAll(",", ""));
				reportLogger.info("afterRecivableBal: "+afterRecivableBal);
				
				afterPayableBal = Double.parseDouble(afterPayableBalances.get("In-House").replaceAll(",", ""));
				reportLogger.info("afterPayableBal: "+afterPayableBal);
				
				
			}else if (reservationType.equalsIgnoreCase("Confirmed")) {
				beforeRecivableBal = Double.parseDouble(beforeRecivableBalances.get("Confirmed").replaceAll(",", ""));
				reportLogger.info("beforeRecivableBal: "+beforeRecivableBal);
				
				beforePaybleBal = Double.parseDouble(beforePaybleBalances.get("Confirmed").replaceAll(",", ""));
				reportLogger.info("beforePaybleBal: "+beforePaybleBal);
				
				
				afterRecivableBal = Double.parseDouble(afterRecivableBalances.get("Confirmed").replaceAll(",", ""));
				reportLogger.info("afterRecivableBal: "+afterRecivableBal);
				
				afterPayableBal = Double.parseDouble(afterPayableBalances.get("Confirmed").replaceAll(",", ""));
				reportLogger.info("afterPayableBal: "+afterPayableBal);
			} else {
				beforeRecivableBal = Double.parseDouble(beforeRecivableBalances.get("").replaceAll(",", ""));
				reportLogger.info("beforeRecivableBal: "+beforeRecivableBal);
				
				beforePaybleBal = Double.parseDouble(beforePaybleBalances.get("").replaceAll(",", ""));
				reportLogger.info("beforePaybleBal: "+beforePaybleBal);
				
				
				afterRecivableBal = Double.parseDouble(afterRecivableBalances.get("").replaceAll(",", ""));
				reportLogger.info("afterRecivableBal: "+afterRecivableBal);
				
				afterPayableBal = Double.parseDouble(afterPayableBalances.get("").replaceAll(",", ""));
				reportLogger.info("afterPayableBal: "+afterPayableBal);
				
				
			}
			
			reportLogger.info("beforeRecivableBal: "+beforeRecivableBal);
			reportLogger.info("beforePaybleBal: "+beforePaybleBal);
			reportLogger.info("afterRecivableBal: "+afterRecivableBal);
			reportLogger.info("afterPayableBal: "+afterPayableBal);
			if(verifyRecivable)
			{
			Double actualRecivableValue = Utility.getRoundOffValueAfterDecimal(afterRecivableBal-beforeRecivableBal);
	
			assertEquals(Double.toString(actualRecivableValue).replaceAll("-", ""), Double.toString(expValue).replaceAll("-", ""),"Failed to verify Recivable value of "+expValue);					
			reportLogger.info("Recivable value of "+expValue+" - amount is validated successfully in details view of folio balance report");
			test_steps.add("Recivable value of "+expValue+" - amount is validated successfully in details view of folio balance report");

	        }
			
			if(verifyPayable)
			{
			Double actualPayableValue = Utility.getRoundOffValueAfterDecimal(afterPayableBal-beforePaybleBal);
			
				assertEquals(Double.toString(actualPayableValue).replaceAll("-", ""), Double.toString(expValue).replaceAll("-", ""),"Failed to verify payable value of "+expValue);					
				reportLogger.info("Payable value of "+expValue+" - amount is validated successfully in details view of folio balance report");
				test_steps.add("Payable value of "+expValue+" - amount is validated successfully in details view of folio balance report");
			
			}
			
			reportLogger.info("Get Subtotal  befor and after amount ");
			{
			beforeRecivableSubBal = Double.parseDouble(beforeRecivableBalances.get("Subtotal").replaceAll(",", ""));
			reportLogger.info("beforeRecivableBal: "+beforeRecivableBal);
			
			beforePaybleSubBal = Double.parseDouble(beforePaybleBalances.get("Subtotal").replaceAll(",", ""));
			reportLogger.info("beforePaybleBal: "+beforePaybleBal);
			
			
			afterRecivableSubBal = Double.parseDouble(afterRecivableBalances.get("Subtotal").replaceAll(",", ""));
			reportLogger.info("afterRecivableBal: "+afterRecivableBal);
			
			afterPaybleSubBal = Double.parseDouble(afterPayableBalances.get("Subtotal").replaceAll(",", ""));
			reportLogger.info("afterPayableBal: "+afterPayableBal);
			}
			
			reportLogger.info("GVerify nettoal and subtotal of summary view detail of folio balance report ");
			if(verifyRecivable)
			{
			Double actualSubTotalValue = Utility.getRoundOffValueAfterDecimal(afterRecivableSubBal-beforeRecivableSubBal);
			expValue=(Double.parseDouble(Utility.convertDollarToNormalAmount(driver,foliobalance)));
           
            assertEquals(Double.toString(actualSubTotalValue).replaceAll("-", ""), Double.toString(expValue).replaceAll("-", ""),"Failed to verify accountsubtotal");
			reportLogger.info("NetTotal amount "+expValue+" of detail view of folio balance report is validated successfully ");
			test_steps.add("NetTotal amount "+expValue+" of detail view of folio balance report is validated successfully ");
			
			}
			if(verifyPayable)
			{
			Double actualSubTotalValue = Utility.getRoundOffValueAfterDecimal(afterPaybleSubBal-beforePaybleSubBal);
			expValue=(Double.parseDouble(Utility.convertDollarToNormalAmount(driver,foliobalance)));
           
            assertEquals(Double.toString(actualSubTotalValue).replaceAll("-", ""), Double.toString(expValue).replaceAll("-", ""),"Failed to verify accountsubtotal");
     		reportLogger.info("NetTotal amount "+expValue+" of detail view of folio balance report is validated successfully ");
     		test_steps.add("NetTotal amount "+expValue+" of detail view of folio balance report is validated successfully ");
     			
			}
			

	 }
	 public void reservationTableSortedByGuestName(WebDriver driver, ArrayList<String> test_steps) throws InterruptedException {
	        Elements_Reports element =new Elements_Reports(driver);
	        //int i = 0;
	        List<String> names = new ArrayList<String>();
	        List<String> copyTestData = new ArrayList<String>();
	        List<String> sortedNames = new ArrayList<String>();
	        Wait.wait5Second();
	        for(int i=0;i < element.guestList.size();i++) {
	            String elementText = element.guestList.get(i).getText().trim().toUpperCase();
	            names.add(elementText);           
	       }           
	        
	        copyTestData.addAll(names);			
			Collections.sort(copyTestData);				
			reportLogger.info("copyTestData :"+copyTestData);
			reportLogger.info("copyTestData :"+copyTestData.size());
			reportLogger.info("Verify the sorting order by comparing each record");
			boolean isSortingData=false;
			for(int j=0;j<copyTestData.size();j++)
			{				
				if(names.get(j).equals(copyTestData.get(j)))
				{						
					isSortingData=true;
					reportLogger.info("copyTestData :"+copyTestData.get(j)+" names: "+names.get(j));					
				}
				else
				{
					isSortingData=false;
					break;
				}
			}
	        //Collections.sort(sortedNames);
	        test_steps.add("--- Verifying 'guestname' Column is Sorted in ascending ---");
	        reportLogger.info("--- Verifying 'guestname' Column is Sorted in ascending ---");
	        assertEquals(isSortingData, true, "Failed 'guestname' column is not sorted in ascending");
	        test_steps.add(" Verified 'guestname' column is sorted in ascending order");
	        reportLogger.info(" Verified 'guestname' column is sorted in ascending order");
	    }
	

public void verifyNetSalesReportDetailedViewUserWise(WebDriver driver, String viewName, String reportName, int columnNo, String username,ArrayList<String> expectedValue,ArrayList<String> testSteps) {
	String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//th//div[contains(text(),'"+username+"')]/../../../..//following-sibling::tbody//td["+columnNo+"]";
	List<WebElement> elements= driver.findElements(By.xpath(path));
	for(int i=0;i< elements.size();i++) {
		String actualValue=elements.get(i).getText();	
		if(actualValue.toString().contains(",") && actualValue.toString().contains("$")) {
			actualValue=Utility.convertDecimalFormat(actualValue.replace("$", "").replace(",", ""));
			}else if(actualValue.toString().contains("$")){
				actualValue=Utility.convertDecimalFormat(actualValue.replace("$", ""));}
		Utility.verifyText(actualValue, expectedValue.get(i), viewName+" -- "+reportName +" -- " + columnNo , testSteps, reportLogger);

	} 		
}

public void verifyNetSalesReportDetailedViewUserWiseAvgStay(WebDriver driver, String viewName, String reportName, int columnNo, String username,ArrayList<String> expectedValue,ArrayList<String> testSteps) {
	//String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//td["+columnNo+"]";
	String path="//h2[contains(text(),'"+viewName+" | "+reportName+"')]/parent::div//following-sibling::div[1]//th//div[contains(text(),'"+username+"')]/../../../..//following-sibling::tbody//td["+columnNo+"]";
	List<WebElement> elements= driver.findElements(By.xpath(path));
	for(int i=0;i< elements.size();i++) {
		String actualValue=elements.get(i).getText();
			actualValue=Utility.convertDecimalFormat(actualValue);
		Utility.verifyText(actualValue, expectedValue.get(i), viewName+" -- "+reportName +" -- " + columnNo , testSteps, reportLogger);

	} 		
}

public void OpenReservationFromReportTabAndVerify(WebDriver driver,ArrayList<String> testSteps,String reservationNumber,boolean clickOnReservationNumber ) throws Exception{
	
String detailViewGuestName="//a[text()='"+reservationNumber+"']/../..//td/a";
String detailViewReservation_No="(//a[text()='"+reservationNumber+"']/../..//td/a)[2]";
if(clickOnReservationNumber)
{
Wait.WaitForElement(driver, detailViewGuestName);
driver.findElement(By.xpath(detailViewGuestName)).click();
Wait.wait2Second();
}else {
	Wait.WaitForElement(driver, detailViewReservation_No);
	driver.findElement(By.xpath(detailViewReservation_No)).click();
	Wait.wait2Second();
}
/*
  String  actual_detailViewGuestName=driver.findElement(By.xpath(detailViewGuestName)).getText().trim();
  reportLogger.info("actual_detailViewGuestName :"+actual_detailViewGuestName);	
	
  String  expected_detailViewGuestName=guestName; 
  reportLogger.info("expected_detailViewGuestName :"+expected_detailViewGuestName);	
  assertEquals(actual_detailViewGuestName, expected_detailViewGuestName,"Failed to verify guestname");
  test_steps.add("Verified foliobalance Report guest name "+expected_detailViewGuestName);
  reportLogger.info("Verified foliobalance Report guest name "+expected_detailViewGuestName);	
	
  
  Wait.WaitForElement(driver, detailViewReservation_No);
  String  actual_detailViewReservation_No=driver.findElement(By.xpath(detailViewReservation_No)).getText().trim();
  reportLogger.info("actual_detailViewReservation_No :"+actual_detailViewReservation_No);	
  */
}
}


